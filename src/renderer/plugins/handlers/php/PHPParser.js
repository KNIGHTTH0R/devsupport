// Generated from PHPParser.g4 by ANTLR 4.5.3
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PHPParserListener = require('./PHPParserListener').PHPParserListener;
var grammarFileName = "PHPParser.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003\u00e5\u063d\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0003\u0002\u0005\u0002\u0106\n\u0002\u0003\u0002\u0007\u0002",
    "\u0109\n\u0002\f\u0002\u000e\u0002\u010c\u000b\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0113\n\u0003",
    "\u0003\u0004\u0006\u0004\u0116\n\u0004\r\u0004\u000e\u0004\u0117\u0003",
    "\u0005\u0003\u0005\u0003\u0006\u0006\u0006\u011d\n\u0006\r\u0006\u000e",
    "\u0006\u011e\u0003\u0007\u0007\u0007\u0122\n\u0007\f\u0007\u000e\u0007",
    "\u0125\u000b\u0007\u0003\u0007\u0006\u0007\u0128\n\u0007\r\u0007\u000e",
    "\u0007\u0129\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0138\n\t\u0003\n\u0003",
    "\n\u0005\n\u013c\n\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0005\u000b",
    "\u0142\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0147",
    "\n\u000b\u0003\u000b\u0007\u000b\u014a\n\u000b\f\u000b\u000e\u000b\u014d",
    "\u000b\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u0152\n\f\u0003\r\u0003",
    "\r\u0005\r\u0156\n\r\u0003\r\u0003\r\u0007\r\u015a\n\r\f\r\u000e\r\u015d",
    "\u000b\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0163\n\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u016a\n",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u016f\n\u000f",
    "\u0003\u000f\u0003\u000f\u0005\u000f\u0173\n\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u017c\n\u0010\u0003\u0010\u0005\u0010\u017f\n\u0010\u0003\u0010",
    "\u0005\u0010\u0182\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0187\n\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u018b\n\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u018f\n\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u0194\n\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u0198\n\u0010\u0005\u0010\u019a\n\u0010\u0003\u0010\u0003",
    "\u0010\u0007\u0010\u019e\n\u0010\f\u0010\u000e\u0010\u01a1\u000b\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0007\u0012\u01aa\n\u0012\f\u0012\u000e\u0012\u01ad\u000b",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01bd\n\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0007\u0014\u01c2\n\u0014\f\u0014\u000e\u0014",
    "\u01c5\u000b\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u01ca",
    "\n\u0015\f\u0015\u000e\u0015\u01cd\u000b\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u01d7\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0007\u0018\u01dd\n\u0018\f\u0018\u000e\u0018\u01e0\u000b\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0019\u0007\u0019\u01e5\n\u0019\f\u0019",
    "\u000e\u0019\u01e8\u000b\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u01ee\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0007\u001a\u01f3\n\u001a\f\u001a\u000e\u001a\u01f6\u000b\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u020c\n\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0007\u001c\u0211\n\u001c\f\u001c\u000e\u001c\u0214\u000b",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u0219\n\u001d",
    "\f\u001d\u000e\u001d\u021c\u000b\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001f\u0007\u001f\u0223\n\u001f\f\u001f\u000e",
    "\u001f\u0226\u000b\u001f\u0003 \u0003 \u0003 \u0005 \u022b\n \u0003",
    "!\u0003!\u0005!\u022f\n!\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u024d\n#\u0003$\u0003$\u0003$\u0003$\u0003%\u0003",
    "%\u0003%\u0003%\u0007%\u0257\n%\f%\u000e%\u025a\u000b%\u0003%\u0005",
    "%\u025d\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0007%\u0264\n%\f%\u000e",
    "%\u0267\u000b%\u0003%\u0005%\u026a\n%\u0003%\u0003%\u0003%\u0005%\u026f",
    "\n%\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u0289\n*\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0005,\u0294\n,\u0003,\u0003",
    ",\u0005,\u0298\n,\u0003,\u0003,\u0005,\u029c\n,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0005,\u02a5\n,\u0003-\u0003-\u0003.\u0003",
    ".\u0003/\u0003/\u0003/\u0003/\u0005/\u02af\n/\u0003/\u0007/\u02b2\n",
    "/\f/\u000e/\u02b5\u000b/\u0003/\u0003/\u0003/\u0005/\u02ba\n/\u0003",
    "/\u0007/\u02bd\n/\f/\u000e/\u02c0\u000b/\u0003/\u0003/\u0005/\u02c4",
    "\n/\u00030\u00030\u00030\u00050\u02c9\n0\u00030\u00060\u02cc\n0\r0\u000e",
    "0\u02cd\u00030\u00030\u00031\u00031\u00051\u02d4\n1\u00031\u00031\u0003",
    "2\u00032\u00052\u02da\n2\u00032\u00032\u00033\u00033\u00053\u02e0\n",
    "3\u00033\u00033\u00034\u00034\u00034\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00036\u00036\u00036\u00036\u00036\u00056\u02f2\n6\u00036\u0003",
    "6\u00036\u00056\u02f7\n6\u00036\u00056\u02fa\n6\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00056\u0304\n6\u00036\u00056\u0307",
    "\n6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00056\u0314\n6\u00036\u00036\u00036\u00036\u00036\u00036\u0005",
    "6\u031c\n6\u00037\u00037\u00037\u00067\u0321\n7\r7\u000e7\u0322\u0003",
    "7\u00057\u0326\n7\u00037\u00077\u0329\n7\f7\u000e7\u032c\u000b7\u0003",
    "7\u00057\u032f\n7\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "9\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003",
    ";\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0005<\u034d\n<\u0003=\u0003=\u0006=\u0351\n=\r=\u000e=\u0352\u0003",
    ">\u0003>\u0003>\u0007>\u0358\n>\f>\u000e>\u035b\u000b>\u0003?\u0005",
    "?\u035e\n?\u0003?\u0003?\u0007?\u0362\n?\f?\u000e?\u0365\u000b?\u0003",
    "@\u0003@\u0005@\u0369\n@\u0003@\u0005@\u036c\n@\u0003@\u0005@\u036f",
    "\n@\u0003@\u0003@\u0003A\u0003A\u0003A\u0005A\u0376\nA\u0003B\u0003",
    "B\u0003B\u0003B\u0007B\u037c\nB\fB\u000eB\u037f\u000bB\u0003B\u0003",
    "B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u038b",
    "\nC\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0007E\u0395",
    "\nE\fE\u000eE\u0398\u000bE\u0003E\u0003E\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0007F\u03a1\nF\fF\u000eF\u03a4\u000bF\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0007F\u03ad\nF\fF\u000eF\u03b0\u000b",
    "F\u0003F\u0003F\u0003F\u0003F\u0005F\u03b6\nF\u0003F\u0003F\u0005F\u03ba",
    "\nF\u0003F\u0003F\u0005F\u03be\nF\u0003F\u0003F\u0003F\u0003F\u0005",
    "F\u03c4\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u03cc\n",
    "F\u0003G\u0003G\u0003G\u0007G\u03d1\nG\fG\u000eG\u03d4\u000bG\u0003",
    "G\u0005G\u03d7\nG\u0003H\u0003H\u0005H\u03db\nH\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0005J\u03e8",
    "\nJ\u0003J\u0005J\u03eb\nJ\u0003J\u0003J\u0003K\u0003K\u0003K\u0005",
    "K\u03f2\nK\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003M\u0003M\u0005",
    "M\u03fc\nM\u0003N\u0003N\u0005N\u0400\nN\u0003O\u0006O\u0403\nO\rO\u000e",
    "O\u0404\u0003P\u0003P\u0003P\u0005P\u040a\nP\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0007R\u0415\nR\fR\u000eR\u0418",
    "\u000bR\u0003R\u0003R\u0003S\u0003S\u0003S\u0007S\u041f\nS\fS\u000e",
    "S\u0422\u000bS\u0003T\u0003T\u0003T\u0005T\u0427\nT\u0003T\u0003T\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0005U\u044b\nU\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0005U\u0458\nU\u0003U\u0003U\u0003U\u0005",
    "U\u045d\nU\u0003U\u0005U\u0460\nU\u0003U\u0003U\u0003U\u0003U\u0005",
    "U\u0466\nU\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u0483",
    "\nU\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u048a\nU\u0003U\u0003",
    "U\u0005U\u048e\nU\u0003U\u0003U\u0003U\u0003U\u0005U\u0494\nU\u0003",
    "U\u0003U\u0005U\u0498\nU\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005",
    "U\u04be\nU\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0007U\u04ce\nU\fU\u000eU\u04d1",
    "\u000bU\u0003V\u0003V\u0003V\u0005V\u04d6\nV\u0003W\u0003W\u0003X\u0003",
    "X\u0003X\u0003X\u0005X\u04de\nX\u0003Y\u0003Y\u0003Y\u0007Y\u04e3\n",
    "Y\fY\u000eY\u04e6\u000bY\u0003Y\u0005Y\u04e9\nY\u0003Z\u0003Z\u0003",
    "Z\u0005Z\u04ee\nZ\u0003Z\u0003Z\u0003Z\u0005Z\u04f3\nZ\u0003Z\u0003",
    "Z\u0005Z\u04f7\nZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0007[\u04fe\n",
    "[\f[\u000e[\u0501\u000b[\u0003[\u0003[\u0003\\\u0005\\\u0506\n\\\u0003",
    "\\\u0003\\\u0003]\u0003]\u0005]\u050c\n]\u0003]\u0005]\u050f\n]\u0003",
    "^\u0003^\u0005^\u0513\n^\u0003^\u0005^\u0516\n^\u0003^\u0003^\u0005",
    "^\u051a\n^\u0003_\u0003_\u0003_\u0007_\u051f\n_\f_\u000e_\u0522\u000b",
    "_\u0003`\u0005`\u0525\n`\u0003`\u0005`\u0528\n`\u0003`\u0003`\u0003",
    "a\u0003a\u0003a\u0007a\u052f\na\fa\u000ea\u0532\u000ba\u0003b\u0003",
    "b\u0003b\u0007b\u0537\nb\fb\u000eb\u053a\u000bb\u0003c\u0003c\u0003",
    "c\u0003c\u0007c\u0540\nc\fc\u000ec\u0543\u000bc\u0003c\u0005c\u0546",
    "\nc\u0003c\u0003c\u0003d\u0005d\u054b\nd\u0003d\u0003d\u0003d\u0005",
    "d\u0550\nd\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u0558\n",
    "e\u0005e\u055a\ne\u0003e\u0003e\u0003e\u0003e\u0005e\u0560\ne\u0005",
    "e\u0562\ne\u0003e\u0003e\u0003e\u0005e\u0567\ne\u0003f\u0003f\u0003",
    "f\u0007f\u056c\nf\ff\u000ef\u056f\u000bf\u0003g\u0003g\u0003g\u0005",
    "g\u0574\ng\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\u057b\nh\u0003",
    "i\u0003i\u0003i\u0003i\u0005i\u0581\ni\u0003j\u0003j\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0005k\u058b\nk\u0003k\u0003k\u0005k\u058f\n",
    "k\u0003k\u0003k\u0003k\u0005k\u0594\nk\u0003l\u0003l\u0003m\u0003m\u0006",
    "m\u059a\nm\rm\u000em\u059b\u0003m\u0003m\u0006m\u05a0\nm\rm\u000em\u05a1",
    "\u0003m\u0003m\u0003m\u0007m\u05a7\nm\fm\u000em\u05aa\u000bm\u0003m",
    "\u0005m\u05ad\nm\u0003n\u0003n\u0005n\u05b1\nn\u0003o\u0003o\u0003o",
    "\u0007o\u05b6\no\fo\u000eo\u05b9\u000bo\u0003p\u0003p\u0003p\u0003p",
    "\u0003p\u0003p\u0005p\u05c1\np\u0003p\u0007p\u05c4\np\fp\u000ep\u05c7",
    "\u000bp\u0003q\u0003q\u0003q\u0005q\u05cc\nq\u0003r\u0003r\u0003r\u0003",
    "s\u0003s\u0003s\u0005s\u05d4\ns\u0003t\u0005t\u05d7\nt\u0003t\u0003",
    "t\u0007t\u05db\nt\ft\u000et\u05de\u000bt\u0003u\u0003u\u0003u\u0005",
    "u\u05e3\nu\u0003u\u0003u\u0003u\u0003u\u0005u\u05e9\nu\u0003v\u0003",
    "v\u0005v\u05ed\nv\u0003w\u0003w\u0003w\u0003w\u0003w\u0005w\u05f4\n",
    "w\u0003w\u0007w\u05f7\nw\fw\u000ew\u05fa\u000bw\u0003x\u0007x\u05fd",
    "\nx\fx\u000ex\u0600\u000bx\u0003x\u0003x\u0003x\u0003x\u0003x\u0003",
    "x\u0005x\u0608\nx\u0003x\u0007x\u060b\nx\fx\u000ex\u060e\u000bx\u0003",
    "y\u0003y\u0005y\u0612\ny\u0003y\u0003y\u0003y\u0003y\u0003y\u0005y\u0619",
    "\ny\u0003z\u0005z\u061c\nz\u0003z\u0003z\u0005z\u0620\nz\u0007z\u0622",
    "\nz\fz\u000ez\u0625\u000bz\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0005{\u062d\n{\u0003|\u0003|\u0003}\u0003}\u0003~\u0003~\u0003\u007f",
    "\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0002\u0003\u00a8\u0083\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0002\u001b\u000b\u0002\u0004\u0004\u0006\u0007\t\n\u000e\u0015",
    "\u0017\u0017\u001a\u001b\u001e\u001f\"\"$$\u0004\u000266OO\u0004\u0002",
    "44uu\u0003\u0002\u00ce\u00cf\u0003\u0002\u00c2\u00c3\u0004\u0002\u00bb",
    "\u00bb\u00bd\u00be\u0003\u0002\u009a\u009b\u0003\u0002UV\u0003\u0002",
    "mn\u0003\u0002\u00bf\u00c1\u0004\u0002\u00bd\u00be\u00c5\u00c5\u0003",
    "\u0002\u00b1\u00b2\u0004\u0002\u00a0\u00a1\u00b7\u00b8\u0003\u0002\u009c",
    "\u009f\u0005\u0002\u00a2\u00a4\u00a6\u00ae\u00d0\u00d0\u0003\u0002\u00bd",
    "\u00be\u0004\u0002\u00d5\u00d6\u00d8\u00d9\u0004\u000244gg\u0004\u0002",
    "**JJ\u0004\u0002*\u0096\u00d4\u00d4\u0006\u0002**JJjlqq\u0003\u0002",
    "\u008f\u0096\u0003\u0002\u007f\u008e\t\u0002++..<<[\\ffoorr\u000b\u0002",
    "++-.;<LLY\\ffoorrxz\u06d0\u0002\u0105\u0003\u0002\u0002\u0002\u0004",
    "\u0112\u0003\u0002\u0002\u0002\u0006\u0115\u0003\u0002\u0002\u0002\b",
    "\u0119\u0003\u0002\u0002\u0002\n\u011c\u0003\u0002\u0002\u0002\f\u0123",
    "\u0003\u0002\u0002\u0002\u000e\u012b\u0003\u0002\u0002\u0002\u0010\u0137",
    "\u0003\u0002\u0002\u0002\u0012\u0139\u0003\u0002\u0002\u0002\u0014\u0141",
    "\u0003\u0002\u0002\u0002\u0016\u014e\u0003\u0002\u0002\u0002\u0018\u0153",
    "\u0003\u0002\u0002\u0002\u001a\u0169\u0003\u0002\u0002\u0002\u001c\u016b",
    "\u0003\u0002\u0002\u0002\u001e\u0179\u0003\u0002\u0002\u0002 \u01a4",
    "\u0003\u0002\u0002\u0002\"\u01a6\u0003\u0002\u0002\u0002$\u01bc\u0003",
    "\u0002\u0002\u0002&\u01be\u0003\u0002\u0002\u0002(\u01c6\u0003\u0002",
    "\u0002\u0002*\u01ce\u0003\u0002\u0002\u0002,\u01d1\u0003\u0002\u0002",
    "\u0002.\u01d8\u0003\u0002\u0002\u00020\u01e6\u0003\u0002\u0002\u0002",
    "2\u01e9\u0003\u0002\u0002\u00024\u020b\u0003\u0002\u0002\u00026\u020d",
    "\u0003\u0002\u0002\u00028\u0215\u0003\u0002\u0002\u0002:\u021d\u0003",
    "\u0002\u0002\u0002<\u0224\u0003\u0002\u0002\u0002>\u022a\u0003\u0002",
    "\u0002\u0002@\u022e\u0003\u0002\u0002\u0002B\u0230\u0003\u0002\u0002",
    "\u0002D\u024c\u0003\u0002\u0002\u0002F\u024e\u0003\u0002\u0002\u0002",
    "H\u026e\u0003\u0002\u0002\u0002J\u0270\u0003\u0002\u0002\u0002L\u0274",
    "\u0003\u0002\u0002\u0002N\u0279\u0003\u0002\u0002\u0002P\u027c\u0003",
    "\u0002\u0002\u0002R\u0280\u0003\u0002\u0002\u0002T\u028a\u0003\u0002",
    "\u0002\u0002V\u0290\u0003\u0002\u0002\u0002X\u02a6\u0003\u0002\u0002",
    "\u0002Z\u02a8\u0003\u0002\u0002\u0002\\\u02aa\u0003\u0002\u0002\u0002",
    "^\u02cb\u0003\u0002\u0002\u0002`\u02d1\u0003\u0002\u0002\u0002b\u02d7",
    "\u0003\u0002\u0002\u0002d\u02dd\u0003\u0002\u0002\u0002f\u02e3\u0003",
    "\u0002\u0002\u0002h\u02e6\u0003\u0002\u0002\u0002j\u02ec\u0003\u0002",
    "\u0002\u0002l\u031d\u0003\u0002\u0002\u0002n\u0330\u0003\u0002\u0002",
    "\u0002p\u0337\u0003\u0002\u0002\u0002r\u033a\u0003\u0002\u0002\u0002",
    "t\u033e\u0003\u0002\u0002\u0002v\u0342\u0003\u0002\u0002\u0002x\u0350",
    "\u0003\u0002\u0002\u0002z\u0354\u0003\u0002\u0002\u0002|\u035d\u0003",
    "\u0002\u0002\u0002~\u0366\u0003\u0002\u0002\u0002\u0080\u0375\u0003",
    "\u0002\u0002\u0002\u0082\u0377\u0003\u0002\u0002\u0002\u0084\u038a\u0003",
    "\u0002\u0002\u0002\u0086\u038c\u0003\u0002\u0002\u0002\u0088\u0390\u0003",
    "\u0002\u0002\u0002\u008a\u03cb\u0003\u0002\u0002\u0002\u008c\u03d6\u0003",
    "\u0002\u0002\u0002\u008e\u03da\u0003\u0002\u0002\u0002\u0090\u03dc\u0003",
    "\u0002\u0002\u0002\u0092\u03e3\u0003\u0002\u0002\u0002\u0094\u03f1\u0003",
    "\u0002\u0002\u0002\u0096\u03f5\u0003\u0002\u0002\u0002\u0098\u03fb\u0003",
    "\u0002\u0002\u0002\u009a\u03ff\u0003\u0002\u0002\u0002\u009c\u0402\u0003",
    "\u0002\u0002\u0002\u009e\u0406\u0003\u0002\u0002\u0002\u00a0\u040b\u0003",
    "\u0002\u0002\u0002\u00a2\u040f\u0003\u0002\u0002\u0002\u00a4\u041b\u0003",
    "\u0002\u0002\u0002\u00a6\u0423\u0003\u0002\u0002\u0002\u00a8\u0497\u0003",
    "\u0002\u0002\u0002\u00aa\u04d2\u0003\u0002\u0002\u0002\u00ac\u04d7\u0003",
    "\u0002\u0002\u0002\u00ae\u04d9\u0003\u0002\u0002\u0002\u00b0\u04df\u0003",
    "\u0002\u0002\u0002\u00b2\u04f6\u0003\u0002\u0002\u0002\u00b4\u04f8\u0003",
    "\u0002\u0002\u0002\u00b6\u0505\u0003\u0002\u0002\u0002\u00b8\u050e\u0003",
    "\u0002\u0002\u0002\u00ba\u0519\u0003\u0002\u0002\u0002\u00bc\u051b\u0003",
    "\u0002\u0002\u0002\u00be\u0524\u0003\u0002\u0002\u0002\u00c0\u052b\u0003",
    "\u0002\u0002\u0002\u00c2\u0533\u0003\u0002\u0002\u0002\u00c4\u053b\u0003",
    "\u0002\u0002\u0002\u00c6\u054f\u0003\u0002\u0002\u0002\u00c8\u0566\u0003",
    "\u0002\u0002\u0002\u00ca\u0568\u0003\u0002\u0002\u0002\u00cc\u0570\u0003",
    "\u0002\u0002\u0002\u00ce\u057a\u0003\u0002\u0002\u0002\u00d0\u0580\u0003",
    "\u0002\u0002\u0002\u00d2\u0582\u0003\u0002\u0002\u0002\u00d4\u0593\u0003",
    "\u0002\u0002\u0002\u00d6\u0595\u0003\u0002\u0002\u0002\u00d8\u05ac\u0003",
    "\u0002\u0002\u0002\u00da\u05b0\u0003\u0002\u0002\u0002\u00dc\u05b2\u0003",
    "\u0002\u0002\u0002\u00de\u05c0\u0003\u0002\u0002\u0002\u00e0\u05c8\u0003",
    "\u0002\u0002\u0002\u00e2\u05cd\u0003\u0002\u0002\u0002\u00e4\u05d3\u0003",
    "\u0002\u0002\u0002\u00e6\u05d6\u0003\u0002\u0002\u0002\u00e8\u05e8\u0003",
    "\u0002\u0002\u0002\u00ea\u05ec\u0003\u0002\u0002\u0002\u00ec\u05f3\u0003",
    "\u0002\u0002\u0002\u00ee\u05fe\u0003\u0002\u0002\u0002\u00f0\u0618\u0003",
    "\u0002\u0002\u0002\u00f2\u061b\u0003\u0002\u0002\u0002\u00f4\u062c\u0003",
    "\u0002\u0002\u0002\u00f6\u062e\u0003\u0002\u0002\u0002\u00f8\u0630\u0003",
    "\u0002\u0002\u0002\u00fa\u0632\u0003\u0002\u0002\u0002\u00fc\u0634\u0003",
    "\u0002\u0002\u0002\u00fe\u0636\u0003\u0002\u0002\u0002\u0100\u0638\u0003",
    "\u0002\u0002\u0002\u0102\u063a\u0003\u0002\u0002\u0002\u0104\u0106\u0007",
    "\u000b\u0002\u0002\u0105\u0104\u0003\u0002\u0002\u0002\u0105\u0106\u0003",
    "\u0002\u0002\u0002\u0106\u010a\u0003\u0002\u0002\u0002\u0107\u0109\u0005",
    "\u0004\u0003\u0002\u0108\u0107\u0003\u0002\u0002\u0002\u0109\u010c\u0003",
    "\u0002\u0002\u0002\u010a\u0108\u0003\u0002\u0002\u0002\u010a\u010b\u0003",
    "\u0002\u0002\u0002\u010b\u010d\u0003\u0002\u0002\u0002\u010c\u010a\u0003",
    "\u0002\u0002\u0002\u010d\u010e\u0007\u0002\u0002\u0003\u010e\u0003\u0003",
    "\u0002\u0002\u0002\u010f\u0113\u0005\u0006\u0004\u0002\u0110\u0113\u0005",
    "\f\u0007\u0002\u0111\u0113\u0005\n\u0006\u0002\u0112\u010f\u0003\u0002",
    "\u0002\u0002\u0112\u0110\u0003\u0002\u0002\u0002\u0112\u0111\u0003\u0002",
    "\u0002\u0002\u0113\u0005\u0003\u0002\u0002\u0002\u0114\u0116\u0005\b",
    "\u0005\u0002\u0115\u0114\u0003\u0002\u0002\u0002\u0116\u0117\u0003\u0002",
    "\u0002\u0002\u0117\u0115\u0003\u0002\u0002\u0002\u0117\u0118\u0003\u0002",
    "\u0002\u0002\u0118\u0007\u0003\u0002\u0002\u0002\u0119\u011a\t\u0002",
    "\u0002\u0002\u011a\t\u0003\u0002\u0002\u0002\u011b\u011d\u0007!\u0002",
    "\u0002\u011c\u011b\u0003\u0002\u0002\u0002\u011d\u011e\u0003\u0002\u0002",
    "\u0002\u011e\u011c\u0003\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002",
    "\u0002\u011f\u000b\u0003\u0002\u0002\u0002\u0120\u0122\u0005\u000e\b",
    "\u0002\u0121\u0120\u0003\u0002\u0002\u0002\u0122\u0125\u0003\u0002\u0002",
    "\u0002\u0123\u0121\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002",
    "\u0002\u0124\u0127\u0003\u0002\u0002\u0002\u0125\u0123\u0003\u0002\u0002",
    "\u0002\u0126\u0128\u0005\u0010\t\u0002\u0127\u0126\u0003\u0002\u0002",
    "\u0002\u0128\u0129\u0003\u0002\u0002\u0002\u0129\u0127\u0003\u0002\u0002",
    "\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\r\u0003\u0002\u0002",
    "\u0002\u012b\u012c\u0007T\u0002\u0002\u012c\u012d\u0007c\u0002\u0002",
    "\u012d\u012e\u0005\u00c0a\u0002\u012e\u012f\u0007\u00cf\u0002\u0002",
    "\u012f\u000f\u0003\u0002\u0002\u0002\u0130\u0138\u0005B\"\u0002\u0131",
    "\u0138\u0005D#\u0002\u0132\u0138\u0005\u0012\n\u0002\u0133\u0138\u0005",
    "\u0018\r\u0002\u0134\u0138\u0005\u001c\u000f\u0002\u0135\u0138\u0005",
    "\u001e\u0010\u0002\u0136\u0138\u0005\u00a2R\u0002\u0137\u0130\u0003",
    "\u0002\u0002\u0002\u0137\u0131\u0003\u0002\u0002\u0002\u0137\u0132\u0003",
    "\u0002\u0002\u0002\u0137\u0133\u0003\u0002\u0002\u0002\u0137\u0134\u0003",
    "\u0002\u0002\u0002\u0137\u0135\u0003\u0002\u0002\u0002\u0137\u0136\u0003",
    "\u0002\u0002\u0002\u0138\u0011\u0003\u0002\u0002\u0002\u0139\u013b\u0007",
    "{\u0002\u0002\u013a\u013c\t\u0003\u0002\u0002\u013b\u013a\u0003\u0002",
    "\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u013d\u0003\u0002",
    "\u0002\u0002\u013d\u013e\u0005\u0014\u000b\u0002\u013e\u013f\u0007\u00cf",
    "\u0002\u0002\u013f\u0013\u0003\u0002\u0002\u0002\u0140\u0142\u0007\u00b5",
    "\u0002\u0002\u0141\u0140\u0003\u0002\u0002\u0002\u0141\u0142\u0003\u0002",
    "\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143\u014b\u0005\u0016",
    "\f\u0002\u0144\u0146\u0007\u00cd\u0002\u0002\u0145\u0147\u0007\u00b5",
    "\u0002\u0002\u0146\u0145\u0003\u0002\u0002\u0002\u0146\u0147\u0003\u0002",
    "\u0002\u0002\u0147\u0148\u0003\u0002\u0002\u0002\u0148\u014a\u0005\u0016",
    "\f\u0002\u0149\u0144\u0003\u0002\u0002\u0002\u014a\u014d\u0003\u0002",
    "\u0002\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002",
    "\u0002\u0002\u014c\u0015\u0003\u0002\u0002\u0002\u014d\u014b\u0003\u0002",
    "\u0002\u0002\u014e\u0151\u0005\u00c0a\u0002\u014f\u0150\u0007,\u0002",
    "\u0002\u0150\u0152\u0005\u00f8}\u0002\u0151\u014f\u0003\u0002\u0002",
    "\u0002\u0151\u0152\u0003\u0002\u0002\u0002\u0152\u0017\u0003\u0002\u0002",
    "\u0002\u0153\u0162\u0007c\u0002\u0002\u0154\u0156\u0005\u00c0a\u0002",
    "\u0155\u0154\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002",
    "\u0156\u0157\u0003\u0002\u0002\u0002\u0157\u015b\u0007\u00cb\u0002\u0002",
    "\u0158\u015a\u0005\u001a\u000e\u0002\u0159\u0158\u0003\u0002\u0002\u0002",
    "\u015a\u015d\u0003\u0002\u0002\u0002\u015b\u0159\u0003\u0002\u0002\u0002",
    "\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u015e\u0003\u0002\u0002\u0002",
    "\u015d\u015b\u0003\u0002\u0002\u0002\u015e\u0163\u0007\u00cc\u0002\u0002",
    "\u015f\u0160\u0005\u00c0a\u0002\u0160\u0161\u0007\u00cf\u0002\u0002",
    "\u0161\u0163\u0003\u0002\u0002\u0002\u0162\u0155\u0003\u0002\u0002\u0002",
    "\u0162\u015f\u0003\u0002\u0002\u0002\u0163\u0019\u0003\u0002\u0002\u0002",
    "\u0164\u016a\u0005D#\u0002\u0165\u016a\u0005\u0012\n\u0002\u0166\u016a",
    "\u0005\u001c\u000f\u0002\u0167\u016a\u0005\u001e\u0010\u0002\u0168\u016a",
    "\u0005\u00a2R\u0002\u0169\u0164\u0003\u0002\u0002\u0002\u0169\u0165",
    "\u0003\u0002\u0002\u0002\u0169\u0166\u0003\u0002\u0002\u0002\u0169\u0167",
    "\u0003\u0002\u0002\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u016a\u001b",
    "\u0003\u0002\u0002\u0002\u016b\u016c\u00050\u0019\u0002\u016c\u016e",
    "\u0007O\u0002\u0002\u016d\u016f\u0007\u00b9\u0002\u0002\u016e\u016d",
    "\u0003\u0002\u0002\u0002\u016e\u016f\u0003\u0002\u0002\u0002\u016f\u0170",
    "\u0003\u0002\u0002\u0002\u0170\u0172\u0005\u00f8}\u0002\u0171\u0173",
    "\u0005$\u0013\u0002\u0172\u0171\u0003\u0002\u0002\u0002\u0172\u0173",
    "\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u0175",
    "\u0007\u00c7\u0002\u0002\u0175\u0176\u0005|?\u0002\u0176\u0177\u0007",
    "\u00c8\u0002\u0002\u0177\u0178\u0005F$\u0002\u0178\u001d\u0003\u0002",
    "\u0002\u0002\u0179\u017b\u00050\u0019\u0002\u017a\u017c\u0007j\u0002",
    "\u0002\u017b\u017a\u0003\u0002\u0002\u0002\u017b\u017c\u0003\u0002\u0002",
    "\u0002\u017c\u017e\u0003\u0002\u0002\u0002\u017d\u017f\u0005\u00f6|",
    "\u0002\u017e\u017d\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002",
    "\u0002\u017f\u0181\u0003\u0002\u0002\u0002\u0180\u0182\u0007h\u0002",
    "\u0002\u0181\u0180\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002",
    "\u0002\u0182\u0199\u0003\u0002\u0002\u0002\u0183\u0184\u0005 \u0011",
    "\u0002\u0184\u0186\u0005\u00f8}\u0002\u0185\u0187\u0005$\u0013\u0002",
    "\u0186\u0185\u0003\u0002\u0002\u0002\u0186\u0187\u0003\u0002\u0002\u0002",
    "\u0187\u018a\u0003\u0002\u0002\u0002\u0188\u0189\u0007I\u0002\u0002",
    "\u0189\u018b\u0005\u00b8]\u0002\u018a\u0188\u0003\u0002\u0002\u0002",
    "\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u018e\u0003\u0002\u0002\u0002",
    "\u018c\u018d\u0007S\u0002\u0002\u018d\u018f\u0005\"\u0012\u0002\u018e",
    "\u018c\u0003\u0002\u0002\u0002\u018e\u018f\u0003\u0002\u0002\u0002\u018f",
    "\u019a\u0003\u0002\u0002\u0002\u0190\u0191\u0007]\u0002\u0002\u0191",
    "\u0193\u0005\u00f8}\u0002\u0192\u0194\u0005$\u0013\u0002\u0193\u0192",
    "\u0003\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002\u0194\u0197",
    "\u0003\u0002\u0002\u0002\u0195\u0196\u0007I\u0002\u0002\u0196\u0198",
    "\u0005\"\u0012\u0002\u0197\u0195\u0003\u0002\u0002\u0002\u0197\u0198",
    "\u0003\u0002\u0002\u0002\u0198\u019a\u0003\u0002\u0002\u0002\u0199\u0183",
    "\u0003\u0002\u0002\u0002\u0199\u0190\u0003\u0002\u0002\u0002\u019a\u019b",
    "\u0003\u0002\u0002\u0002\u019b\u019f\u0007\u00cb\u0002\u0002\u019c\u019e",
    "\u0005\u008aF\u0002\u019d\u019c\u0003\u0002\u0002\u0002\u019e\u01a1",
    "\u0003\u0002\u0002\u0002\u019f\u019d\u0003\u0002\u0002\u0002\u019f\u01a0",
    "\u0003\u0002\u0002\u0002\u01a0\u01a2\u0003\u0002\u0002\u0002\u01a1\u019f",
    "\u0003\u0002\u0002\u0002\u01a2\u01a3\u0007\u00cc\u0002\u0002\u01a3\u001f",
    "\u0003\u0002\u0002\u0002\u01a4\u01a5\t\u0004\u0002\u0002\u01a5!\u0003",
    "\u0002\u0002\u0002\u01a6\u01ab\u0005\u00b8]\u0002\u01a7\u01a8\u0007",
    "\u00cd\u0002\u0002\u01a8\u01aa\u0005\u00b8]\u0002\u01a9\u01a7\u0003",
    "\u0002\u0002\u0002\u01aa\u01ad\u0003\u0002\u0002\u0002\u01ab\u01a9\u0003",
    "\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002\u01ac#\u0003",
    "\u0002\u0002\u0002\u01ad\u01ab\u0003\u0002\u0002\u0002\u01ae\u01af\u0007",
    "\u0097\u0002\u0002\u01af\u01b0\u0005&\u0014\u0002\u01b0\u01b1\u0007",
    "\u0098\u0002\u0002\u01b1\u01bd\u0003\u0002\u0002\u0002\u01b2\u01b3\u0007",
    "\u0097\u0002\u0002\u01b3\u01b4\u0005(\u0015\u0002\u01b4\u01b5\u0007",
    "\u0098\u0002\u0002\u01b5\u01bd\u0003\u0002\u0002\u0002\u01b6\u01b7\u0007",
    "\u0097\u0002\u0002\u01b7\u01b8\u0005&\u0014\u0002\u01b8\u01b9\u0007",
    "\u00cd\u0002\u0002\u01b9\u01ba\u0005(\u0015\u0002\u01ba\u01bb\u0007",
    "\u0098\u0002\u0002\u01bb\u01bd\u0003\u0002\u0002\u0002\u01bc\u01ae\u0003",
    "\u0002\u0002\u0002\u01bc\u01b2\u0003\u0002\u0002\u0002\u01bc\u01b6\u0003",
    "\u0002\u0002\u0002\u01bd%\u0003\u0002\u0002\u0002\u01be\u01c3\u0005",
    "*\u0016\u0002\u01bf\u01c0\u0007\u00cd\u0002\u0002\u01c0\u01c2\u0005",
    "*\u0016\u0002\u01c1\u01bf\u0003\u0002\u0002\u0002\u01c2\u01c5\u0003",
    "\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003",
    "\u0002\u0002\u0002\u01c4\'\u0003\u0002\u0002\u0002\u01c5\u01c3\u0003",
    "\u0002\u0002\u0002\u01c6\u01cb\u0005,\u0017\u0002\u01c7\u01c8\u0007",
    "\u00cd\u0002\u0002\u01c8\u01ca\u0005,\u0017\u0002\u01c9\u01c7\u0003",
    "\u0002\u0002\u0002\u01ca\u01cd\u0003\u0002\u0002\u0002\u01cb\u01c9\u0003",
    "\u0002\u0002\u0002\u01cb\u01cc\u0003\u0002\u0002\u0002\u01cc)\u0003",
    "\u0002\u0002\u0002\u01cd\u01cb\u0003\u0002\u0002\u0002\u01ce\u01cf\u0005",
    "0\u0019\u0002\u01cf\u01d0\u0005\u00f8}\u0002\u01d0+\u0003\u0002\u0002",
    "\u0002\u01d1\u01d2\u00050\u0019\u0002\u01d2\u01d3\u0005\u00f8}\u0002",
    "\u01d3\u01d6\u0007\u00d0\u0002\u0002\u01d4\u01d7\u0005\u00b8]\u0002",
    "\u01d5\u01d7\u0005\u0100\u0081\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002",
    "\u01d6\u01d5\u0003\u0002\u0002\u0002\u01d7-\u0003\u0002\u0002\u0002",
    "\u01d8\u01d9\u0007\u0097\u0002\u0002\u01d9\u01de\u0005\u00ba^\u0002",
    "\u01da\u01db\u0007\u00cd\u0002\u0002\u01db\u01dd\u0005\u00ba^\u0002",
    "\u01dc\u01da\u0003\u0002\u0002\u0002\u01dd\u01e0\u0003\u0002\u0002\u0002",
    "\u01de\u01dc\u0003\u0002\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002",
    "\u01df\u01e1\u0003\u0002\u0002\u0002\u01e0\u01de\u0003\u0002\u0002\u0002",
    "\u01e1\u01e2\u0007\u0098\u0002\u0002\u01e2/\u0003\u0002\u0002\u0002",
    "\u01e3\u01e5\u00052\u001a\u0002\u01e4\u01e3\u0003\u0002\u0002\u0002",
    "\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6\u01e4\u0003\u0002\u0002\u0002",
    "\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e71\u0003\u0002\u0002\u0002",
    "\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e9\u01ed\u0007\u00c9\u0002\u0002",
    "\u01ea\u01eb\u0005\u00f8}\u0002\u01eb\u01ec\u0007\u00ce\u0002\u0002",
    "\u01ec\u01ee\u0003\u0002\u0002\u0002\u01ed\u01ea\u0003\u0002\u0002\u0002",
    "\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee\u01ef\u0003\u0002\u0002\u0002",
    "\u01ef\u01f4\u00054\u001b\u0002\u01f0\u01f1\u0007\u00cd\u0002\u0002",
    "\u01f1\u01f3\u00054\u001b\u0002\u01f2\u01f0\u0003\u0002\u0002\u0002",
    "\u01f3\u01f6\u0003\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002",
    "\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5\u01f7\u0003\u0002\u0002\u0002",
    "\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f7\u01f8\u0007\u00ca\u0002\u0002",
    "\u01f83\u0003\u0002\u0002\u0002\u01f9\u020c\u0005\u00be`\u0002\u01fa",
    "\u01fb\u0005\u00be`\u0002\u01fb\u01fc\u0007\u00c7\u0002\u0002\u01fc",
    "\u01fd\u00056\u001c\u0002\u01fd\u01fe\u0007\u00c8\u0002\u0002\u01fe",
    "\u020c\u0003\u0002\u0002\u0002\u01ff\u0200\u0005\u00be`\u0002\u0200",
    "\u0201\u0007\u00c7\u0002\u0002\u0201\u0202\u00058\u001d\u0002\u0202",
    "\u0203\u0007\u00c8\u0002\u0002\u0203\u020c\u0003\u0002\u0002\u0002\u0204",
    "\u0205\u0005\u00be`\u0002\u0205\u0206\u0007\u00c7\u0002\u0002\u0206",
    "\u0207\u00056\u001c\u0002\u0207\u0208\u0007\u00cd\u0002\u0002\u0208",
    "\u0209\u00058\u001d\u0002\u0209\u020a\u0007\u00c8\u0002\u0002\u020a",
    "\u020c\u0003\u0002\u0002\u0002\u020b\u01f9\u0003\u0002\u0002\u0002\u020b",
    "\u01fa\u0003\u0002\u0002\u0002\u020b\u01ff\u0003\u0002\u0002\u0002\u020b",
    "\u0204\u0003\u0002\u0002\u0002\u020c5\u0003\u0002\u0002\u0002\u020d",
    "\u0212\u0005\u00a8U\u0002\u020e\u020f\u0007\u00cd\u0002\u0002\u020f",
    "\u0211\u0005\u00a8U\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0211",
    "\u0214\u0003\u0002\u0002\u0002\u0212\u0210\u0003\u0002\u0002\u0002\u0212",
    "\u0213\u0003\u0002\u0002\u0002\u02137\u0003\u0002\u0002\u0002\u0214",
    "\u0212\u0003\u0002\u0002\u0002\u0215\u021a\u0005:\u001e\u0002\u0216",
    "\u0217\u0007\u00cd\u0002\u0002\u0217\u0219\u0005:\u001e\u0002\u0218",
    "\u0216\u0003\u0002\u0002\u0002\u0219\u021c\u0003\u0002\u0002\u0002\u021a",
    "\u0218\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002\u021b",
    "9\u0003\u0002\u0002\u0002\u021c\u021a\u0003\u0002\u0002\u0002\u021d",
    "\u021e\u0007\u00d3\u0002\u0002\u021e\u021f\u0007\u0099\u0002\u0002\u021f",
    "\u0220\u0005\u00a8U\u0002\u0220;\u0003\u0002\u0002\u0002\u0221\u0223",
    "\u0005> \u0002\u0222\u0221\u0003\u0002\u0002\u0002\u0223\u0226\u0003",
    "\u0002\u0002\u0002\u0224\u0222\u0003\u0002\u0002\u0002\u0224\u0225\u0003",
    "\u0002\u0002\u0002\u0225=\u0003\u0002\u0002\u0002\u0226\u0224\u0003",
    "\u0002\u0002\u0002\u0227\u022b\u0005@!\u0002\u0228\u022b\u0005\u001c",
    "\u000f\u0002\u0229\u022b\u0005\u001e\u0010\u0002\u022a\u0227\u0003\u0002",
    "\u0002\u0002\u022a\u0228\u0003\u0002\u0002\u0002\u022a\u0229\u0003\u0002",
    "\u0002\u0002\u022b?\u0003\u0002\u0002\u0002\u022c\u022f\u0005D#\u0002",
    "\u022d\u022f\u0005B\"\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022e",
    "\u022d\u0003\u0002\u0002\u0002\u022fA\u0003\u0002\u0002\u0002\u0230",
    "\u0231\u0007\u00cf\u0002\u0002\u0231C\u0003\u0002\u0002\u0002\u0232",
    "\u0233\u0005\u00f8}\u0002\u0233\u0234\u0007\u00ce\u0002\u0002\u0234",
    "\u024d\u0003\u0002\u0002\u0002\u0235\u024d\u0005F$\u0002\u0236\u024d",
    "\u0005H%\u0002\u0237\u024d\u0005R*\u0002\u0238\u024d\u0005T+\u0002\u0239",
    "\u024d\u0005V,\u0002\u023a\u024d\u0005\\/\u0002\u023b\u024d\u0005`1",
    "\u0002\u023c\u024d\u0005b2\u0002\u023d\u024d\u0005d3\u0002\u023e\u023f",
    "\u0005\u00aeX\u0002\u023f\u0240\u0007\u00cf\u0002\u0002\u0240\u024d",
    "\u0003\u0002\u0002\u0002\u0241\u024d\u0005\u0082B\u0002\u0242\u024d",
    "\u0005\u0088E\u0002\u0243\u024d\u0005\u0086D\u0002\u0244\u024d\u0005",
    "f4\u0002\u0245\u024d\u0005h5\u0002\u0246\u024d\u0005j6\u0002\u0247\u024d",
    "\u0005l7\u0002\u0248\u024d\u0005r:\u0002\u0249\u024d\u0005t;\u0002\u024a",
    "\u024d\u0005v<\u0002\u024b\u024d\u0005x=\u0002\u024c\u0232\u0003\u0002",
    "\u0002\u0002\u024c\u0235\u0003\u0002\u0002\u0002\u024c\u0236\u0003\u0002",
    "\u0002\u0002\u024c\u0237\u0003\u0002\u0002\u0002\u024c\u0238\u0003\u0002",
    "\u0002\u0002\u024c\u0239\u0003\u0002\u0002\u0002\u024c\u023a\u0003\u0002",
    "\u0002\u0002\u024c\u023b\u0003\u0002\u0002\u0002\u024c\u023c\u0003\u0002",
    "\u0002\u0002\u024c\u023d\u0003\u0002\u0002\u0002\u024c\u023e\u0003\u0002",
    "\u0002\u0002\u024c\u0241\u0003\u0002\u0002\u0002\u024c\u0242\u0003\u0002",
    "\u0002\u0002\u024c\u0243\u0003\u0002\u0002\u0002\u024c\u0244\u0003\u0002",
    "\u0002\u0002\u024c\u0245\u0003\u0002\u0002\u0002\u024c\u0246\u0003\u0002",
    "\u0002\u0002\u024c\u0247\u0003\u0002\u0002\u0002\u024c\u0248\u0003\u0002",
    "\u0002\u0002\u024c\u0249\u0003\u0002\u0002\u0002\u024c\u024a\u0003\u0002",
    "\u0002\u0002\u024c\u024b\u0003\u0002\u0002\u0002\u024dE\u0003\u0002",
    "\u0002\u0002\u024e\u024f\u0007\u00cb\u0002\u0002\u024f\u0250\u0005<",
    "\u001f\u0002\u0250\u0251\u0007\u00cc\u0002\u0002\u0251G\u0003\u0002",
    "\u0002\u0002\u0252\u0253\u0007R\u0002\u0002\u0253\u0254\u0005\u00a6",
    "T\u0002\u0254\u0258\u0005@!\u0002\u0255\u0257\u0005J&\u0002\u0256\u0255",
    "\u0003\u0002\u0002\u0002\u0257\u025a\u0003\u0002\u0002\u0002\u0258\u0256",
    "\u0003\u0002\u0002\u0002\u0258\u0259\u0003\u0002\u0002\u0002\u0259\u025c",
    "\u0003\u0002\u0002\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025b\u025d",
    "\u0005N(\u0002\u025c\u025b\u0003\u0002\u0002\u0002\u025c\u025d\u0003",
    "\u0002\u0002\u0002\u025d\u026f\u0003\u0002\u0002\u0002\u025e\u025f\u0007",
    "R\u0002\u0002\u025f\u0260\u0005\u00a6T\u0002\u0260\u0261\u0007\u00ce",
    "\u0002\u0002\u0261\u0265\u0005<\u001f\u0002\u0262\u0264\u0005L\'\u0002",
    "\u0263\u0262\u0003\u0002\u0002\u0002\u0264\u0267\u0003\u0002\u0002\u0002",
    "\u0265\u0263\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002",
    "\u0266\u0269\u0003\u0002\u0002\u0002\u0267\u0265\u0003\u0002\u0002\u0002",
    "\u0268\u026a\u0005P)\u0002\u0269\u0268\u0003\u0002\u0002\u0002\u0269",
    "\u026a\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b",
    "\u026c\u0007D\u0002\u0002\u026c\u026d\u0007\u00cf\u0002\u0002\u026d",
    "\u026f\u0003\u0002\u0002\u0002\u026e\u0252\u0003\u0002\u0002\u0002\u026e",
    "\u025e\u0003\u0002\u0002\u0002\u026fI\u0003\u0002\u0002\u0002\u0270",
    "\u0271\u0007?\u0002\u0002\u0271\u0272\u0005\u00a6T\u0002\u0272\u0273",
    "\u0005@!\u0002\u0273K\u0003\u0002\u0002\u0002\u0274\u0275\u0007?\u0002",
    "\u0002\u0275\u0276\u0005\u00a6T\u0002\u0276\u0277\u0007\u00ce\u0002",
    "\u0002\u0277\u0278\u0005<\u001f\u0002\u0278M\u0003\u0002\u0002\u0002",
    "\u0279\u027a\u0007>\u0002\u0002\u027a\u027b\u0005@!\u0002\u027bO\u0003",
    "\u0002\u0002\u0002\u027c\u027d\u0007>\u0002\u0002\u027d\u027e\u0007",
    "\u00ce\u0002\u0002\u027e\u027f\u0005<\u001f\u0002\u027fQ\u0003\u0002",
    "\u0002\u0002\u0280\u0281\u0007}\u0002\u0002\u0281\u0288\u0005\u00a6",
    "T\u0002\u0282\u0289\u0005@!\u0002\u0283\u0284\u0007\u00ce\u0002\u0002",
    "\u0284\u0285\u0005<\u001f\u0002\u0285\u0286\u0007F\u0002\u0002\u0286",
    "\u0287\u0007\u00cf\u0002\u0002\u0287\u0289\u0003\u0002\u0002\u0002\u0288",
    "\u0282\u0003\u0002\u0002\u0002\u0288\u0283\u0003\u0002\u0002\u0002\u0289",
    "S\u0003\u0002\u0002\u0002\u028a\u028b\u0007:\u0002\u0002\u028b\u028c",
    "\u0005@!\u0002\u028c\u028d\u0007}\u0002\u0002\u028d\u028e\u0005\u00a6",
    "T\u0002\u028e\u028f\u0007\u00cf\u0002\u0002\u028fU\u0003\u0002\u0002",
    "\u0002\u0290\u0291\u0007M\u0002\u0002\u0291\u0293\u0007\u00c7\u0002",
    "\u0002\u0292\u0294\u0005X-\u0002\u0293\u0292\u0003\u0002\u0002\u0002",
    "\u0293\u0294\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002",
    "\u0295\u0297\u0007\u00cf\u0002\u0002\u0296\u0298\u0005\u00a4S\u0002",
    "\u0297\u0296\u0003\u0002\u0002\u0002\u0297\u0298\u0003\u0002\u0002\u0002",
    "\u0298\u0299\u0003\u0002\u0002\u0002\u0299\u029b\u0007\u00cf\u0002\u0002",
    "\u029a\u029c\u0005Z.\u0002\u029b\u029a\u0003\u0002\u0002\u0002\u029b",
    "\u029c\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d",
    "\u02a4\u0007\u00c8\u0002\u0002\u029e\u02a5\u0005@!\u0002\u029f\u02a0",
    "\u0007\u00ce\u0002\u0002\u02a0\u02a1\u0005<\u001f\u0002\u02a1\u02a2",
    "\u0007B\u0002\u0002\u02a2\u02a3\u0007\u00cf\u0002\u0002\u02a3\u02a5",
    "\u0003\u0002\u0002\u0002\u02a4\u029e\u0003\u0002\u0002\u0002\u02a4\u029f",
    "\u0003\u0002\u0002\u0002\u02a5W\u0003\u0002\u0002\u0002\u02a6\u02a7",
    "\u0005\u00a4S\u0002\u02a7Y\u0003\u0002\u0002\u0002\u02a8\u02a9\u0005",
    "\u00a4S\u0002\u02a9[\u0003\u0002\u0002\u0002\u02aa\u02ab\u0007s\u0002",
    "\u0002\u02ab\u02c3\u0005\u00a6T\u0002\u02ac\u02ae\u0007\u00cb\u0002",
    "\u0002\u02ad\u02af\u0007\u00cf\u0002\u0002\u02ae\u02ad\u0003\u0002\u0002",
    "\u0002\u02ae\u02af\u0003\u0002\u0002\u0002\u02af\u02b3\u0003\u0002\u0002",
    "\u0002\u02b0\u02b2\u0005^0\u0002\u02b1\u02b0\u0003\u0002\u0002\u0002",
    "\u02b2\u02b5\u0003\u0002\u0002\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002",
    "\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4\u02b6\u0003\u0002\u0002\u0002",
    "\u02b5\u02b3\u0003\u0002\u0002\u0002\u02b6\u02c4\u0007\u00cc\u0002\u0002",
    "\u02b7\u02b9\u0007\u00ce\u0002\u0002\u02b8\u02ba\u0007\u00cf\u0002\u0002",
    "\u02b9\u02b8\u0003\u0002\u0002\u0002\u02b9\u02ba\u0003\u0002\u0002\u0002",
    "\u02ba\u02be\u0003\u0002\u0002\u0002\u02bb\u02bd\u0005^0\u0002\u02bc",
    "\u02bb\u0003\u0002\u0002\u0002\u02bd\u02c0\u0003\u0002\u0002\u0002\u02be",
    "\u02bc\u0003\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf",
    "\u02c1\u0003\u0002\u0002\u0002\u02c0\u02be\u0003\u0002\u0002\u0002\u02c1",
    "\u02c2\u0007E\u0002\u0002\u02c2\u02c4\u0007\u00cf\u0002\u0002\u02c3",
    "\u02ac\u0003\u0002\u0002\u0002\u02c3\u02b7\u0003\u0002\u0002\u0002\u02c4",
    "]\u0003\u0002\u0002\u0002\u02c5\u02c6\u00072\u0002\u0002\u02c6\u02c9",
    "\u0005\u00a8U\u0002\u02c7\u02c9\u00079\u0002\u0002\u02c8\u02c5\u0003",
    "\u0002\u0002\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003",
    "\u0002\u0002\u0002\u02ca\u02cc\t\u0005\u0002\u0002\u02cb\u02c8\u0003",
    "\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd\u02cb\u0003",
    "\u0002\u0002\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003",
    "\u0002\u0002\u0002\u02cf\u02d0\u0005<\u001f\u0002\u02d0_\u0003\u0002",
    "\u0002\u0002\u02d1\u02d3\u00070\u0002\u0002\u02d2\u02d4\u0005\u00a8",
    "U\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002",
    "\u0002\u0002\u02d4\u02d5\u0003\u0002\u0002\u0002\u02d5\u02d6\u0007\u00cf",
    "\u0002\u0002\u02d6a\u0003\u0002\u0002\u0002\u02d7\u02d9\u00077\u0002",
    "\u0002\u02d8\u02da\u0005\u00a8U\u0002\u02d9\u02d8\u0003\u0002\u0002",
    "\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da\u02db\u0003\u0002\u0002",
    "\u0002\u02db\u02dc\u0007\u00cf\u0002\u0002\u02dcc\u0003\u0002\u0002",
    "\u0002\u02dd\u02df\u0007p\u0002\u0002\u02de\u02e0\u0005\u00a8U\u0002",
    "\u02df\u02de\u0003\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002",
    "\u02e0\u02e1\u0003\u0002\u0002\u0002\u02e1\u02e2\u0007\u00cf\u0002\u0002",
    "\u02e2e\u0003\u0002\u0002\u0002\u02e3\u02e4\u0005\u00a8U\u0002\u02e4",
    "\u02e5\u0007\u00cf\u0002\u0002\u02e5g\u0003\u0002\u0002\u0002\u02e6",
    "\u02e7\u0007z\u0002\u0002\u02e7\u02e8\u0007\u00c7\u0002\u0002\u02e8",
    "\u02e9\u0005\u00dco\u0002\u02e9\u02ea\u0007\u00c8\u0002\u0002\u02ea",
    "\u02eb\u0007\u00cf\u0002\u0002\u02ebi\u0003\u0002\u0002\u0002\u02ec",
    "\u0313\u0007N\u0002\u0002\u02ed\u02ee\u0007\u00c7\u0002\u0002\u02ee",
    "\u02ef\u0005\u00dep\u0002\u02ef\u02f1\u0007,\u0002\u0002\u02f0\u02f2",
    "\u0007\u00b9\u0002\u0002\u02f1\u02f0\u0003\u0002\u0002\u0002\u02f1\u02f2",
    "\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f9",
    "\u0005\u00dep\u0002\u02f4\u02f6\u0007\u0099\u0002\u0002\u02f5\u02f7",
    "\u0007\u00b9\u0002\u0002\u02f6\u02f5\u0003\u0002\u0002\u0002\u02f6\u02f7",
    "\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003\u0002\u0002\u0002\u02f8\u02fa",
    "\u0005\u00dep\u0002\u02f9\u02f4\u0003\u0002\u0002\u0002\u02f9\u02fa",
    "\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb\u02fc",
    "\u0007\u00c8\u0002\u0002\u02fc\u0314\u0003\u0002\u0002\u0002\u02fd\u02fe",
    "\u0007\u00c7\u0002\u0002\u02fe\u02ff\u0005\u00a8U\u0002\u02ff\u0300",
    "\u0007,\u0002\u0002\u0300\u0306\u0005\u00dep\u0002\u0301\u0303\u0007",
    "\u0099\u0002\u0002\u0302\u0304\u0007\u00b9\u0002\u0002\u0303\u0302\u0003",
    "\u0002\u0002\u0002\u0303\u0304\u0003\u0002\u0002\u0002\u0304\u0305\u0003",
    "\u0002\u0002\u0002\u0305\u0307\u0005\u00dep\u0002\u0306\u0301\u0003",
    "\u0002\u0002\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307\u0308\u0003",
    "\u0002\u0002\u0002\u0308\u0309\u0007\u00c8\u0002\u0002\u0309\u0314\u0003",
    "\u0002\u0002\u0002\u030a\u030b\u0007\u00c7\u0002\u0002\u030b\u030c\u0005",
    "\u00dep\u0002\u030c\u030d\u0007,\u0002\u0002\u030d\u030e\u0007_\u0002",
    "\u0002\u030e\u030f\u0007\u00c7\u0002\u0002\u030f\u0310\u0005\u00f2z",
    "\u0002\u0310\u0311\u0007\u00c8\u0002\u0002\u0311\u0312\u0007\u00c8\u0002",
    "\u0002\u0312\u0314\u0003\u0002\u0002\u0002\u0313\u02ed\u0003\u0002\u0002",
    "\u0002\u0313\u02fd\u0003\u0002\u0002\u0002\u0313\u030a\u0003\u0002\u0002",
    "\u0002\u0314\u031b\u0003\u0002\u0002\u0002\u0315\u031c\u0005@!\u0002",
    "\u0316\u0317\u0007\u00ce\u0002\u0002\u0317\u0318\u0005<\u001f\u0002",
    "\u0318\u0319\u0007C\u0002\u0002\u0319\u031a\u0007\u00cf\u0002\u0002",
    "\u031a\u031c\u0003\u0002\u0002\u0002\u031b\u0315\u0003\u0002\u0002\u0002",
    "\u031b\u0316\u0003\u0002\u0002\u0002\u031ck\u0003\u0002\u0002\u0002",
    "\u031d\u031e\u0007v\u0002\u0002\u031e\u032e\u0005F$\u0002\u031f\u0321",
    "\u0005n8\u0002\u0320\u031f\u0003\u0002\u0002\u0002\u0321\u0322\u0003",
    "\u0002\u0002\u0002\u0322\u0320\u0003\u0002\u0002\u0002\u0322\u0323\u0003",
    "\u0002\u0002\u0002\u0323\u0325\u0003\u0002\u0002\u0002\u0324\u0326\u0005",
    "p9\u0002\u0325\u0324\u0003\u0002\u0002\u0002\u0325\u0326\u0003\u0002",
    "\u0002\u0002\u0326\u032f\u0003\u0002\u0002\u0002\u0327\u0329\u0005n",
    "8\u0002\u0328\u0327\u0003\u0002\u0002\u0002\u0329\u032c\u0003\u0002",
    "\u0002\u0002\u032a\u0328\u0003\u0002\u0002\u0002\u032a\u032b\u0003\u0002",
    "\u0002\u0002\u032b\u032d\u0003\u0002\u0002\u0002\u032c\u032a\u0003\u0002",
    "\u0002\u0002\u032d\u032f\u0005p9\u0002\u032e\u0320\u0003\u0002\u0002",
    "\u0002\u032e\u032a\u0003\u0002\u0002\u0002\u032fm\u0003\u0002\u0002",
    "\u0002\u0330\u0331\u00073\u0002\u0002\u0331\u0332\u0007\u00c7\u0002",
    "\u0002\u0332\u0333\u0005\u00b8]\u0002\u0333\u0334\u0007\u00d3\u0002",
    "\u0002\u0334\u0335\u0007\u00c8\u0002\u0002\u0335\u0336\u0005F$\u0002",
    "\u0336o\u0003\u0002\u0002\u0002\u0337\u0338\u0007K\u0002\u0002\u0338",
    "\u0339\u0005F$\u0002\u0339q\u0003\u0002\u0002\u0002\u033a\u033b\u0007",
    "t\u0002\u0002\u033b\u033c\u0005\u00a8U\u0002\u033c\u033d\u0007\u00cf",
    "\u0002\u0002\u033ds\u0003\u0002\u0002\u0002\u033e\u033f\u0007Q\u0002",
    "\u0002\u033f\u0340\u0005\u00f8}\u0002\u0340\u0341\u0007\u00cf\u0002",
    "\u0002\u0341u\u0003\u0002\u0002\u0002\u0342\u0343\u00078\u0002\u0002",
    "\u0343\u0344\u0007\u00c7\u0002\u0002\u0344\u0345\u0005z>\u0002\u0345",
    "\u034c\u0007\u00c8\u0002\u0002\u0346\u034d\u0005@!\u0002\u0347\u0348",
    "\u0007\u00ce\u0002\u0002\u0348\u0349\u0005<\u001f\u0002\u0349\u034a",
    "\u0007A\u0002\u0002\u034a\u034b\u0007\u00cf\u0002\u0002\u034b\u034d",
    "\u0003\u0002\u0002\u0002\u034c\u0346\u0003\u0002\u0002\u0002\u034c\u0347",
    "\u0003\u0002\u0002\u0002\u034dw\u0003\u0002\u0002\u0002\u034e\u0351",
    "\u0005\u0006\u0004\u0002\u034f\u0351\u0005\n\u0006\u0002\u0350\u034e",
    "\u0003\u0002\u0002\u0002\u0350\u034f\u0003\u0002\u0002\u0002\u0351\u0352",
    "\u0003\u0002\u0002\u0002\u0352\u0350\u0003\u0002\u0002\u0002\u0352\u0353",
    "\u0003\u0002\u0002\u0002\u0353y\u0003\u0002\u0002\u0002\u0354\u0359",
    "\u0005\u00a0Q\u0002\u0355\u0356\u0007\u00cd\u0002\u0002\u0356\u0358",
    "\u0005\u00a0Q\u0002\u0357\u0355\u0003\u0002\u0002\u0002\u0358\u035b",
    "\u0003\u0002\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002\u0359\u035a",
    "\u0003\u0002\u0002\u0002\u035a{\u0003\u0002\u0002\u0002\u035b\u0359",
    "\u0003\u0002\u0002\u0002\u035c\u035e\u0005~@\u0002\u035d\u035c\u0003",
    "\u0002\u0002\u0002\u035d\u035e\u0003\u0002\u0002\u0002\u035e\u0363\u0003",
    "\u0002\u0002\u0002\u035f\u0360\u0007\u00cd\u0002\u0002\u0360\u0362\u0005",
    "~@\u0002\u0361\u035f\u0003\u0002\u0002\u0002\u0362\u0365\u0003\u0002",
    "\u0002\u0002\u0363\u0361\u0003\u0002\u0002\u0002\u0363\u0364\u0003\u0002",
    "\u0002\u0002\u0364}\u0003\u0002\u0002\u0002\u0365\u0363\u0003\u0002",
    "\u0002\u0002\u0366\u0368\u00050\u0019\u0002\u0367\u0369\u0005\u0080",
    "A\u0002\u0368\u0367\u0003\u0002\u0002\u0002\u0368\u0369\u0003\u0002",
    "\u0002\u0002\u0369\u036b\u0003\u0002\u0002\u0002\u036a\u036c\u0007\u00b9",
    "\u0002\u0002\u036b\u036a\u0003\u0002\u0002\u0002\u036b\u036c\u0003\u0002",
    "\u0002\u0002\u036c\u036e\u0003\u0002\u0002\u0002\u036d\u036f\u0007\u00b6",
    "\u0002\u0002\u036e\u036d\u0003\u0002\u0002\u0002\u036e\u036f\u0003\u0002",
    "\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0371\u0005\u009e",
    "P\u0002\u0371\u007f\u0003\u0002\u0002\u0002\u0372\u0376\u0005\u00b8",
    "]\u0002\u0373\u0376\u00071\u0002\u0002\u0374\u0376\u0005\u0100\u0081",
    "\u0002\u0375\u0372\u0003\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002",
    "\u0002\u0375\u0374\u0003\u0002\u0002\u0002\u0376\u0081\u0003\u0002\u0002",
    "\u0002\u0377\u0378\u0007P\u0002\u0002\u0378\u037d\u0005\u0084C\u0002",
    "\u0379\u037a\u0007\u00cd\u0002\u0002\u037a\u037c\u0005\u0084C\u0002",
    "\u037b\u0379\u0003\u0002\u0002\u0002\u037c\u037f\u0003\u0002\u0002\u0002",
    "\u037d\u037b\u0003\u0002\u0002\u0002\u037d\u037e\u0003\u0002\u0002\u0002",
    "\u037e\u0380\u0003\u0002\u0002\u0002\u037f\u037d\u0003\u0002\u0002\u0002",
    "\u0380\u0381\u0007\u00cf\u0002\u0002\u0381\u0083\u0003\u0002\u0002\u0002",
    "\u0382\u038b\u0007\u00d3\u0002\u0002\u0383\u0384\u0007\u00c4\u0002\u0002",
    "\u0384\u038b\u0005\u00dep\u0002\u0385\u0386\u0007\u00c4\u0002\u0002",
    "\u0386\u0387\u0007\u00cb\u0002\u0002\u0387\u0388\u0005\u00a8U\u0002",
    "\u0388\u0389\u0007\u00cc\u0002\u0002\u0389\u038b\u0003\u0002\u0002\u0002",
    "\u038a\u0382\u0003\u0002\u0002\u0002\u038a\u0383\u0003\u0002\u0002\u0002",
    "\u038a\u0385\u0003\u0002\u0002\u0002\u038b\u0085\u0003\u0002\u0002\u0002",
    "\u038c\u038d\u0007=\u0002\u0002\u038d\u038e\u0005\u00a4S\u0002\u038e",
    "\u038f\u0007\u00cf\u0002\u0002\u038f\u0087\u0003\u0002\u0002\u0002\u0390",
    "\u0391\u0007q\u0002\u0002\u0391\u0396\u0005\u009eP\u0002\u0392\u0393",
    "\u0007\u00cd\u0002\u0002\u0393\u0395\u0005\u009eP\u0002\u0394\u0392",
    "\u0003\u0002\u0002\u0002\u0395\u0398\u0003\u0002\u0002\u0002\u0396\u0394",
    "\u0003\u0002\u0002\u0002\u0396\u0397\u0003\u0002\u0002\u0002\u0397\u0399",
    "\u0003\u0002\u0002\u0002\u0398\u0396\u0003\u0002\u0002\u0002\u0399\u039a",
    "\u0007\u00cf\u0002\u0002\u039a\u0089\u0003\u0002\u0002\u0002\u039b\u039c",
    "\u00050\u0019\u0002\u039c\u039d\u0005\u009aN\u0002\u039d\u03a2\u0005",
    "\u009eP\u0002\u039e\u039f\u0007\u00cd\u0002\u0002\u039f\u03a1\u0005",
    "\u009eP\u0002\u03a0\u039e\u0003\u0002\u0002\u0002\u03a1\u03a4\u0003",
    "\u0002\u0002\u0002\u03a2\u03a0\u0003\u0002\u0002\u0002\u03a2\u03a3\u0003",
    "\u0002\u0002\u0002\u03a3\u03a5\u0003\u0002\u0002\u0002\u03a4\u03a2\u0003",
    "\u0002\u0002\u0002\u03a5\u03a6\u0007\u00cf\u0002\u0002\u03a6\u03cc\u0003",
    "\u0002\u0002\u0002\u03a7\u03a8\u00050\u0019\u0002\u03a8\u03a9\u0007",
    "6\u0002\u0002\u03a9\u03ae\u0005\u00a0Q\u0002\u03aa\u03ab\u0007\u00cd",
    "\u0002\u0002\u03ab\u03ad\u0005\u00a0Q\u0002\u03ac\u03aa\u0003\u0002",
    "\u0002\u0002\u03ad\u03b0\u0003\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002",
    "\u0002\u0002\u03ae\u03af\u0003\u0002\u0002\u0002\u03af\u03b1\u0003\u0002",
    "\u0002\u0002\u03b0\u03ae\u0003\u0002\u0002\u0002\u03b1\u03b2\u0007\u00cf",
    "\u0002\u0002\u03b2\u03cc\u0003\u0002\u0002\u0002\u03b3\u03b5\u00050",
    "\u0019\u0002\u03b4\u03b6\u0005\u009cO\u0002\u03b5\u03b4\u0003\u0002",
    "\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b6\u03b7\u0003\u0002",
    "\u0002\u0002\u03b7\u03b9\u0007O\u0002\u0002\u03b8\u03ba\u0007\u00b9",
    "\u0002\u0002\u03b9\u03b8\u0003\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002",
    "\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002\u03bb\u03bd\u0005\u00f8",
    "}\u0002\u03bc\u03be\u0005$\u0013\u0002\u03bd\u03bc\u0003\u0002\u0002",
    "\u0002\u03bd\u03be\u0003\u0002\u0002\u0002\u03be\u03bf\u0003\u0002\u0002",
    "\u0002\u03bf\u03c0\u0007\u00c7\u0002\u0002\u03c0\u03c1\u0005|?\u0002",
    "\u03c1\u03c3\u0007\u00c8\u0002\u0002\u03c2\u03c4\u0005\u0096L\u0002",
    "\u03c3\u03c2\u0003\u0002\u0002\u0002\u03c3\u03c4\u0003\u0002\u0002\u0002",
    "\u03c4\u03c5\u0003\u0002\u0002\u0002\u03c5\u03c6\u0005\u0098M\u0002",
    "\u03c6\u03cc\u0003\u0002\u0002\u0002\u03c7\u03c8\u0007{\u0002\u0002",
    "\u03c8\u03c9\u0005\u00c2b\u0002\u03c9\u03ca\u0005\u008cG\u0002\u03ca",
    "\u03cc\u0003\u0002\u0002\u0002\u03cb\u039b\u0003\u0002\u0002\u0002\u03cb",
    "\u03a7\u0003\u0002\u0002\u0002\u03cb\u03b3\u0003\u0002\u0002\u0002\u03cb",
    "\u03c7\u0003\u0002\u0002\u0002\u03cc\u008b\u0003\u0002\u0002\u0002\u03cd",
    "\u03d7\u0007\u00cf\u0002\u0002\u03ce\u03d2\u0007\u00cb\u0002\u0002\u03cf",
    "\u03d1\u0005\u008eH\u0002\u03d0\u03cf\u0003\u0002\u0002\u0002\u03d1",
    "\u03d4\u0003\u0002\u0002\u0002\u03d2\u03d0\u0003\u0002\u0002\u0002\u03d2",
    "\u03d3\u0003\u0002\u0002\u0002\u03d3\u03d5\u0003\u0002\u0002\u0002\u03d4",
    "\u03d2\u0003\u0002\u0002\u0002\u03d5\u03d7\u0007\u00cc\u0002\u0002\u03d6",
    "\u03cd\u0003\u0002\u0002\u0002\u03d6\u03ce\u0003\u0002\u0002\u0002\u03d7",
    "\u008d\u0003\u0002\u0002\u0002\u03d8\u03db\u0005\u0090I\u0002\u03d9",
    "\u03db\u0005\u0092J\u0002\u03da\u03d8\u0003\u0002\u0002\u0002\u03da",
    "\u03d9\u0003\u0002\u0002\u0002\u03db\u008f\u0003\u0002\u0002\u0002\u03dc",
    "\u03dd\u0005\u00be`\u0002\u03dd\u03de\u0007\u00b3\u0002\u0002\u03de",
    "\u03df\u0005\u00f8}\u0002\u03df\u03e0\u0007X\u0002\u0002\u03e0\u03e1",
    "\u0005\u00c2b\u0002\u03e1\u03e2\u0007\u00cf\u0002\u0002\u03e2\u0091",
    "\u0003\u0002\u0002\u0002\u03e3\u03e4\u0005\u0094K\u0002\u03e4\u03ea",
    "\u0007,\u0002\u0002\u03e5\u03eb\u0005\u00fa~\u0002\u03e6\u03e8\u0005",
    "\u00fa~\u0002\u03e7\u03e6\u0003\u0002\u0002\u0002\u03e7\u03e8\u0003",
    "\u0002\u0002\u0002\u03e8\u03e9\u0003\u0002\u0002\u0002\u03e9\u03eb\u0005",
    "\u00f8}\u0002\u03ea\u03e5\u0003\u0002\u0002\u0002\u03ea\u03e7\u0003",
    "\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec\u03ed\u0007",
    "\u00cf\u0002\u0002\u03ed\u0093\u0003\u0002\u0002\u0002\u03ee\u03ef\u0005",
    "\u00be`\u0002\u03ef\u03f0\u0007\u00b3\u0002\u0002\u03f0\u03f2\u0003",
    "\u0002\u0002\u0002\u03f1\u03ee\u0003\u0002\u0002\u0002\u03f1\u03f2\u0003",
    "\u0002\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3\u03f4\u0005",
    "\u00f8}\u0002\u03f4\u0095\u0003\u0002\u0002\u0002\u03f5\u03f6\u0007",
    "\u00ce\u0002\u0002\u03f6\u03f7\u0005\u00f8}\u0002\u03f7\u03f8\u0005",
    "\u00c4c\u0002\u03f8\u0097\u0003\u0002\u0002\u0002\u03f9\u03fc\u0007",
    "\u00cf\u0002\u0002\u03fa\u03fc\u0005F$\u0002\u03fb\u03f9\u0003\u0002",
    "\u0002\u0002\u03fb\u03fa\u0003\u0002\u0002\u0002\u03fc\u0099\u0003\u0002",
    "\u0002\u0002\u03fd\u0400\u0005\u009cO\u0002\u03fe\u0400\u0007|\u0002",
    "\u0002\u03ff\u03fd\u0003\u0002\u0002\u0002\u03ff\u03fe\u0003\u0002\u0002",
    "\u0002\u0400\u009b\u0003\u0002\u0002\u0002\u0401\u0403\u0005\u00fa~",
    "\u0002\u0402\u0401\u0003\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002",
    "\u0002\u0404\u0402\u0003\u0002\u0002\u0002\u0404\u0405\u0003\u0002\u0002",
    "\u0002\u0405\u009d\u0003\u0002\u0002\u0002\u0406\u0409\u0007\u00d3\u0002",
    "\u0002\u0407\u0408\u0007\u00d0\u0002\u0002\u0408\u040a\u0005\u00c8e",
    "\u0002\u0409\u0407\u0003\u0002\u0002\u0002\u0409\u040a\u0003\u0002\u0002",
    "\u0002\u040a\u009f\u0003\u0002\u0002\u0002\u040b\u040c\u0005\u00f8}",
    "\u0002\u040c\u040d\u0007\u00d0\u0002\u0002\u040d\u040e\u0005\u00c8e",
    "\u0002\u040e\u00a1\u0003\u0002\u0002\u0002\u040f\u0410\u00050\u0019",
    "\u0002\u0410\u0411\u00076\u0002\u0002\u0411\u0416\u0005\u00a0Q\u0002",
    "\u0412\u0413\u0007\u00cd\u0002\u0002\u0413\u0415\u0005\u00a0Q\u0002",
    "\u0414\u0412\u0003\u0002\u0002\u0002\u0415\u0418\u0003\u0002\u0002\u0002",
    "\u0416\u0414\u0003\u0002\u0002\u0002\u0416\u0417\u0003\u0002\u0002\u0002",
    "\u0417\u0419\u0003\u0002\u0002\u0002\u0418\u0416\u0003\u0002\u0002\u0002",
    "\u0419\u041a\u0007\u00cf\u0002\u0002\u041a\u00a3\u0003\u0002\u0002\u0002",
    "\u041b\u0420\u0005\u00a8U\u0002\u041c\u041d\u0007\u00cd\u0002\u0002",
    "\u041d\u041f\u0005\u00a8U\u0002\u041e\u041c\u0003\u0002\u0002\u0002",
    "\u041f\u0422\u0003\u0002\u0002\u0002\u0420\u041e\u0003\u0002\u0002\u0002",
    "\u0420\u0421\u0003\u0002\u0002\u0002\u0421\u00a5\u0003\u0002\u0002\u0002",
    "\u0422\u0420\u0003\u0002\u0002\u0002\u0423\u0426\u0007\u00c7\u0002\u0002",
    "\u0424\u0427\u0005\u00a8U\u0002\u0425\u0427\u0005\u00aeX\u0002\u0426",
    "\u0424\u0003\u0002\u0002\u0002\u0426\u0425\u0003\u0002\u0002\u0002\u0427",
    "\u0428\u0003\u0002\u0002\u0002\u0428\u0429\u0007\u00c8\u0002\u0002\u0429",
    "\u00a7\u0003\u0002\u0002\u0002\u042a\u042b\bU\u0001\u0002\u042b\u042c",
    "\u00075\u0002\u0002\u042c\u0498\u0005\u00a8U-\u042d\u0498\u0005\u00aa",
    "V\u0002\u042e\u042f\u0005\u00d6l\u0002\u042f\u0430\u0007\u00c9\u0002",
    "\u0002\u0430\u0431\u0005\u00a8U\u0002\u0431\u0432\u0007\u00ca\u0002",
    "\u0002\u0432\u0498\u0003\u0002\u0002\u0002\u0433\u0434\u0007\u00c7\u0002",
    "\u0002\u0434\u0435\u0005\u0102\u0082\u0002\u0435\u0436\u0007\u00c8\u0002",
    "\u0002\u0436\u0437\u0005\u00a8U*\u0437\u0498\u0003\u0002\u0002\u0002",
    "\u0438\u0439\t\u0006\u0002\u0002\u0439\u0498\u0005\u00a8U)\u043a\u043b",
    "\t\u0007\u0002\u0002\u043b\u0498\u0005\u00a8U(\u043c\u043d\t\b\u0002",
    "\u0002\u043d\u0498\u0005\u00dep\u0002\u043e\u043f\u0005\u00dep\u0002",
    "\u043f\u0440\t\b\u0002\u0002\u0440\u0498\u0003\u0002\u0002\u0002\u0441",
    "\u0442\u0005\u00dep\u0002\u0442\u0443\u0005\u00acW\u0002\u0443\u0444",
    "\u0005\u00a8U%\u0444\u0498\u0003\u0002\u0002\u0002\u0445\u0446\u0005",
    "\u00dep\u0002\u0446\u0447\u0007\u00d0\u0002\u0002\u0447\u044a\u0007",
    "\u00b9\u0002\u0002\u0448\u044b\u0005\u00dep\u0002\u0449\u044b\u0005",
    "\u00aaV\u0002\u044a\u0448\u0003\u0002\u0002\u0002\u044a\u0449\u0003",
    "\u0002\u0002\u0002\u044b\u0498\u0003\u0002\u0002\u0002\u044c\u044d\u0007",
    "i\u0002\u0002\u044d\u0498\u0005\u00a8U#\u044e\u0498\u0005\u00dep\u0002",
    "\u044f\u0498\u0005\u00ceh\u0002\u0450\u0498\u0005\u00d8m\u0002\u0451",
    "\u0498\u0007\u00d4\u0002\u0002\u0452\u0498\u0007\u00da\u0002\u0002\u0453",
    "\u0498\u0005\u00a6T\u0002\u0454\u0455\u0007+\u0002\u0002\u0455\u0457",
    "\u0007\u00c7\u0002\u0002\u0456\u0458\u0005\u00b0Y\u0002\u0457\u0456",
    "\u0003\u0002\u0002\u0002\u0457\u0458\u0003\u0002\u0002\u0002\u0458\u0459",
    "\u0003\u0002\u0002\u0002\u0459\u0460\u0007\u00c8\u0002\u0002\u045a\u045c",
    "\u0007\u00c9\u0002\u0002\u045b\u045d\u0005\u00b0Y\u0002\u045c\u045b",
    "\u0003\u0002\u0002\u0002\u045c\u045d\u0003\u0002\u0002\u0002\u045d\u045e",
    "\u0003\u0002\u0002\u0002\u045e\u0460\u0007\u00ca\u0002\u0002\u045f\u0454",
    "\u0003\u0002\u0002\u0002\u045f\u045a\u0003\u0002\u0002\u0002\u0460\u0465",
    "\u0003\u0002\u0002\u0002\u0461\u0462\u0007\u00c9\u0002\u0002\u0462\u0463",
    "\u0005\u00a8U\u0002\u0463\u0464\u0007\u00ca\u0002\u0002\u0464\u0466",
    "\u0003\u0002\u0002\u0002\u0465\u0461\u0003\u0002\u0002\u0002\u0465\u0466",
    "\u0003\u0002\u0002\u0002\u0466\u0498\u0003\u0002\u0002\u0002\u0467\u0498",
    "\u0007~\u0002\u0002\u0468\u0469\u0007_\u0002\u0002\u0469\u046a\u0007",
    "\u00c7\u0002\u0002\u046a\u046b\u0005\u00f2z\u0002\u046b\u046c\u0007",
    "\u00c8\u0002\u0002\u046c\u046d\u0007\u00d0\u0002\u0002\u046d\u046e\u0005",
    "\u00a8U\u001a\u046e\u0498\u0003\u0002\u0002\u0002\u046f\u0470\u0007",
    "^\u0002\u0002\u0470\u0471\u0007\u00c7\u0002\u0002\u0471\u0472\u0005",
    "\u00dco\u0002\u0472\u0473\u0007\u00c8\u0002\u0002\u0473\u0498\u0003",
    "\u0002\u0002\u0002\u0474\u0475\u0007@\u0002\u0002\u0475\u0476\u0007",
    "\u00c7\u0002\u0002\u0476\u0477\u0005\u00dep\u0002\u0477\u0478\u0007",
    "\u00c8\u0002\u0002\u0478\u0498\u0003\u0002\u0002\u0002\u0479\u047a\u0007",
    "G\u0002\u0002\u047a\u047b\u0007\u00c7\u0002\u0002\u047b\u047c\u0005",
    "\u00a8U\u0002\u047c\u047d\u0007\u00c8\u0002\u0002\u047d\u0498\u0003",
    "\u0002\u0002\u0002\u047e\u0482\u0007H\u0002\u0002\u047f\u0480\u0007",
    "\u00c7\u0002\u0002\u0480\u0483\u0007\u00c8\u0002\u0002\u0481\u0483\u0005",
    "\u00a6T\u0002\u0482\u047f\u0003\u0002\u0002\u0002\u0482\u0481\u0003",
    "\u0002\u0002\u0002\u0482\u0483\u0003\u0002\u0002\u0002\u0483\u0498\u0003",
    "\u0002\u0002\u0002\u0484\u0485\t\t\u0002\u0002\u0485\u0498\u0005\u00a8",
    "U\u0015\u0486\u0487\t\n\u0002\u0002\u0487\u0498\u0005\u00a8U\u0014\u0488",
    "\u048a\u0007q\u0002\u0002\u0489\u0488\u0003\u0002\u0002\u0002\u0489",
    "\u048a\u0003\u0002\u0002\u0002\u048a\u048b\u0003\u0002\u0002\u0002\u048b",
    "\u048d\u0007O\u0002\u0002\u048c\u048e\u0007\u00b9\u0002\u0002\u048d",
    "\u048c\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002\u0002\u048e",
    "\u048f\u0003\u0002\u0002\u0002\u048f\u0490\u0007\u00c7\u0002\u0002\u0490",
    "\u0491\u0005|?\u0002\u0491\u0493\u0007\u00c8\u0002\u0002\u0492\u0494",
    "\u0005\u00b4[\u0002\u0493\u0492\u0003\u0002\u0002\u0002\u0493\u0494",
    "\u0003\u0002\u0002\u0002\u0494\u0495\u0003\u0002\u0002\u0002\u0495\u0496",
    "\u0005F$\u0002\u0496\u0498\u0003\u0002\u0002\u0002\u0497\u042a\u0003",
    "\u0002\u0002\u0002\u0497\u042d\u0003\u0002\u0002\u0002\u0497\u042e\u0003",
    "\u0002\u0002\u0002\u0497\u0433\u0003\u0002\u0002\u0002\u0497\u0438\u0003",
    "\u0002\u0002\u0002\u0497\u043a\u0003\u0002\u0002\u0002\u0497\u043c\u0003",
    "\u0002\u0002\u0002\u0497\u043e\u0003\u0002\u0002\u0002\u0497\u0441\u0003",
    "\u0002\u0002\u0002\u0497\u0445\u0003\u0002\u0002\u0002\u0497\u044c\u0003",
    "\u0002\u0002\u0002\u0497\u044e\u0003\u0002\u0002\u0002\u0497\u044f\u0003",
    "\u0002\u0002\u0002\u0497\u0450\u0003\u0002\u0002\u0002\u0497\u0451\u0003",
    "\u0002\u0002\u0002\u0497\u0452\u0003\u0002\u0002\u0002\u0497\u0453\u0003",
    "\u0002\u0002\u0002\u0497\u045f\u0003\u0002\u0002\u0002\u0497\u0467\u0003",
    "\u0002\u0002\u0002\u0497\u0468\u0003\u0002\u0002\u0002\u0497\u046f\u0003",
    "\u0002\u0002\u0002\u0497\u0474\u0003\u0002\u0002\u0002\u0497\u0479\u0003",
    "\u0002\u0002\u0002\u0497\u047e\u0003\u0002\u0002\u0002\u0497\u0484\u0003",
    "\u0002\u0002\u0002\u0497\u0486\u0003\u0002\u0002\u0002\u0497\u0489\u0003",
    "\u0002\u0002\u0002\u0498\u04cf\u0003\u0002\u0002\u0002\u0499\u049a\f",
    "\u0012\u0002\u0002\u049a\u049b\u0007\u00a5\u0002\u0002\u049b\u04ce\u0005",
    "\u00a8U\u0012\u049c\u049d\f\u0010\u0002\u0002\u049d\u049e\t\u000b\u0002",
    "\u0002\u049e\u04ce\u0005\u00a8U\u0011\u049f\u04a0\f\u000f\u0002\u0002",
    "\u04a0\u04a1\t\f\u0002\u0002\u04a1\u04ce\u0005\u00a8U\u0010\u04a2\u04a3",
    "\f\u000e\u0002\u0002\u04a3\u04a4\t\r\u0002\u0002\u04a4\u04ce\u0005\u00a8",
    "U\u000f\u04a5\u04a6\f\r\u0002\u0002\u04a6\u04a7\t\u000e\u0002\u0002",
    "\u04a7\u04ce\u0005\u00a8U\u000e\u04a8\u04a9\f\f\u0002\u0002\u04a9\u04aa",
    "\t\u000f\u0002\u0002\u04aa\u04ce\u0005\u00a8U\r\u04ab\u04ac\f\u000b",
    "\u0002\u0002\u04ac\u04ad\u0007\u00b9\u0002\u0002\u04ad\u04ce\u0005\u00a8",
    "U\f\u04ae\u04af\f\n\u0002\u0002\u04af\u04b0\u0007\u00bc\u0002\u0002",
    "\u04b0\u04ce\u0005\u00a8U\u000b\u04b1\u04b2\f\t\u0002\u0002\u04b2\u04b3",
    "\u0007\u00ba\u0002\u0002\u04b3\u04ce\u0005\u00a8U\n\u04b4\u04b5\f\b",
    "\u0002\u0002\u04b5\u04b6\u0007\u00b0\u0002\u0002\u04b6\u04ce\u0005\u00a8",
    "U\t\u04b7\u04b8\f\u0007\u0002\u0002\u04b8\u04b9\u0007\u00af\u0002\u0002",
    "\u04b9\u04ce\u0005\u00a8U\b\u04ba\u04bb\f\u0006\u0002\u0002\u04bb\u04bd",
    "\u0007\u00c6\u0002\u0002\u04bc\u04be\u0005\u00a8U\u0002\u04bd\u04bc",
    "\u0003\u0002\u0002\u0002\u04bd\u04be\u0003\u0002\u0002\u0002\u04be\u04bf",
    "\u0003\u0002\u0002\u0002\u04bf\u04c0\u0007\u00ce\u0002\u0002\u04c0\u04ce",
    "\u0005\u00a8U\u0007\u04c1\u04c2\f\u0005\u0002\u0002\u04c2\u04c3\u0007",
    "`\u0002\u0002\u04c3\u04ce\u0005\u00a8U\u0006\u04c4\u04c5\f\u0004\u0002",
    "\u0002\u04c5\u04c6\u0007b\u0002\u0002\u04c6\u04ce\u0005\u00a8U\u0005",
    "\u04c7\u04c8\f\u0003\u0002\u0002\u04c8\u04c9\u0007a\u0002\u0002\u04c9",
    "\u04ce\u0005\u00a8U\u0004\u04ca\u04cb\f\u0011\u0002\u0002\u04cb\u04cc",
    "\u0007W\u0002\u0002\u04cc\u04ce\u0005\u00ba^\u0002\u04cd\u0499\u0003",
    "\u0002\u0002\u0002\u04cd\u049c\u0003\u0002\u0002\u0002\u04cd\u049f\u0003",
    "\u0002\u0002\u0002\u04cd\u04a2\u0003\u0002\u0002\u0002\u04cd\u04a5\u0003",
    "\u0002\u0002\u0002\u04cd\u04a8\u0003\u0002\u0002\u0002\u04cd\u04ab\u0003",
    "\u0002\u0002\u0002\u04cd\u04ae\u0003\u0002\u0002\u0002\u04cd\u04b1\u0003",
    "\u0002\u0002\u0002\u04cd\u04b4\u0003\u0002\u0002\u0002\u04cd\u04b7\u0003",
    "\u0002\u0002\u0002\u04cd\u04ba\u0003\u0002\u0002\u0002\u04cd\u04c1\u0003",
    "\u0002\u0002\u0002\u04cd\u04c4\u0003\u0002\u0002\u0002\u04cd\u04c7\u0003",
    "\u0002\u0002\u0002\u04cd\u04ca\u0003\u0002\u0002\u0002\u04ce\u04d1\u0003",
    "\u0002\u0002\u0002\u04cf\u04cd\u0003\u0002\u0002\u0002\u04cf\u04d0\u0003",
    "\u0002\u0002\u0002\u04d0\u00a9\u0003\u0002\u0002\u0002\u04d1\u04cf\u0003",
    "\u0002\u0002\u0002\u04d2\u04d3\u0007d\u0002\u0002\u04d3\u04d5\u0005",
    "\u00ba^\u0002\u04d4\u04d6\u0005\u00c4c\u0002\u04d5\u04d4\u0003\u0002",
    "\u0002\u0002\u04d5\u04d6\u0003\u0002\u0002\u0002\u04d6\u00ab\u0003\u0002",
    "\u0002\u0002\u04d7\u04d8\t\u0010\u0002\u0002\u04d8\u00ad\u0003\u0002",
    "\u0002\u0002\u04d9\u04da\u0007~\u0002\u0002\u04da\u04dd\u0005\u00a8",
    "U\u0002\u04db\u04dc\u0007\u0099\u0002\u0002\u04dc\u04de\u0005\u00a8",
    "U\u0002\u04dd\u04db\u0003\u0002\u0002\u0002\u04dd\u04de\u0003\u0002",
    "\u0002\u0002\u04de\u00af\u0003\u0002\u0002\u0002\u04df\u04e4\u0005\u00b2",
    "Z\u0002\u04e0\u04e1\u0007\u00cd\u0002\u0002\u04e1\u04e3\u0005\u00b2",
    "Z\u0002\u04e2\u04e0\u0003\u0002\u0002\u0002\u04e3\u04e6\u0003\u0002",
    "\u0002\u0002\u04e4\u04e2\u0003\u0002\u0002\u0002\u04e4\u04e5\u0003\u0002",
    "\u0002\u0002\u04e5\u04e8\u0003\u0002\u0002\u0002\u04e6\u04e4\u0003\u0002",
    "\u0002\u0002\u04e7\u04e9\u0007\u00cd\u0002\u0002\u04e8\u04e7\u0003\u0002",
    "\u0002\u0002\u04e8\u04e9\u0003\u0002\u0002\u0002\u04e9\u00b1\u0003\u0002",
    "\u0002\u0002\u04ea\u04ed\u0005\u00a8U\u0002\u04eb\u04ec\u0007\u0099",
    "\u0002\u0002\u04ec\u04ee\u0005\u00a8U\u0002\u04ed\u04eb\u0003\u0002",
    "\u0002\u0002\u04ed\u04ee\u0003\u0002\u0002\u0002\u04ee\u04f7\u0003\u0002",
    "\u0002\u0002\u04ef\u04f0\u0005\u00a8U\u0002\u04f0\u04f1\u0007\u0099",
    "\u0002\u0002\u04f1\u04f3\u0003\u0002\u0002\u0002\u04f2\u04ef\u0003\u0002",
    "\u0002\u0002\u04f2\u04f3\u0003\u0002\u0002\u0002\u04f3\u04f4\u0003\u0002",
    "\u0002\u0002\u04f4\u04f5\u0007\u00b9\u0002\u0002\u04f5\u04f7\u0005\u00de",
    "p\u0002\u04f6\u04ea\u0003\u0002\u0002\u0002\u04f6\u04f2\u0003\u0002",
    "\u0002\u0002\u04f7\u00b3\u0003\u0002\u0002\u0002\u04f8\u04f9\u0007{",
    "\u0002\u0002\u04f9\u04fa\u0007\u00c7\u0002\u0002\u04fa\u04ff\u0005\u00b6",
    "\\\u0002\u04fb\u04fc\u0007\u00cd\u0002\u0002\u04fc\u04fe\u0005\u00b6",
    "\\\u0002\u04fd\u04fb\u0003\u0002\u0002\u0002\u04fe\u0501\u0003\u0002",
    "\u0002\u0002\u04ff\u04fd\u0003\u0002\u0002\u0002\u04ff\u0500\u0003\u0002",
    "\u0002\u0002\u0500\u0502\u0003\u0002\u0002\u0002\u0501\u04ff\u0003\u0002",
    "\u0002\u0002\u0502\u0503\u0007\u00c8\u0002\u0002\u0503\u00b5\u0003\u0002",
    "\u0002\u0002\u0504\u0506\u0007\u00b9\u0002\u0002\u0505\u0504\u0003\u0002",
    "\u0002\u0002\u0505\u0506\u0003\u0002\u0002\u0002\u0506\u0507\u0003\u0002",
    "\u0002\u0002\u0507\u0508\u0007\u00d3\u0002\u0002\u0508\u00b7\u0003\u0002",
    "\u0002\u0002\u0509\u050b\u0005\u00be`\u0002\u050a\u050c\u0005.\u0018",
    "\u0002\u050b\u050a\u0003\u0002\u0002\u0002\u050b\u050c\u0003\u0002\u0002",
    "\u0002\u050c\u050f\u0003\u0002\u0002\u0002\u050d\u050f\u0007q\u0002",
    "\u0002\u050e\u0509\u0003\u0002\u0002\u0002\u050e\u050d\u0003\u0002\u0002",
    "\u0002\u050f\u00b9\u0003\u0002\u0002\u0002\u0510\u0513\u0005\u00be`",
    "\u0002\u0511\u0513\u0005\u00bc_\u0002\u0512\u0510\u0003\u0002\u0002",
    "\u0002\u0512\u0511\u0003\u0002\u0002\u0002\u0513\u0515\u0003\u0002\u0002",
    "\u0002\u0514\u0516\u0005.\u0018\u0002\u0515\u0514\u0003\u0002\u0002",
    "\u0002\u0515\u0516\u0003\u0002\u0002\u0002\u0516\u051a\u0003\u0002\u0002",
    "\u0002\u0517\u051a\u0005\u0100\u0081\u0002\u0518\u051a\u0007q\u0002",
    "\u0002\u0519\u0512\u0003\u0002\u0002\u0002\u0519\u0517\u0003\u0002\u0002",
    "\u0002\u0519\u0518\u0003\u0002\u0002\u0002\u051a\u00bb\u0003\u0002\u0002",
    "\u0002\u051b\u0520\u0005\u00e8u\u0002\u051c\u051d\u0007\u00b4\u0002",
    "\u0002\u051d\u051f\u0005\u00eav\u0002\u051e\u051c\u0003\u0002\u0002",
    "\u0002\u051f\u0522\u0003\u0002\u0002\u0002\u0520\u051e\u0003\u0002\u0002",
    "\u0002\u0520\u0521\u0003\u0002\u0002\u0002\u0521\u00bd\u0003\u0002\u0002",
    "\u0002\u0522\u0520\u0003\u0002\u0002\u0002\u0523\u0525\u0007c\u0002",
    "\u0002\u0524\u0523\u0003\u0002\u0002\u0002\u0524\u0525\u0003\u0002\u0002",
    "\u0002\u0525\u0527\u0003\u0002\u0002\u0002\u0526\u0528\u0007\u00b5\u0002",
    "\u0002\u0527\u0526\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002",
    "\u0002\u0528\u0529\u0003\u0002\u0002\u0002\u0529\u052a\u0005\u00c0a",
    "\u0002\u052a\u00bf\u0003\u0002\u0002\u0002\u052b\u0530\u0005\u00f8}",
    "\u0002\u052c\u052d\u0007\u00b5\u0002\u0002\u052d\u052f\u0005\u00f8}",
    "\u0002\u052e\u052c\u0003\u0002\u0002\u0002\u052f\u0532\u0003\u0002\u0002",
    "\u0002\u0530\u052e\u0003\u0002\u0002\u0002\u0530\u0531\u0003\u0002\u0002",
    "\u0002\u0531\u00c1\u0003\u0002\u0002\u0002\u0532\u0530\u0003\u0002\u0002",
    "\u0002\u0533\u0538\u0005\u00be`\u0002\u0534\u0535\u0007\u00cd\u0002",
    "\u0002\u0535\u0537\u0005\u00be`\u0002\u0536\u0534\u0003\u0002\u0002",
    "\u0002\u0537\u053a\u0003\u0002\u0002\u0002\u0538\u0536\u0003\u0002\u0002",
    "\u0002\u0538\u0539\u0003\u0002\u0002\u0002\u0539\u00c3\u0003\u0002\u0002",
    "\u0002\u053a\u0538\u0003\u0002\u0002\u0002\u053b\u0545\u0007\u00c7\u0002",
    "\u0002\u053c\u0541\u0005\u00c6d\u0002\u053d\u053e\u0007\u00cd\u0002",
    "\u0002\u053e\u0540\u0005\u00c6d\u0002\u053f\u053d\u0003\u0002\u0002",
    "\u0002\u0540\u0543\u0003\u0002\u0002\u0002\u0541\u053f\u0003\u0002\u0002",
    "\u0002\u0541\u0542\u0003\u0002\u0002\u0002\u0542\u0546\u0003\u0002\u0002",
    "\u0002\u0543\u0541\u0003\u0002\u0002\u0002\u0544\u0546\u0005\u00aeX",
    "\u0002\u0545\u053c\u0003\u0002\u0002\u0002\u0545\u0544\u0003\u0002\u0002",
    "\u0002\u0545\u0546\u0003\u0002\u0002\u0002\u0546\u0547\u0003\u0002\u0002",
    "\u0002\u0547\u0548\u0007\u00c8\u0002\u0002\u0548\u00c5\u0003\u0002\u0002",
    "\u0002\u0549\u054b\u0007\u00b6\u0002\u0002\u054a\u0549\u0003\u0002\u0002",
    "\u0002\u054a\u054b\u0003\u0002\u0002\u0002\u054b\u054c\u0003\u0002\u0002",
    "\u0002\u054c\u0550\u0005\u00a8U\u0002\u054d\u054e\u0007\u00b9\u0002",
    "\u0002\u054e\u0550\u0005\u00dep\u0002\u054f\u054a\u0003\u0002\u0002",
    "\u0002\u054f\u054d\u0003\u0002\u0002\u0002\u0550\u00c7\u0003\u0002\u0002",
    "\u0002\u0551\u0567\u0005\u00ceh\u0002\u0552\u0567\u0005\u00d8m\u0002",
    "\u0553\u0554\u0007+\u0002\u0002\u0554\u0559\u0007\u00c7\u0002\u0002",
    "\u0555\u0557\u0005\u00caf\u0002\u0556\u0558\u0007\u00cd\u0002\u0002",
    "\u0557\u0556\u0003\u0002\u0002\u0002\u0557\u0558\u0003\u0002\u0002\u0002",
    "\u0558\u055a\u0003\u0002\u0002\u0002\u0559\u0555\u0003\u0002\u0002\u0002",
    "\u0559\u055a\u0003\u0002\u0002\u0002\u055a\u055b\u0003\u0002\u0002\u0002",
    "\u055b\u0567\u0007\u00c8\u0002\u0002\u055c\u0561\u0007\u00c9\u0002\u0002",
    "\u055d\u055f\u0005\u00caf\u0002\u055e\u0560\u0007\u00cd\u0002\u0002",
    "\u055f\u055e\u0003\u0002\u0002\u0002\u055f\u0560\u0003\u0002\u0002\u0002",
    "\u0560\u0562\u0003\u0002\u0002\u0002\u0561\u055d\u0003\u0002\u0002\u0002",
    "\u0561\u0562\u0003\u0002\u0002\u0002\u0562\u0563\u0003\u0002\u0002\u0002",
    "\u0563\u0567\u0007\u00ca\u0002\u0002\u0564\u0565\t\u0011\u0002\u0002",
    "\u0565\u0567\u0005\u00c8e\u0002\u0566\u0551\u0003\u0002\u0002\u0002",
    "\u0566\u0552\u0003\u0002\u0002\u0002\u0566\u0553\u0003\u0002\u0002\u0002",
    "\u0566\u055c\u0003\u0002\u0002\u0002\u0566\u0564\u0003\u0002\u0002\u0002",
    "\u0567\u00c9\u0003\u0002\u0002\u0002\u0568\u056d\u0005\u00ccg\u0002",
    "\u0569\u056a\u0007\u00cd\u0002\u0002\u056a\u056c\u0005\u00ccg\u0002",
    "\u056b\u0569\u0003\u0002\u0002\u0002\u056c\u056f\u0003\u0002\u0002\u0002",
    "\u056d\u056b\u0003\u0002\u0002\u0002\u056d\u056e\u0003\u0002\u0002\u0002",
    "\u056e\u00cb\u0003\u0002\u0002\u0002\u056f\u056d\u0003\u0002\u0002\u0002",
    "\u0570\u0573\u0005\u00c8e\u0002\u0571\u0572\u0007\u0099\u0002\u0002",
    "\u0572\u0574\u0005\u00c8e\u0002\u0573\u0571\u0003\u0002\u0002\u0002",
    "\u0573\u0574\u0003\u0002\u0002\u0002\u0574\u00cd\u0003\u0002\u0002\u0002",
    "\u0575\u057b\u0007e\u0002\u0002\u0576\u057b\u0005\u00d0i\u0002\u0577",
    "\u057b\u0005\u00fc\u007f\u0002\u0578\u057b\u0005\u00d4k\u0002\u0579",
    "\u057b\u0005\u00be`\u0002\u057a\u0575\u0003\u0002\u0002\u0002\u057a",
    "\u0576\u0003\u0002\u0002\u0002\u057a\u0577\u0003\u0002\u0002\u0002\u057a",
    "\u0578\u0003\u0002\u0002\u0002\u057a\u0579\u0003\u0002\u0002\u0002\u057b",
    "\u00cf\u0003\u0002\u0002\u0002\u057c\u0581\u0007\u00d7\u0002\u0002\u057d",
    "\u0581\u0007/\u0002\u0002\u057e\u0581\u0005\u00d2j\u0002\u057f\u0581",
    "\u0005\u00d6l\u0002\u0580\u057c\u0003\u0002\u0002\u0002\u0580\u057d",
    "\u0003\u0002\u0002\u0002\u0580\u057e\u0003\u0002\u0002\u0002\u0580\u057f",
    "\u0003\u0002\u0002\u0002\u0581\u00d1\u0003\u0002\u0002\u0002\u0582\u0583",
    "\t\u0012\u0002\u0002\u0583\u00d3\u0003\u0002\u0002\u0002\u0584\u0585",
    "\t\u0013\u0002\u0002\u0585\u058a\u0007\u00b3\u0002\u0002\u0586\u058b",
    "\u0005\u00f8}\u0002\u0587\u058b\u0007\u0083\u0002\u0002\u0588\u058b",
    "\u0007\u007f\u0002\u0002\u0589\u058b\u0007\u0080\u0002\u0002\u058a\u0586",
    "\u0003\u0002\u0002\u0002\u058a\u0587\u0003\u0002\u0002\u0002\u058a\u0588",
    "\u0003\u0002\u0002\u0002\u058a\u0589\u0003\u0002\u0002\u0002\u058b\u0594",
    "\u0003\u0002\u0002\u0002\u058c\u058f\u0005\u00b8]\u0002\u058d\u058f",
    "\u0005\u00eex\u0002\u058e\u058c\u0003\u0002\u0002\u0002\u058e\u058d",
    "\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002\u0590\u0591",
    "\u0007\u00b3\u0002\u0002\u0591\u0592\u0005\u00f8}\u0002\u0592\u0594",
    "\u0003\u0002\u0002\u0002\u0593\u0584\u0003\u0002\u0002\u0002\u0593\u058e",
    "\u0003\u0002\u0002\u0002\u0594\u00d5\u0003\u0002\u0002\u0002\u0595\u0596",
    "\u0007\u00d4\u0002\u0002\u0596\u00d7\u0003\u0002\u0002\u0002\u0597\u0599",
    "\u0007\u00de\u0002\u0002\u0598\u059a\u0007\u00e5\u0002\u0002\u0599\u0598",
    "\u0003\u0002\u0002\u0002\u059a\u059b\u0003\u0002\u0002\u0002\u059b\u0599",
    "\u0003\u0002\u0002\u0002\u059b\u059c\u0003\u0002\u0002\u0002\u059c\u05ad",
    "\u0003\u0002\u0002\u0002\u059d\u059f\u0007\u00dd\u0002\u0002\u059e\u05a0",
    "\u0007\u00e5\u0002\u0002\u059f\u059e\u0003\u0002\u0002\u0002\u05a0\u05a1",
    "\u0003\u0002\u0002\u0002\u05a1\u059f\u0003\u0002\u0002\u0002\u05a1\u05a2",
    "\u0003\u0002\u0002\u0002\u05a2\u05ad\u0003\u0002\u0002\u0002\u05a3\u05ad",
    "\u0007\u00db\u0002\u0002\u05a4\u05a8\u0007\u00dc\u0002\u0002\u05a5\u05a7",
    "\u0005\u00dan\u0002\u05a6\u05a5\u0003\u0002\u0002\u0002\u05a7\u05aa",
    "\u0003\u0002\u0002\u0002\u05a8\u05a6\u0003\u0002\u0002\u0002\u05a8\u05a9",
    "\u0003\u0002\u0002\u0002\u05a9\u05ab\u0003\u0002\u0002\u0002\u05aa\u05a8",
    "\u0003\u0002\u0002\u0002\u05ab\u05ad\u0007\u00dc\u0002\u0002\u05ac\u0597",
    "\u0003\u0002\u0002\u0002\u05ac\u059d\u0003\u0002\u0002\u0002\u05ac\u05a3",
    "\u0003\u0002\u0002\u0002\u05ac\u05a4\u0003\u0002\u0002\u0002\u05ad\u00d9",
    "\u0003\u0002\u0002\u0002\u05ae\u05b1\u0007\u00e1\u0002\u0002\u05af\u05b1",
    "\u0005\u00dep\u0002\u05b0\u05ae\u0003\u0002\u0002\u0002\u05b0\u05af",
    "\u0003\u0002\u0002\u0002\u05b1\u00db\u0003\u0002\u0002\u0002\u05b2\u05b7",
    "\u0005\u00dep\u0002\u05b3\u05b4\u0007\u00cd\u0002\u0002\u05b4\u05b6",
    "\u0005\u00dep\u0002\u05b5\u05b3\u0003\u0002\u0002\u0002\u05b6\u05b9",
    "\u0003\u0002\u0002\u0002\u05b7\u05b5\u0003\u0002\u0002\u0002\u05b7\u05b8",
    "\u0003\u0002\u0002\u0002\u05b8\u00dd\u0003\u0002\u0002\u0002\u05b9\u05b7",
    "\u0003\u0002\u0002\u0002\u05ba\u05c1\u0005\u00e8u\u0002\u05bb\u05c1",
    "\u0005\u00e2r\u0002\u05bc\u05bd\u0007\u00c7\u0002\u0002\u05bd\u05be",
    "\u0005\u00aaV\u0002\u05be\u05bf\u0007\u00c8\u0002\u0002\u05bf\u05c1",
    "\u0003\u0002\u0002\u0002\u05c0\u05ba\u0003\u0002\u0002\u0002\u05c0\u05bb",
    "\u0003\u0002\u0002\u0002\u05c0\u05bc\u0003\u0002\u0002\u0002\u05c1\u05c5",
    "\u0003\u0002\u0002\u0002\u05c2\u05c4\u0005\u00e0q\u0002\u05c3\u05c2",
    "\u0003\u0002\u0002\u0002\u05c4\u05c7\u0003\u0002\u0002\u0002\u05c5\u05c3",
    "\u0003\u0002\u0002\u0002\u05c5\u05c6\u0003\u0002\u0002\u0002\u05c6\u00df",
    "\u0003\u0002\u0002\u0002\u05c7\u05c5\u0003\u0002\u0002\u0002\u05c8\u05c9",
    "\u0007\u00b4\u0002\u0002\u05c9\u05cb\u0005\u00eav\u0002\u05ca\u05cc",
    "\u0005\u00e6t\u0002\u05cb\u05ca\u0003\u0002\u0002\u0002\u05cb\u05cc",
    "\u0003\u0002\u0002\u0002\u05cc\u00e1\u0003\u0002\u0002\u0002\u05cd\u05ce",
    "\u0005\u00e4s\u0002\u05ce\u05cf\u0005\u00e6t\u0002\u05cf\u00e3\u0003",
    "\u0002\u0002\u0002\u05d0\u05d4\u0005\u00be`\u0002\u05d1\u05d4\u0005",
    "\u00d4k\u0002\u05d2\u05d4\u0005\u00e8u\u0002\u05d3\u05d0\u0003\u0002",
    "\u0002\u0002\u05d3\u05d1\u0003\u0002\u0002\u0002\u05d3\u05d2\u0003\u0002",
    "\u0002\u0002\u05d4\u00e5\u0003\u0002\u0002\u0002\u05d5\u05d7\u0005.",
    "\u0018\u0002\u05d6\u05d5\u0003\u0002\u0002\u0002\u05d6\u05d7\u0003\u0002",
    "\u0002\u0002\u05d7\u05d8\u0003\u0002\u0002\u0002\u05d8\u05dc\u0005\u00c4",
    "c\u0002\u05d9\u05db\u0005\u00f0y\u0002\u05da\u05d9\u0003\u0002\u0002",
    "\u0002\u05db\u05de\u0003\u0002\u0002\u0002\u05dc\u05da\u0003\u0002\u0002",
    "\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u00e7\u0003\u0002\u0002",
    "\u0002\u05de\u05dc\u0003\u0002\u0002\u0002\u05df\u05e2\u0005\u00eex",
    "\u0002\u05e0\u05e1\u0007\u00b3\u0002\u0002\u05e1\u05e3\u0005\u00eex",
    "\u0002\u05e2\u05e0\u0003\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002",
    "\u0002\u05e3\u05e9\u0003\u0002\u0002\u0002\u05e4\u05e5\u0005\u00b8]",
    "\u0002\u05e5\u05e6\u0007\u00b3\u0002\u0002\u05e6\u05e7\u0005\u00eex",
    "\u0002\u05e7\u05e9\u0003\u0002\u0002\u0002\u05e8\u05df\u0003\u0002\u0002",
    "\u0002\u05e8\u05e4\u0003\u0002\u0002\u0002\u05e9\u00e9\u0003\u0002\u0002",
    "\u0002\u05ea\u05ed\u0005\u00ecw\u0002\u05eb\u05ed\u0005\u00eex\u0002",
    "\u05ec\u05ea\u0003\u0002\u0002\u0002\u05ec\u05eb\u0003\u0002\u0002\u0002",
    "\u05ed\u00eb\u0003\u0002\u0002\u0002\u05ee\u05f4\u0005\u00f8}\u0002",
    "\u05ef\u05f0\u0007\u00cb\u0002\u0002\u05f0\u05f1\u0005\u00a8U\u0002",
    "\u05f1\u05f2\u0007\u00cc\u0002\u0002\u05f2\u05f4\u0003\u0002\u0002\u0002",
    "\u05f3\u05ee\u0003\u0002\u0002\u0002\u05f3\u05ef\u0003\u0002\u0002\u0002",
    "\u05f4\u05f8\u0003\u0002\u0002\u0002\u05f5\u05f7\u0005\u00f0y\u0002",
    "\u05f6\u05f5\u0003\u0002\u0002\u0002\u05f7\u05fa\u0003\u0002\u0002\u0002",
    "\u05f8\u05f6\u0003\u0002\u0002\u0002\u05f8\u05f9\u0003\u0002\u0002\u0002",
    "\u05f9\u00ed\u0003\u0002\u0002\u0002\u05fa\u05f8\u0003\u0002\u0002\u0002",
    "\u05fb\u05fd\u0007\u00c4\u0002\u0002\u05fc\u05fb\u0003\u0002\u0002\u0002",
    "\u05fd\u0600\u0003\u0002\u0002\u0002\u05fe\u05fc\u0003\u0002\u0002\u0002",
    "\u05fe\u05ff\u0003\u0002\u0002\u0002\u05ff\u0607\u0003\u0002\u0002\u0002",
    "\u0600\u05fe\u0003\u0002\u0002\u0002\u0601\u0608\u0007\u00d3\u0002\u0002",
    "\u0602\u0603\u0007\u00c4\u0002\u0002\u0603\u0604\u0007\u00cb\u0002\u0002",
    "\u0604\u0605\u0005\u00a8U\u0002\u0605\u0606\u0007\u00cc\u0002\u0002",
    "\u0606\u0608\u0003\u0002\u0002\u0002\u0607\u0601\u0003\u0002\u0002\u0002",
    "\u0607\u0602\u0003\u0002\u0002\u0002\u0608\u060c\u0003\u0002\u0002\u0002",
    "\u0609\u060b\u0005\u00f0y\u0002\u060a\u0609\u0003\u0002\u0002\u0002",
    "\u060b\u060e\u0003\u0002\u0002\u0002\u060c\u060a\u0003\u0002\u0002\u0002",
    "\u060c\u060d\u0003\u0002\u0002\u0002\u060d\u00ef\u0003\u0002\u0002\u0002",
    "\u060e\u060c\u0003\u0002\u0002\u0002\u060f\u0611\u0007\u00c9\u0002\u0002",
    "\u0610\u0612\u0005\u00a8U\u0002\u0611\u0610\u0003\u0002\u0002\u0002",
    "\u0611\u0612\u0003\u0002\u0002\u0002\u0612\u0613\u0003\u0002\u0002\u0002",
    "\u0613\u0619\u0007\u00ca\u0002\u0002\u0614\u0615\u0007\u00cb\u0002\u0002",
    "\u0615\u0616\u0005\u00a8U\u0002\u0616\u0617\u0007\u00cc\u0002\u0002",
    "\u0617\u0619\u0003\u0002\u0002\u0002\u0618\u060f\u0003\u0002\u0002\u0002",
    "\u0618\u0614\u0003\u0002\u0002\u0002\u0619\u00f1\u0003\u0002\u0002\u0002",
    "\u061a\u061c\u0005\u00f4{\u0002\u061b\u061a\u0003\u0002\u0002\u0002",
    "\u061b\u061c\u0003\u0002\u0002\u0002\u061c\u0623\u0003\u0002\u0002\u0002",
    "\u061d\u061f\u0007\u00cd\u0002\u0002\u061e\u0620\u0005\u00f4{\u0002",
    "\u061f\u061e\u0003\u0002\u0002\u0002\u061f\u0620\u0003\u0002\u0002\u0002",
    "\u0620\u0622\u0003\u0002\u0002\u0002\u0621\u061d\u0003\u0002\u0002\u0002",
    "\u0622\u0625\u0003\u0002\u0002\u0002\u0623\u0621\u0003\u0002\u0002\u0002",
    "\u0623\u0624\u0003\u0002\u0002\u0002\u0624\u00f3\u0003\u0002\u0002\u0002",
    "\u0625\u0623\u0003\u0002\u0002\u0002\u0626\u062d\u0005\u00dep\u0002",
    "\u0627\u0628\u0007_\u0002\u0002\u0628\u0629\u0007\u00c7\u0002\u0002",
    "\u0629\u062a\u0005\u00f2z\u0002\u062a\u062b\u0007\u00c8\u0002\u0002",
    "\u062b\u062d\u0003\u0002\u0002\u0002\u062c\u0626\u0003\u0002\u0002\u0002",
    "\u062c\u0627\u0003\u0002\u0002\u0002\u062d\u00f5\u0003\u0002\u0002\u0002",
    "\u062e\u062f\t\u0014\u0002\u0002\u062f\u00f7\u0003\u0002\u0002\u0002",
    "\u0630\u0631\t\u0015\u0002\u0002\u0631\u00f9\u0003\u0002\u0002\u0002",
    "\u0632\u0633\t\u0016\u0002\u0002\u0633\u00fb\u0003\u0002\u0002\u0002",
    "\u0634\u0635\t\u0017\u0002\u0002\u0635\u00fd\u0003\u0002\u0002\u0002",
    "\u0636\u0637\t\u0018\u0002\u0002\u0637\u00ff\u0003\u0002\u0002\u0002",
    "\u0638\u0639\t\u0019\u0002\u0002\u0639\u0101\u0003\u0002\u0002\u0002",
    "\u063a\u063b\t\u001a\u0002\u0002\u063b\u0103\u0003\u0002\u0002\u0002",
    "\u00b9\u0105\u010a\u0112\u0117\u011e\u0123\u0129\u0137\u013b\u0141\u0146",
    "\u014b\u0151\u0155\u015b\u0162\u0169\u016e\u0172\u017b\u017e\u0181\u0186",
    "\u018a\u018e\u0193\u0197\u0199\u019f\u01ab\u01bc\u01c3\u01cb\u01d6\u01de",
    "\u01e6\u01ed\u01f4\u020b\u0212\u021a\u0224\u022a\u022e\u024c\u0258\u025c",
    "\u0265\u0269\u026e\u0288\u0293\u0297\u029b\u02a4\u02ae\u02b3\u02b9\u02be",
    "\u02c3\u02c8\u02cd\u02d3\u02d9\u02df\u02f1\u02f6\u02f9\u0303\u0306\u0313",
    "\u031b\u0322\u0325\u032a\u032e\u034c\u0350\u0352\u0359\u035d\u0363\u0368",
    "\u036b\u036e\u0375\u037d\u038a\u0396\u03a2\u03ae\u03b5\u03b9\u03bd\u03c3",
    "\u03cb\u03d2\u03d6\u03da\u03e7\u03ea\u03f1\u03fb\u03ff\u0404\u0409\u0416",
    "\u0420\u0426\u044a\u0457\u045c\u045f\u0465\u0482\u0489\u048d\u0493\u0497",
    "\u04bd\u04cd\u04cf\u04d5\u04dd\u04e4\u04e8\u04ed\u04f2\u04f6\u04ff\u0505",
    "\u050b\u050e\u0512\u0515\u0519\u0520\u0524\u0527\u0530\u0538\u0541\u0545",
    "\u054a\u054f\u0557\u0559\u055f\u0561\u0566\u056d\u0573\u057a\u0580\u058a",
    "\u058e\u0593\u059b\u05a1\u05a8\u05ac\u05b0\u05b7\u05c0\u05c5\u05cb\u05d3",
    "\u05d6\u05dc\u05e2\u05e8\u05ec\u05f3\u05f8\u05fe\u0607\u060c\u0611\u0618",
    "\u061b\u061f\u0623\u062c"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, "'/>'", null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, "'abstract'", "'array'", "'as'", 
                     "'binary'", null, null, "'break'", "'callable'", "'case'", 
                     "'catch'", "'class'", "'clone'", "'const'", "'continue'", 
                     "'declare'", "'default'", "'do'", "'real'", "'double'", 
                     "'echo'", "'else'", "'elseif'", "'empty'", "'enddeclare'", 
                     "'endfor'", "'endforeach'", "'endif'", "'endswitch'", 
                     "'endwhile'", "'eval'", "'die'", "'extends'", "'final'", 
                     "'finally'", "'float'", "'for'", "'foreach'", "'function'", 
                     "'global'", "'goto'", "'if'", "'implements'", "'import'", 
                     "'include'", "'include_once'", "'instanceof'", "'insteadof'", 
                     "'int8'", "'int16'", "'int64'", null, "'interface'", 
                     "'isset'", "'list'", "'and'", "'or'", "'xor'", "'namespace'", 
                     "'new'", "'null'", "'object'", "'parent'", "'partial'", 
                     "'print'", "'private'", "'protected'", "'public'", 
                     "'require'", "'require_once'", "'resource'", "'return'", 
                     "'static'", "'string'", "'switch'", "'throw'", "'trait'", 
                     "'try'", "'clrtypeof'", null, "'unicode'", "'unset'", 
                     "'use'", "'var'", "'while'", "'yield'", "'__get'", 
                     "'__set'", "'__call'", "'__callstatic'", "'__construct'", 
                     "'__destruct'", "'__wakeup'", "'__sleep'", "'__autoload'", 
                     "'__isset'", "'__unset'", "'__tostring'", "'__invoke'", 
                     "'__set_state'", "'__clone'", "'__debuginfo'", "'__namespace__'", 
                     "'__class__'", "'__trait__'", "'__function__'", "'__method__'", 
                     "'__line__'", "'__file__'", "'__dir__'", "'<:'", "':>'", 
                     "'=>'", "'++'", "'--'", "'==='", "'!=='", "'=='", null, 
                     "'<='", "'>='", "'+='", "'-='", "'*='", "'**'", "'**='", 
                     "'/='", "'.='", "'%='", "'<<='", "'>>='", "'&='", "'|='", 
                     "'^='", "'||'", "'&&'", "'<<'", "'>>'", "'::'", "'->'", 
                     "'\\'", "'...'", null, null, "'&'", "'|'", "'!'", "'^'", 
                     "'+'", "'-'", "'*'", "'%'", null, "'~'", "'@'", null, 
                     "'.'", "'?'", "'('", "')'", "'['", "']'", null, "'}'", 
                     "','", "':'", "';'", null, "'''", "'`'" ];

var symbolicNames = [ null, "SeaWhitespace", "HtmlText", "PHPStart", "HtmlScriptOpen", 
                      "HtmlStyleOpen", "HtmlComment", "HtmlDtd", "HtmlOpen", 
                      "Shebang", "Error", "PHPStartInside", "HtmlClose", 
                      "HtmlSlashClose", "HtmlSlash", "HtmlEquals", "HtmlStartQuoteString", 
                      "HtmlStartDoubleQuoteString", "HtmlHex", "HtmlDecimal", 
                      "HtmlSpace", "HtmlName", "ErrorInside", "PHPStartInsideQuoteString", 
                      "HtmlEndQuoteString", "HtmlQuoteString", "ErrorHtmlQuote", 
                      "PHPStartDoubleQuoteString", "HtmlEndDoubleQuoteString", 
                      "HtmlDoubleQuoteString", "ErrorHtmlDoubleQuote", "ScriptText", 
                      "ScriptClose", "PHPStartInsideScript", "StyleBody", 
                      "PHPEnd", "Whitespace", "MultiLineComment", "SingleLineComment", 
                      "ShellStyleComment", "Abstract", "Array", "As", "BinaryCast", 
                      "BoolType", "BooleanConstant", "Break", "Callable", 
                      "Case", "Catch", "Class", "Clone", "Const", "Continue", 
                      "Declare", "Default", "Do", "DoubleCast", "DoubleType", 
                      "Echo", "Else", "ElseIf", "Empty", "EndDeclare", "EndFor", 
                      "EndForeach", "EndIf", "EndSwitch", "EndWhile", "Eval", 
                      "Exit", "Extends", "Final", "Finally", "FloatCast", 
                      "For", "Foreach", "Function", "Global", "Goto", "If", 
                      "Implements", "Import", "Include", "IncludeOnce", 
                      "InstanceOf", "InsteadOf", "Int8Cast", "Int16Cast", 
                      "Int64Type", "IntType", "Interface", "IsSet", "List", 
                      "LogicalAnd", "LogicalOr", "LogicalXor", "Namespace", 
                      "New", "Null", "ObjectType", "Parent_", "Partial", 
                      "Print", "Private", "Protected", "Public", "Require", 
                      "RequireOnce", "Resource", "Return", "Static", "StringType", 
                      "Switch", "Throw", "Trait", "Try", "Typeof", "UintCast", 
                      "UnicodeCast", "Unset", "Use", "Var", "While", "Yield", 
                      "Get", "Set", "Call", "CallStatic", "Constructor", 
                      "Destruct", "Wakeup", "Sleep", "Autoload", "IsSet__", 
                      "Unset__", "ToString__", "Invoke", "SetState", "Clone__", 
                      "DebugInfo", "Namespace__", "Class__", "Traic__", 
                      "Function__", "Method__", "Line__", "File__", "Dir__", 
                      "Lgeneric", "Rgeneric", "DoubleArrow", "Inc", "Dec", 
                      "IsIdentical", "IsNoidentical", "IsEqual", "IsNotEq", 
                      "IsSmallerOrEqual", "IsGreaterOrEqual", "PlusEqual", 
                      "MinusEqual", "MulEqual", "Pow", "PowEqual", "DivEqual", 
                      "Concaequal", "ModEqual", "ShiftLeftEqual", "ShiftRightEqual", 
                      "AndEqual", "OrEqual", "XorEqual", "BooleanOr", "BooleanAnd", 
                      "ShiftLeft", "ShiftRight", "DoubleColon", "ObjectOperator", 
                      "NamespaceSeparator", "Ellipsis", "Less", "Greater", 
                      "Ampersand", "Pipe", "Bang", "Caret", "Plus", "Minus", 
                      "Asterisk", "Percent", "Divide", "Tilde", "SuppressWarnings", 
                      "Dollar", "Dot", "QuestionMark", "OpenRoundBracket", 
                      "CloseRoundBracket", "OpenSquareBracket", "CloseSquareBracket", 
                      "OpenCurlyBracket", "CloseCurlyBracket", "Comma", 
                      "Colon", "SemiColon", "Eq", "Quote", "BackQuote", 
                      "VarName", "Label", "Octal", "Decimal", "Real", "Hex", 
                      "Binary", "BackQuoteString", "SingleQuoteString", 
                      "DoubleQuote", "StartNowDoc", "StartHereDoc", "ErrorPhp", 
                      "CurlyDollar", "StringPart", "Comment", "PHPEndSingleLineComment", 
                      "CommentEnd", "HereDocText" ];

var ruleNames =  [ "htmlDocument", "htmlElementOrPhpBlock", "htmlElements", 
                   "htmlElement", "scriptTextPart", "phpBlock", "importStatement", 
                   "topStatement", "useDeclaration", "useDeclarationContentList", 
                   "useDeclarationContent", "namespaceDeclaration", "namespaceStatement", 
                   "functionDeclaration", "classDeclaration", "classEntryType", 
                   "interfaceList", "typeParameterListInBrackets", "typeParameterList", 
                   "typeParameterWithDefaultsList", "typeParameterDecl", 
                   "typeParameterWithDefaultDecl", "genericDynamicArgs", 
                   "attributes", "attributesGroup", "attribute", "attributeArgList", 
                   "attributeNamedArgList", "attributeNamedArg", "innerStatementList", 
                   "innerStatement", "statement", "emptyStatement", "nonEmptyStatement", 
                   "blockStatement", "ifStatement", "elseIfStatement", "elseIfColonStatement", 
                   "elseStatement", "elseColonStatement", "whileStatement", 
                   "doWhileStatement", "forStatement", "forInit", "forUpdate", 
                   "switchStatement", "switchBlock", "breakStatement", "continueStatement", 
                   "returnStatement", "expressionStatement", "unsetStatement", 
                   "foreachStatement", "tryCatchFinally", "catchClause", 
                   "finallyStatement", "throwStatement", "gotoStatement", 
                   "declareStatement", "inlineHtml", "declareList", "formalParameterList", 
                   "formalParameter", "typeHint", "globalStatement", "globalVar", 
                   "echoStatement", "staticVariableStatement", "classStatement", 
                   "traitAdaptations", "traitAdaptationStatement", "traitPrecedence", 
                   "traitAlias", "traitMethodReference", "baseCtorCall", 
                   "methodBody", "propertyModifiers", "memberModifiers", 
                   "variableInitializer", "identifierInititalizer", "globalConstantDeclaration", 
                   "expressionList", "parenthesis", "expression", "newExpr", 
                   "assignmentOperator", "yieldExpression", "arrayItemList", 
                   "arrayItem", "lambdaFunctionUseVars", "lambdaFunctionUseVar", 
                   "qualifiedStaticTypeRef", "typeRef", "indirectTypeRef", 
                   "qualifiedNamespaceName", "namespaceNameList", "qualifiedNamespaceNameList", 
                   "arguments", "actualArgument", "constantInititalizer", 
                   "constantArrayItemList", "constantArrayItem", "constant", 
                   "literalConstant", "numericConstant", "classConstant", 
                   "stringConstant", "string", "interpolatedStringPart", 
                   "chainList", "chain", "memberAccess", "functionCall", 
                   "functionCallName", "actualArguments", "chainBase", "keyedFieldName", 
                   "keyedSimpleFieldName", "keyedVariable", "squareCurlyExpression", 
                   "assignmentList", "assignmentListElement", "modifier", 
                   "identifier", "memberModifier", "magicConstant", "magicMethod", 
                   "primitiveType", "castOperation" ];

function PHPParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

PHPParser.prototype = Object.create(antlr4.Parser.prototype);
PHPParser.prototype.constructor = PHPParser;

Object.defineProperty(PHPParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PHPParser.EOF = antlr4.Token.EOF;
PHPParser.SeaWhitespace = 1;
PHPParser.HtmlText = 2;
PHPParser.PHPStart = 3;
PHPParser.HtmlScriptOpen = 4;
PHPParser.HtmlStyleOpen = 5;
PHPParser.HtmlComment = 6;
PHPParser.HtmlDtd = 7;
PHPParser.HtmlOpen = 8;
PHPParser.Shebang = 9;
PHPParser.Error = 10;
PHPParser.PHPStartInside = 11;
PHPParser.HtmlClose = 12;
PHPParser.HtmlSlashClose = 13;
PHPParser.HtmlSlash = 14;
PHPParser.HtmlEquals = 15;
PHPParser.HtmlStartQuoteString = 16;
PHPParser.HtmlStartDoubleQuoteString = 17;
PHPParser.HtmlHex = 18;
PHPParser.HtmlDecimal = 19;
PHPParser.HtmlSpace = 20;
PHPParser.HtmlName = 21;
PHPParser.ErrorInside = 22;
PHPParser.PHPStartInsideQuoteString = 23;
PHPParser.HtmlEndQuoteString = 24;
PHPParser.HtmlQuoteString = 25;
PHPParser.ErrorHtmlQuote = 26;
PHPParser.PHPStartDoubleQuoteString = 27;
PHPParser.HtmlEndDoubleQuoteString = 28;
PHPParser.HtmlDoubleQuoteString = 29;
PHPParser.ErrorHtmlDoubleQuote = 30;
PHPParser.ScriptText = 31;
PHPParser.ScriptClose = 32;
PHPParser.PHPStartInsideScript = 33;
PHPParser.StyleBody = 34;
PHPParser.PHPEnd = 35;
PHPParser.Whitespace = 36;
PHPParser.MultiLineComment = 37;
PHPParser.SingleLineComment = 38;
PHPParser.ShellStyleComment = 39;
PHPParser.Abstract = 40;
PHPParser.Array = 41;
PHPParser.As = 42;
PHPParser.BinaryCast = 43;
PHPParser.BoolType = 44;
PHPParser.BooleanConstant = 45;
PHPParser.Break = 46;
PHPParser.Callable = 47;
PHPParser.Case = 48;
PHPParser.Catch = 49;
PHPParser.Class = 50;
PHPParser.Clone = 51;
PHPParser.Const = 52;
PHPParser.Continue = 53;
PHPParser.Declare = 54;
PHPParser.Default = 55;
PHPParser.Do = 56;
PHPParser.DoubleCast = 57;
PHPParser.DoubleType = 58;
PHPParser.Echo = 59;
PHPParser.Else = 60;
PHPParser.ElseIf = 61;
PHPParser.Empty = 62;
PHPParser.EndDeclare = 63;
PHPParser.EndFor = 64;
PHPParser.EndForeach = 65;
PHPParser.EndIf = 66;
PHPParser.EndSwitch = 67;
PHPParser.EndWhile = 68;
PHPParser.Eval = 69;
PHPParser.Exit = 70;
PHPParser.Extends = 71;
PHPParser.Final = 72;
PHPParser.Finally = 73;
PHPParser.FloatCast = 74;
PHPParser.For = 75;
PHPParser.Foreach = 76;
PHPParser.Function = 77;
PHPParser.Global = 78;
PHPParser.Goto = 79;
PHPParser.If = 80;
PHPParser.Implements = 81;
PHPParser.Import = 82;
PHPParser.Include = 83;
PHPParser.IncludeOnce = 84;
PHPParser.InstanceOf = 85;
PHPParser.InsteadOf = 86;
PHPParser.Int8Cast = 87;
PHPParser.Int16Cast = 88;
PHPParser.Int64Type = 89;
PHPParser.IntType = 90;
PHPParser.Interface = 91;
PHPParser.IsSet = 92;
PHPParser.List = 93;
PHPParser.LogicalAnd = 94;
PHPParser.LogicalOr = 95;
PHPParser.LogicalXor = 96;
PHPParser.Namespace = 97;
PHPParser.New = 98;
PHPParser.Null = 99;
PHPParser.ObjectType = 100;
PHPParser.Parent_ = 101;
PHPParser.Partial = 102;
PHPParser.Print = 103;
PHPParser.Private = 104;
PHPParser.Protected = 105;
PHPParser.Public = 106;
PHPParser.Require = 107;
PHPParser.RequireOnce = 108;
PHPParser.Resource = 109;
PHPParser.Return = 110;
PHPParser.Static = 111;
PHPParser.StringType = 112;
PHPParser.Switch = 113;
PHPParser.Throw = 114;
PHPParser.Trait = 115;
PHPParser.Try = 116;
PHPParser.Typeof = 117;
PHPParser.UintCast = 118;
PHPParser.UnicodeCast = 119;
PHPParser.Unset = 120;
PHPParser.Use = 121;
PHPParser.Var = 122;
PHPParser.While = 123;
PHPParser.Yield = 124;
PHPParser.Get = 125;
PHPParser.Set = 126;
PHPParser.Call = 127;
PHPParser.CallStatic = 128;
PHPParser.Constructor = 129;
PHPParser.Destruct = 130;
PHPParser.Wakeup = 131;
PHPParser.Sleep = 132;
PHPParser.Autoload = 133;
PHPParser.IsSet__ = 134;
PHPParser.Unset__ = 135;
PHPParser.ToString__ = 136;
PHPParser.Invoke = 137;
PHPParser.SetState = 138;
PHPParser.Clone__ = 139;
PHPParser.DebugInfo = 140;
PHPParser.Namespace__ = 141;
PHPParser.Class__ = 142;
PHPParser.Traic__ = 143;
PHPParser.Function__ = 144;
PHPParser.Method__ = 145;
PHPParser.Line__ = 146;
PHPParser.File__ = 147;
PHPParser.Dir__ = 148;
PHPParser.Lgeneric = 149;
PHPParser.Rgeneric = 150;
PHPParser.DoubleArrow = 151;
PHPParser.Inc = 152;
PHPParser.Dec = 153;
PHPParser.IsIdentical = 154;
PHPParser.IsNoidentical = 155;
PHPParser.IsEqual = 156;
PHPParser.IsNotEq = 157;
PHPParser.IsSmallerOrEqual = 158;
PHPParser.IsGreaterOrEqual = 159;
PHPParser.PlusEqual = 160;
PHPParser.MinusEqual = 161;
PHPParser.MulEqual = 162;
PHPParser.Pow = 163;
PHPParser.PowEqual = 164;
PHPParser.DivEqual = 165;
PHPParser.Concaequal = 166;
PHPParser.ModEqual = 167;
PHPParser.ShiftLeftEqual = 168;
PHPParser.ShiftRightEqual = 169;
PHPParser.AndEqual = 170;
PHPParser.OrEqual = 171;
PHPParser.XorEqual = 172;
PHPParser.BooleanOr = 173;
PHPParser.BooleanAnd = 174;
PHPParser.ShiftLeft = 175;
PHPParser.ShiftRight = 176;
PHPParser.DoubleColon = 177;
PHPParser.ObjectOperator = 178;
PHPParser.NamespaceSeparator = 179;
PHPParser.Ellipsis = 180;
PHPParser.Less = 181;
PHPParser.Greater = 182;
PHPParser.Ampersand = 183;
PHPParser.Pipe = 184;
PHPParser.Bang = 185;
PHPParser.Caret = 186;
PHPParser.Plus = 187;
PHPParser.Minus = 188;
PHPParser.Asterisk = 189;
PHPParser.Percent = 190;
PHPParser.Divide = 191;
PHPParser.Tilde = 192;
PHPParser.SuppressWarnings = 193;
PHPParser.Dollar = 194;
PHPParser.Dot = 195;
PHPParser.QuestionMark = 196;
PHPParser.OpenRoundBracket = 197;
PHPParser.CloseRoundBracket = 198;
PHPParser.OpenSquareBracket = 199;
PHPParser.CloseSquareBracket = 200;
PHPParser.OpenCurlyBracket = 201;
PHPParser.CloseCurlyBracket = 202;
PHPParser.Comma = 203;
PHPParser.Colon = 204;
PHPParser.SemiColon = 205;
PHPParser.Eq = 206;
PHPParser.Quote = 207;
PHPParser.BackQuote = 208;
PHPParser.VarName = 209;
PHPParser.Label = 210;
PHPParser.Octal = 211;
PHPParser.Decimal = 212;
PHPParser.Real = 213;
PHPParser.Hex = 214;
PHPParser.Binary = 215;
PHPParser.BackQuoteString = 216;
PHPParser.SingleQuoteString = 217;
PHPParser.DoubleQuote = 218;
PHPParser.StartNowDoc = 219;
PHPParser.StartHereDoc = 220;
PHPParser.ErrorPhp = 221;
PHPParser.CurlyDollar = 222;
PHPParser.StringPart = 223;
PHPParser.Comment = 224;
PHPParser.PHPEndSingleLineComment = 225;
PHPParser.CommentEnd = 226;
PHPParser.HereDocText = 227;

PHPParser.RULE_htmlDocument = 0;
PHPParser.RULE_htmlElementOrPhpBlock = 1;
PHPParser.RULE_htmlElements = 2;
PHPParser.RULE_htmlElement = 3;
PHPParser.RULE_scriptTextPart = 4;
PHPParser.RULE_phpBlock = 5;
PHPParser.RULE_importStatement = 6;
PHPParser.RULE_topStatement = 7;
PHPParser.RULE_useDeclaration = 8;
PHPParser.RULE_useDeclarationContentList = 9;
PHPParser.RULE_useDeclarationContent = 10;
PHPParser.RULE_namespaceDeclaration = 11;
PHPParser.RULE_namespaceStatement = 12;
PHPParser.RULE_functionDeclaration = 13;
PHPParser.RULE_classDeclaration = 14;
PHPParser.RULE_classEntryType = 15;
PHPParser.RULE_interfaceList = 16;
PHPParser.RULE_typeParameterListInBrackets = 17;
PHPParser.RULE_typeParameterList = 18;
PHPParser.RULE_typeParameterWithDefaultsList = 19;
PHPParser.RULE_typeParameterDecl = 20;
PHPParser.RULE_typeParameterWithDefaultDecl = 21;
PHPParser.RULE_genericDynamicArgs = 22;
PHPParser.RULE_attributes = 23;
PHPParser.RULE_attributesGroup = 24;
PHPParser.RULE_attribute = 25;
PHPParser.RULE_attributeArgList = 26;
PHPParser.RULE_attributeNamedArgList = 27;
PHPParser.RULE_attributeNamedArg = 28;
PHPParser.RULE_innerStatementList = 29;
PHPParser.RULE_innerStatement = 30;
PHPParser.RULE_statement = 31;
PHPParser.RULE_emptyStatement = 32;
PHPParser.RULE_nonEmptyStatement = 33;
PHPParser.RULE_blockStatement = 34;
PHPParser.RULE_ifStatement = 35;
PHPParser.RULE_elseIfStatement = 36;
PHPParser.RULE_elseIfColonStatement = 37;
PHPParser.RULE_elseStatement = 38;
PHPParser.RULE_elseColonStatement = 39;
PHPParser.RULE_whileStatement = 40;
PHPParser.RULE_doWhileStatement = 41;
PHPParser.RULE_forStatement = 42;
PHPParser.RULE_forInit = 43;
PHPParser.RULE_forUpdate = 44;
PHPParser.RULE_switchStatement = 45;
PHPParser.RULE_switchBlock = 46;
PHPParser.RULE_breakStatement = 47;
PHPParser.RULE_continueStatement = 48;
PHPParser.RULE_returnStatement = 49;
PHPParser.RULE_expressionStatement = 50;
PHPParser.RULE_unsetStatement = 51;
PHPParser.RULE_foreachStatement = 52;
PHPParser.RULE_tryCatchFinally = 53;
PHPParser.RULE_catchClause = 54;
PHPParser.RULE_finallyStatement = 55;
PHPParser.RULE_throwStatement = 56;
PHPParser.RULE_gotoStatement = 57;
PHPParser.RULE_declareStatement = 58;
PHPParser.RULE_inlineHtml = 59;
PHPParser.RULE_declareList = 60;
PHPParser.RULE_formalParameterList = 61;
PHPParser.RULE_formalParameter = 62;
PHPParser.RULE_typeHint = 63;
PHPParser.RULE_globalStatement = 64;
PHPParser.RULE_globalVar = 65;
PHPParser.RULE_echoStatement = 66;
PHPParser.RULE_staticVariableStatement = 67;
PHPParser.RULE_classStatement = 68;
PHPParser.RULE_traitAdaptations = 69;
PHPParser.RULE_traitAdaptationStatement = 70;
PHPParser.RULE_traitPrecedence = 71;
PHPParser.RULE_traitAlias = 72;
PHPParser.RULE_traitMethodReference = 73;
PHPParser.RULE_baseCtorCall = 74;
PHPParser.RULE_methodBody = 75;
PHPParser.RULE_propertyModifiers = 76;
PHPParser.RULE_memberModifiers = 77;
PHPParser.RULE_variableInitializer = 78;
PHPParser.RULE_identifierInititalizer = 79;
PHPParser.RULE_globalConstantDeclaration = 80;
PHPParser.RULE_expressionList = 81;
PHPParser.RULE_parenthesis = 82;
PHPParser.RULE_expression = 83;
PHPParser.RULE_newExpr = 84;
PHPParser.RULE_assignmentOperator = 85;
PHPParser.RULE_yieldExpression = 86;
PHPParser.RULE_arrayItemList = 87;
PHPParser.RULE_arrayItem = 88;
PHPParser.RULE_lambdaFunctionUseVars = 89;
PHPParser.RULE_lambdaFunctionUseVar = 90;
PHPParser.RULE_qualifiedStaticTypeRef = 91;
PHPParser.RULE_typeRef = 92;
PHPParser.RULE_indirectTypeRef = 93;
PHPParser.RULE_qualifiedNamespaceName = 94;
PHPParser.RULE_namespaceNameList = 95;
PHPParser.RULE_qualifiedNamespaceNameList = 96;
PHPParser.RULE_arguments = 97;
PHPParser.RULE_actualArgument = 98;
PHPParser.RULE_constantInititalizer = 99;
PHPParser.RULE_constantArrayItemList = 100;
PHPParser.RULE_constantArrayItem = 101;
PHPParser.RULE_constant = 102;
PHPParser.RULE_literalConstant = 103;
PHPParser.RULE_numericConstant = 104;
PHPParser.RULE_classConstant = 105;
PHPParser.RULE_stringConstant = 106;
PHPParser.RULE_string = 107;
PHPParser.RULE_interpolatedStringPart = 108;
PHPParser.RULE_chainList = 109;
PHPParser.RULE_chain = 110;
PHPParser.RULE_memberAccess = 111;
PHPParser.RULE_functionCall = 112;
PHPParser.RULE_functionCallName = 113;
PHPParser.RULE_actualArguments = 114;
PHPParser.RULE_chainBase = 115;
PHPParser.RULE_keyedFieldName = 116;
PHPParser.RULE_keyedSimpleFieldName = 117;
PHPParser.RULE_keyedVariable = 118;
PHPParser.RULE_squareCurlyExpression = 119;
PHPParser.RULE_assignmentList = 120;
PHPParser.RULE_assignmentListElement = 121;
PHPParser.RULE_modifier = 122;
PHPParser.RULE_identifier = 123;
PHPParser.RULE_memberModifier = 124;
PHPParser.RULE_magicConstant = 125;
PHPParser.RULE_magicMethod = 126;
PHPParser.RULE_primitiveType = 127;
PHPParser.RULE_castOperation = 128;

function HtmlDocumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_htmlDocument;
    return this;
}

HtmlDocumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlDocumentContext.prototype.constructor = HtmlDocumentContext;

HtmlDocumentContext.prototype.EOF = function() {
    return this.getToken(PHPParser.EOF, 0);
};

HtmlDocumentContext.prototype.Shebang = function() {
    return this.getToken(PHPParser.Shebang, 0);
};

HtmlDocumentContext.prototype.htmlElementOrPhpBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HtmlElementOrPhpBlockContext);
    } else {
        return this.getTypedRuleContext(HtmlElementOrPhpBlockContext,i);
    }
};

HtmlDocumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterHtmlDocument(this);
	}
};

HtmlDocumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitHtmlDocument(this);
	}
};




PHPParser.HtmlDocumentContext = HtmlDocumentContext;

PHPParser.prototype.htmlDocument = function() {

    var localctx = new HtmlDocumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PHPParser.RULE_htmlDocument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        _la = this._input.LA(1);
        if(_la===PHPParser.Shebang) {
            this.state = 258;
            this.match(PHPParser.Shebang);
        }

        this.state = 264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PHPParser.HtmlText) | (1 << PHPParser.HtmlScriptOpen) | (1 << PHPParser.HtmlStyleOpen) | (1 << PHPParser.HtmlDtd) | (1 << PHPParser.HtmlOpen) | (1 << PHPParser.HtmlClose) | (1 << PHPParser.HtmlSlashClose) | (1 << PHPParser.HtmlSlash) | (1 << PHPParser.HtmlEquals) | (1 << PHPParser.HtmlStartQuoteString) | (1 << PHPParser.HtmlStartDoubleQuoteString) | (1 << PHPParser.HtmlHex) | (1 << PHPParser.HtmlDecimal) | (1 << PHPParser.HtmlName) | (1 << PHPParser.HtmlEndQuoteString) | (1 << PHPParser.HtmlQuoteString) | (1 << PHPParser.HtmlEndDoubleQuoteString) | (1 << PHPParser.HtmlDoubleQuoteString) | (1 << PHPParser.ScriptText))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PHPParser.ScriptClose - 32)) | (1 << (PHPParser.StyleBody - 32)) | (1 << (PHPParser.Abstract - 32)) | (1 << (PHPParser.Array - 32)) | (1 << (PHPParser.As - 32)) | (1 << (PHPParser.BinaryCast - 32)) | (1 << (PHPParser.BoolType - 32)) | (1 << (PHPParser.BooleanConstant - 32)) | (1 << (PHPParser.Break - 32)) | (1 << (PHPParser.Callable - 32)) | (1 << (PHPParser.Case - 32)) | (1 << (PHPParser.Catch - 32)) | (1 << (PHPParser.Class - 32)) | (1 << (PHPParser.Clone - 32)) | (1 << (PHPParser.Const - 32)) | (1 << (PHPParser.Continue - 32)) | (1 << (PHPParser.Declare - 32)) | (1 << (PHPParser.Default - 32)) | (1 << (PHPParser.Do - 32)) | (1 << (PHPParser.DoubleCast - 32)) | (1 << (PHPParser.DoubleType - 32)) | (1 << (PHPParser.Echo - 32)) | (1 << (PHPParser.Else - 32)) | (1 << (PHPParser.ElseIf - 32)) | (1 << (PHPParser.Empty - 32)) | (1 << (PHPParser.EndDeclare - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PHPParser.EndFor - 64)) | (1 << (PHPParser.EndForeach - 64)) | (1 << (PHPParser.EndIf - 64)) | (1 << (PHPParser.EndSwitch - 64)) | (1 << (PHPParser.EndWhile - 64)) | (1 << (PHPParser.Eval - 64)) | (1 << (PHPParser.Exit - 64)) | (1 << (PHPParser.Extends - 64)) | (1 << (PHPParser.Final - 64)) | (1 << (PHPParser.Finally - 64)) | (1 << (PHPParser.FloatCast - 64)) | (1 << (PHPParser.For - 64)) | (1 << (PHPParser.Foreach - 64)) | (1 << (PHPParser.Function - 64)) | (1 << (PHPParser.Global - 64)) | (1 << (PHPParser.Goto - 64)) | (1 << (PHPParser.If - 64)) | (1 << (PHPParser.Implements - 64)) | (1 << (PHPParser.Import - 64)) | (1 << (PHPParser.Include - 64)) | (1 << (PHPParser.IncludeOnce - 64)) | (1 << (PHPParser.InstanceOf - 64)) | (1 << (PHPParser.InsteadOf - 64)) | (1 << (PHPParser.Int8Cast - 64)) | (1 << (PHPParser.Int16Cast - 64)) | (1 << (PHPParser.Int64Type - 64)) | (1 << (PHPParser.IntType - 64)) | (1 << (PHPParser.Interface - 64)) | (1 << (PHPParser.IsSet - 64)) | (1 << (PHPParser.List - 64)) | (1 << (PHPParser.LogicalAnd - 64)) | (1 << (PHPParser.LogicalOr - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PHPParser.LogicalXor - 96)) | (1 << (PHPParser.Namespace - 96)) | (1 << (PHPParser.New - 96)) | (1 << (PHPParser.Null - 96)) | (1 << (PHPParser.ObjectType - 96)) | (1 << (PHPParser.Parent_ - 96)) | (1 << (PHPParser.Partial - 96)) | (1 << (PHPParser.Print - 96)) | (1 << (PHPParser.Private - 96)) | (1 << (PHPParser.Protected - 96)) | (1 << (PHPParser.Public - 96)) | (1 << (PHPParser.Require - 96)) | (1 << (PHPParser.RequireOnce - 96)) | (1 << (PHPParser.Resource - 96)) | (1 << (PHPParser.Return - 96)) | (1 << (PHPParser.Static - 96)) | (1 << (PHPParser.StringType - 96)) | (1 << (PHPParser.Switch - 96)) | (1 << (PHPParser.Throw - 96)) | (1 << (PHPParser.Trait - 96)) | (1 << (PHPParser.Try - 96)) | (1 << (PHPParser.Typeof - 96)) | (1 << (PHPParser.UintCast - 96)) | (1 << (PHPParser.UnicodeCast - 96)) | (1 << (PHPParser.Unset - 96)) | (1 << (PHPParser.Use - 96)) | (1 << (PHPParser.Var - 96)) | (1 << (PHPParser.While - 96)) | (1 << (PHPParser.Yield - 96)) | (1 << (PHPParser.Get - 96)) | (1 << (PHPParser.Set - 96)) | (1 << (PHPParser.Call - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (PHPParser.CallStatic - 128)) | (1 << (PHPParser.Constructor - 128)) | (1 << (PHPParser.Destruct - 128)) | (1 << (PHPParser.Wakeup - 128)) | (1 << (PHPParser.Sleep - 128)) | (1 << (PHPParser.Autoload - 128)) | (1 << (PHPParser.IsSet__ - 128)) | (1 << (PHPParser.Unset__ - 128)) | (1 << (PHPParser.ToString__ - 128)) | (1 << (PHPParser.Invoke - 128)) | (1 << (PHPParser.SetState - 128)) | (1 << (PHPParser.Clone__ - 128)) | (1 << (PHPParser.DebugInfo - 128)) | (1 << (PHPParser.Namespace__ - 128)) | (1 << (PHPParser.Class__ - 128)) | (1 << (PHPParser.Traic__ - 128)) | (1 << (PHPParser.Function__ - 128)) | (1 << (PHPParser.Method__ - 128)) | (1 << (PHPParser.Line__ - 128)) | (1 << (PHPParser.File__ - 128)) | (1 << (PHPParser.Dir__ - 128)) | (1 << (PHPParser.Inc - 128)) | (1 << (PHPParser.Dec - 128)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.OpenCurlyBracket - 179)) | (1 << (PHPParser.SemiColon - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
            this.state = 261;
            this.htmlElementOrPhpBlock();
            this.state = 266;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 267;
        this.match(PHPParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HtmlElementOrPhpBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_htmlElementOrPhpBlock;
    return this;
}

HtmlElementOrPhpBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlElementOrPhpBlockContext.prototype.constructor = HtmlElementOrPhpBlockContext;

HtmlElementOrPhpBlockContext.prototype.htmlElements = function() {
    return this.getTypedRuleContext(HtmlElementsContext,0);
};

HtmlElementOrPhpBlockContext.prototype.phpBlock = function() {
    return this.getTypedRuleContext(PhpBlockContext,0);
};

HtmlElementOrPhpBlockContext.prototype.scriptTextPart = function() {
    return this.getTypedRuleContext(ScriptTextPartContext,0);
};

HtmlElementOrPhpBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterHtmlElementOrPhpBlock(this);
	}
};

HtmlElementOrPhpBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitHtmlElementOrPhpBlock(this);
	}
};




PHPParser.HtmlElementOrPhpBlockContext = HtmlElementOrPhpBlockContext;

PHPParser.prototype.htmlElementOrPhpBlock = function() {

    var localctx = new HtmlElementOrPhpBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PHPParser.RULE_htmlElementOrPhpBlock);
    try {
        this.state = 272;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 269;
            this.htmlElements();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 270;
            this.phpBlock();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 271;
            this.scriptTextPart();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HtmlElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_htmlElements;
    return this;
}

HtmlElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlElementsContext.prototype.constructor = HtmlElementsContext;

HtmlElementsContext.prototype.htmlElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HtmlElementContext);
    } else {
        return this.getTypedRuleContext(HtmlElementContext,i);
    }
};

HtmlElementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterHtmlElements(this);
	}
};

HtmlElementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitHtmlElements(this);
	}
};




PHPParser.HtmlElementsContext = HtmlElementsContext;

PHPParser.prototype.htmlElements = function() {

    var localctx = new HtmlElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PHPParser.RULE_htmlElements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 275; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 274;
        		this.htmlElement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 277; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,3, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HtmlElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_htmlElement;
    return this;
}

HtmlElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HtmlElementContext.prototype.constructor = HtmlElementContext;

HtmlElementContext.prototype.HtmlDtd = function() {
    return this.getToken(PHPParser.HtmlDtd, 0);
};

HtmlElementContext.prototype.HtmlScriptOpen = function() {
    return this.getToken(PHPParser.HtmlScriptOpen, 0);
};

HtmlElementContext.prototype.HtmlClose = function() {
    return this.getToken(PHPParser.HtmlClose, 0);
};

HtmlElementContext.prototype.HtmlStyleOpen = function() {
    return this.getToken(PHPParser.HtmlStyleOpen, 0);
};

HtmlElementContext.prototype.HtmlOpen = function() {
    return this.getToken(PHPParser.HtmlOpen, 0);
};

HtmlElementContext.prototype.HtmlName = function() {
    return this.getToken(PHPParser.HtmlName, 0);
};

HtmlElementContext.prototype.HtmlSlashClose = function() {
    return this.getToken(PHPParser.HtmlSlashClose, 0);
};

HtmlElementContext.prototype.HtmlSlash = function() {
    return this.getToken(PHPParser.HtmlSlash, 0);
};

HtmlElementContext.prototype.HtmlText = function() {
    return this.getToken(PHPParser.HtmlText, 0);
};

HtmlElementContext.prototype.HtmlEquals = function() {
    return this.getToken(PHPParser.HtmlEquals, 0);
};

HtmlElementContext.prototype.HtmlStartQuoteString = function() {
    return this.getToken(PHPParser.HtmlStartQuoteString, 0);
};

HtmlElementContext.prototype.HtmlEndQuoteString = function() {
    return this.getToken(PHPParser.HtmlEndQuoteString, 0);
};

HtmlElementContext.prototype.HtmlStartDoubleQuoteString = function() {
    return this.getToken(PHPParser.HtmlStartDoubleQuoteString, 0);
};

HtmlElementContext.prototype.HtmlEndDoubleQuoteString = function() {
    return this.getToken(PHPParser.HtmlEndDoubleQuoteString, 0);
};

HtmlElementContext.prototype.HtmlHex = function() {
    return this.getToken(PHPParser.HtmlHex, 0);
};

HtmlElementContext.prototype.HtmlDecimal = function() {
    return this.getToken(PHPParser.HtmlDecimal, 0);
};

HtmlElementContext.prototype.HtmlQuoteString = function() {
    return this.getToken(PHPParser.HtmlQuoteString, 0);
};

HtmlElementContext.prototype.HtmlDoubleQuoteString = function() {
    return this.getToken(PHPParser.HtmlDoubleQuoteString, 0);
};

HtmlElementContext.prototype.StyleBody = function() {
    return this.getToken(PHPParser.StyleBody, 0);
};

HtmlElementContext.prototype.ScriptClose = function() {
    return this.getToken(PHPParser.ScriptClose, 0);
};

HtmlElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterHtmlElement(this);
	}
};

HtmlElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitHtmlElement(this);
	}
};




PHPParser.HtmlElementContext = HtmlElementContext;

PHPParser.prototype.htmlElement = function() {

    var localctx = new HtmlElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PHPParser.RULE_htmlElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 279;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PHPParser.HtmlText) | (1 << PHPParser.HtmlScriptOpen) | (1 << PHPParser.HtmlStyleOpen) | (1 << PHPParser.HtmlDtd) | (1 << PHPParser.HtmlOpen) | (1 << PHPParser.HtmlClose) | (1 << PHPParser.HtmlSlashClose) | (1 << PHPParser.HtmlSlash) | (1 << PHPParser.HtmlEquals) | (1 << PHPParser.HtmlStartQuoteString) | (1 << PHPParser.HtmlStartDoubleQuoteString) | (1 << PHPParser.HtmlHex) | (1 << PHPParser.HtmlDecimal) | (1 << PHPParser.HtmlName) | (1 << PHPParser.HtmlEndQuoteString) | (1 << PHPParser.HtmlQuoteString) | (1 << PHPParser.HtmlEndDoubleQuoteString) | (1 << PHPParser.HtmlDoubleQuoteString))) !== 0) || _la===PHPParser.ScriptClose || _la===PHPParser.StyleBody)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScriptTextPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_scriptTextPart;
    return this;
}

ScriptTextPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScriptTextPartContext.prototype.constructor = ScriptTextPartContext;

ScriptTextPartContext.prototype.ScriptText = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PHPParser.ScriptText);
    } else {
        return this.getToken(PHPParser.ScriptText, i);
    }
};


ScriptTextPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterScriptTextPart(this);
	}
};

ScriptTextPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitScriptTextPart(this);
	}
};




PHPParser.ScriptTextPartContext = ScriptTextPartContext;

PHPParser.prototype.scriptTextPart = function() {

    var localctx = new ScriptTextPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PHPParser.RULE_scriptTextPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 282; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 281;
        		this.match(PHPParser.ScriptText);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 284; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PhpBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_phpBlock;
    return this;
}

PhpBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PhpBlockContext.prototype.constructor = PhpBlockContext;

PhpBlockContext.prototype.importStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportStatementContext);
    } else {
        return this.getTypedRuleContext(ImportStatementContext,i);
    }
};

PhpBlockContext.prototype.topStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopStatementContext);
    } else {
        return this.getTypedRuleContext(TopStatementContext,i);
    }
};

PhpBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterPhpBlock(this);
	}
};

PhpBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitPhpBlock(this);
	}
};




PHPParser.PhpBlockContext = PhpBlockContext;

PHPParser.prototype.phpBlock = function() {

    var localctx = new PhpBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PHPParser.RULE_phpBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 289;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 286;
                this.importStatement(); 
            }
            this.state = 291;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

        this.state = 293; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 292;
        		this.topStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 295; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,6, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_importStatement;
    return this;
}

ImportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportStatementContext.prototype.constructor = ImportStatementContext;

ImportStatementContext.prototype.Import = function() {
    return this.getToken(PHPParser.Import, 0);
};

ImportStatementContext.prototype.Namespace = function() {
    return this.getToken(PHPParser.Namespace, 0);
};

ImportStatementContext.prototype.namespaceNameList = function() {
    return this.getTypedRuleContext(NamespaceNameListContext,0);
};

ImportStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterImportStatement(this);
	}
};

ImportStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitImportStatement(this);
	}
};




PHPParser.ImportStatementContext = ImportStatementContext;

PHPParser.prototype.importStatement = function() {

    var localctx = new ImportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PHPParser.RULE_importStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 297;
        this.match(PHPParser.Import);
        this.state = 298;
        this.match(PHPParser.Namespace);
        this.state = 299;
        this.namespaceNameList();
        this.state = 300;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_topStatement;
    return this;
}

TopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopStatementContext.prototype.constructor = TopStatementContext;

TopStatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

TopStatementContext.prototype.nonEmptyStatement = function() {
    return this.getTypedRuleContext(NonEmptyStatementContext,0);
};

TopStatementContext.prototype.useDeclaration = function() {
    return this.getTypedRuleContext(UseDeclarationContext,0);
};

TopStatementContext.prototype.namespaceDeclaration = function() {
    return this.getTypedRuleContext(NamespaceDeclarationContext,0);
};

TopStatementContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

TopStatementContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

TopStatementContext.prototype.globalConstantDeclaration = function() {
    return this.getTypedRuleContext(GlobalConstantDeclarationContext,0);
};

TopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTopStatement(this);
	}
};

TopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTopStatement(this);
	}
};




PHPParser.TopStatementContext = TopStatementContext;

PHPParser.prototype.topStatement = function() {

    var localctx = new TopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PHPParser.RULE_topStatement);
    try {
        this.state = 309;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 302;
            this.emptyStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 303;
            this.nonEmptyStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 304;
            this.useDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 305;
            this.namespaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 306;
            this.functionDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 307;
            this.classDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 308;
            this.globalConstantDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UseDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_useDeclaration;
    return this;
}

UseDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseDeclarationContext.prototype.constructor = UseDeclarationContext;

UseDeclarationContext.prototype.Use = function() {
    return this.getToken(PHPParser.Use, 0);
};

UseDeclarationContext.prototype.useDeclarationContentList = function() {
    return this.getTypedRuleContext(UseDeclarationContentListContext,0);
};

UseDeclarationContext.prototype.Function = function() {
    return this.getToken(PHPParser.Function, 0);
};

UseDeclarationContext.prototype.Const = function() {
    return this.getToken(PHPParser.Const, 0);
};

UseDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterUseDeclaration(this);
	}
};

UseDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitUseDeclaration(this);
	}
};




PHPParser.UseDeclarationContext = UseDeclarationContext;

PHPParser.prototype.useDeclaration = function() {

    var localctx = new UseDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PHPParser.RULE_useDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 311;
        this.match(PHPParser.Use);
        this.state = 313;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        if(la_===1) {
            this.state = 312;
            _la = this._input.LA(1);
            if(!(_la===PHPParser.Const || _la===PHPParser.Function)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }

        }
        this.state = 315;
        this.useDeclarationContentList();
        this.state = 316;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UseDeclarationContentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_useDeclarationContentList;
    return this;
}

UseDeclarationContentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseDeclarationContentListContext.prototype.constructor = UseDeclarationContentListContext;

UseDeclarationContentListContext.prototype.useDeclarationContent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UseDeclarationContentContext);
    } else {
        return this.getTypedRuleContext(UseDeclarationContentContext,i);
    }
};

UseDeclarationContentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterUseDeclarationContentList(this);
	}
};

UseDeclarationContentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitUseDeclarationContentList(this);
	}
};




PHPParser.UseDeclarationContentListContext = UseDeclarationContentListContext;

PHPParser.prototype.useDeclarationContentList = function() {

    var localctx = new UseDeclarationContentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PHPParser.RULE_useDeclarationContentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        _la = this._input.LA(1);
        if(_la===PHPParser.NamespaceSeparator) {
            this.state = 318;
            this.match(PHPParser.NamespaceSeparator);
        }

        this.state = 321;
        this.useDeclarationContent();
        this.state = 329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 322;
            this.match(PHPParser.Comma);
            this.state = 324;
            _la = this._input.LA(1);
            if(_la===PHPParser.NamespaceSeparator) {
                this.state = 323;
                this.match(PHPParser.NamespaceSeparator);
            }

            this.state = 326;
            this.useDeclarationContent();
            this.state = 331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UseDeclarationContentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_useDeclarationContent;
    return this;
}

UseDeclarationContentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseDeclarationContentContext.prototype.constructor = UseDeclarationContentContext;

UseDeclarationContentContext.prototype.namespaceNameList = function() {
    return this.getTypedRuleContext(NamespaceNameListContext,0);
};

UseDeclarationContentContext.prototype.As = function() {
    return this.getToken(PHPParser.As, 0);
};

UseDeclarationContentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

UseDeclarationContentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterUseDeclarationContent(this);
	}
};

UseDeclarationContentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitUseDeclarationContent(this);
	}
};




PHPParser.UseDeclarationContentContext = UseDeclarationContentContext;

PHPParser.prototype.useDeclarationContent = function() {

    var localctx = new UseDeclarationContentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PHPParser.RULE_useDeclarationContent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.namespaceNameList();
        this.state = 335;
        _la = this._input.LA(1);
        if(_la===PHPParser.As) {
            this.state = 333;
            this.match(PHPParser.As);
            this.state = 334;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_namespaceDeclaration;
    return this;
}

NamespaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceDeclarationContext.prototype.constructor = NamespaceDeclarationContext;

NamespaceDeclarationContext.prototype.Namespace = function() {
    return this.getToken(PHPParser.Namespace, 0);
};

NamespaceDeclarationContext.prototype.OpenCurlyBracket = function() {
    return this.getToken(PHPParser.OpenCurlyBracket, 0);
};

NamespaceDeclarationContext.prototype.namespaceNameList = function() {
    return this.getTypedRuleContext(NamespaceNameListContext,0);
};

NamespaceDeclarationContext.prototype.namespaceStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamespaceStatementContext);
    } else {
        return this.getTypedRuleContext(NamespaceStatementContext,i);
    }
};

NamespaceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterNamespaceDeclaration(this);
	}
};

NamespaceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitNamespaceDeclaration(this);
	}
};




PHPParser.NamespaceDeclarationContext = NamespaceDeclarationContext;

PHPParser.prototype.namespaceDeclaration = function() {

    var localctx = new NamespaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PHPParser.RULE_namespaceDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this.match(PHPParser.Namespace);
        this.state = 352;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.state = 339;
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || _la===PHPParser.Label) {
                this.state = 338;
                this.namespaceNameList();
            }

            this.state = 341;
            this.match(PHPParser.OpenCurlyBracket);
            this.state = 345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PHPParser.HtmlText) | (1 << PHPParser.HtmlScriptOpen) | (1 << PHPParser.HtmlStyleOpen) | (1 << PHPParser.HtmlDtd) | (1 << PHPParser.HtmlOpen) | (1 << PHPParser.HtmlClose) | (1 << PHPParser.HtmlSlashClose) | (1 << PHPParser.HtmlSlash) | (1 << PHPParser.HtmlEquals) | (1 << PHPParser.HtmlStartQuoteString) | (1 << PHPParser.HtmlStartDoubleQuoteString) | (1 << PHPParser.HtmlHex) | (1 << PHPParser.HtmlDecimal) | (1 << PHPParser.HtmlName) | (1 << PHPParser.HtmlEndQuoteString) | (1 << PHPParser.HtmlQuoteString) | (1 << PHPParser.HtmlEndDoubleQuoteString) | (1 << PHPParser.HtmlDoubleQuoteString) | (1 << PHPParser.ScriptText))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PHPParser.ScriptClose - 32)) | (1 << (PHPParser.StyleBody - 32)) | (1 << (PHPParser.Abstract - 32)) | (1 << (PHPParser.Array - 32)) | (1 << (PHPParser.As - 32)) | (1 << (PHPParser.BinaryCast - 32)) | (1 << (PHPParser.BoolType - 32)) | (1 << (PHPParser.BooleanConstant - 32)) | (1 << (PHPParser.Break - 32)) | (1 << (PHPParser.Callable - 32)) | (1 << (PHPParser.Case - 32)) | (1 << (PHPParser.Catch - 32)) | (1 << (PHPParser.Class - 32)) | (1 << (PHPParser.Clone - 32)) | (1 << (PHPParser.Const - 32)) | (1 << (PHPParser.Continue - 32)) | (1 << (PHPParser.Declare - 32)) | (1 << (PHPParser.Default - 32)) | (1 << (PHPParser.Do - 32)) | (1 << (PHPParser.DoubleCast - 32)) | (1 << (PHPParser.DoubleType - 32)) | (1 << (PHPParser.Echo - 32)) | (1 << (PHPParser.Else - 32)) | (1 << (PHPParser.ElseIf - 32)) | (1 << (PHPParser.Empty - 32)) | (1 << (PHPParser.EndDeclare - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PHPParser.EndFor - 64)) | (1 << (PHPParser.EndForeach - 64)) | (1 << (PHPParser.EndIf - 64)) | (1 << (PHPParser.EndSwitch - 64)) | (1 << (PHPParser.EndWhile - 64)) | (1 << (PHPParser.Eval - 64)) | (1 << (PHPParser.Exit - 64)) | (1 << (PHPParser.Extends - 64)) | (1 << (PHPParser.Final - 64)) | (1 << (PHPParser.Finally - 64)) | (1 << (PHPParser.FloatCast - 64)) | (1 << (PHPParser.For - 64)) | (1 << (PHPParser.Foreach - 64)) | (1 << (PHPParser.Function - 64)) | (1 << (PHPParser.Global - 64)) | (1 << (PHPParser.Goto - 64)) | (1 << (PHPParser.If - 64)) | (1 << (PHPParser.Implements - 64)) | (1 << (PHPParser.Import - 64)) | (1 << (PHPParser.Include - 64)) | (1 << (PHPParser.IncludeOnce - 64)) | (1 << (PHPParser.InstanceOf - 64)) | (1 << (PHPParser.InsteadOf - 64)) | (1 << (PHPParser.Int8Cast - 64)) | (1 << (PHPParser.Int16Cast - 64)) | (1 << (PHPParser.Int64Type - 64)) | (1 << (PHPParser.IntType - 64)) | (1 << (PHPParser.Interface - 64)) | (1 << (PHPParser.IsSet - 64)) | (1 << (PHPParser.List - 64)) | (1 << (PHPParser.LogicalAnd - 64)) | (1 << (PHPParser.LogicalOr - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PHPParser.LogicalXor - 96)) | (1 << (PHPParser.Namespace - 96)) | (1 << (PHPParser.New - 96)) | (1 << (PHPParser.Null - 96)) | (1 << (PHPParser.ObjectType - 96)) | (1 << (PHPParser.Parent_ - 96)) | (1 << (PHPParser.Partial - 96)) | (1 << (PHPParser.Print - 96)) | (1 << (PHPParser.Private - 96)) | (1 << (PHPParser.Protected - 96)) | (1 << (PHPParser.Public - 96)) | (1 << (PHPParser.Require - 96)) | (1 << (PHPParser.RequireOnce - 96)) | (1 << (PHPParser.Resource - 96)) | (1 << (PHPParser.Return - 96)) | (1 << (PHPParser.Static - 96)) | (1 << (PHPParser.StringType - 96)) | (1 << (PHPParser.Switch - 96)) | (1 << (PHPParser.Throw - 96)) | (1 << (PHPParser.Trait - 96)) | (1 << (PHPParser.Try - 96)) | (1 << (PHPParser.Typeof - 96)) | (1 << (PHPParser.UintCast - 96)) | (1 << (PHPParser.UnicodeCast - 96)) | (1 << (PHPParser.Unset - 96)) | (1 << (PHPParser.Use - 96)) | (1 << (PHPParser.Var - 96)) | (1 << (PHPParser.While - 96)) | (1 << (PHPParser.Yield - 96)) | (1 << (PHPParser.Get - 96)) | (1 << (PHPParser.Set - 96)) | (1 << (PHPParser.Call - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (PHPParser.CallStatic - 128)) | (1 << (PHPParser.Constructor - 128)) | (1 << (PHPParser.Destruct - 128)) | (1 << (PHPParser.Wakeup - 128)) | (1 << (PHPParser.Sleep - 128)) | (1 << (PHPParser.Autoload - 128)) | (1 << (PHPParser.IsSet__ - 128)) | (1 << (PHPParser.Unset__ - 128)) | (1 << (PHPParser.ToString__ - 128)) | (1 << (PHPParser.Invoke - 128)) | (1 << (PHPParser.SetState - 128)) | (1 << (PHPParser.Clone__ - 128)) | (1 << (PHPParser.DebugInfo - 128)) | (1 << (PHPParser.Namespace__ - 128)) | (1 << (PHPParser.Class__ - 128)) | (1 << (PHPParser.Traic__ - 128)) | (1 << (PHPParser.Function__ - 128)) | (1 << (PHPParser.Method__ - 128)) | (1 << (PHPParser.Line__ - 128)) | (1 << (PHPParser.File__ - 128)) | (1 << (PHPParser.Dir__ - 128)) | (1 << (PHPParser.Inc - 128)) | (1 << (PHPParser.Dec - 128)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.OpenCurlyBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
                this.state = 342;
                this.namespaceStatement();
                this.state = 347;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 348;
            this.match(PHPParser.CloseCurlyBracket);
            break;

        case 2:
            this.state = 349;
            this.namespaceNameList();
            this.state = 350;
            this.match(PHPParser.SemiColon);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_namespaceStatement;
    return this;
}

NamespaceStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceStatementContext.prototype.constructor = NamespaceStatementContext;

NamespaceStatementContext.prototype.nonEmptyStatement = function() {
    return this.getTypedRuleContext(NonEmptyStatementContext,0);
};

NamespaceStatementContext.prototype.useDeclaration = function() {
    return this.getTypedRuleContext(UseDeclarationContext,0);
};

NamespaceStatementContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

NamespaceStatementContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

NamespaceStatementContext.prototype.globalConstantDeclaration = function() {
    return this.getTypedRuleContext(GlobalConstantDeclarationContext,0);
};

NamespaceStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterNamespaceStatement(this);
	}
};

NamespaceStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitNamespaceStatement(this);
	}
};




PHPParser.NamespaceStatementContext = NamespaceStatementContext;

PHPParser.prototype.namespaceStatement = function() {

    var localctx = new NamespaceStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PHPParser.RULE_namespaceStatement);
    try {
        this.state = 359;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 354;
            this.nonEmptyStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 355;
            this.useDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 356;
            this.functionDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 357;
            this.classDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 358;
            this.globalConstantDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

FunctionDeclarationContext.prototype.Function = function() {
    return this.getToken(PHPParser.Function, 0);
};

FunctionDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDeclarationContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FunctionDeclarationContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

FunctionDeclarationContext.prototype.typeParameterListInBrackets = function() {
    return this.getTypedRuleContext(TypeParameterListInBracketsContext,0);
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitFunctionDeclaration(this);
	}
};




PHPParser.FunctionDeclarationContext = FunctionDeclarationContext;

PHPParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PHPParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 361;
        this.attributes();
        this.state = 362;
        this.match(PHPParser.Function);
        this.state = 364;
        _la = this._input.LA(1);
        if(_la===PHPParser.Ampersand) {
            this.state = 363;
            this.match(PHPParser.Ampersand);
        }

        this.state = 366;
        this.identifier();
        this.state = 368;
        _la = this._input.LA(1);
        if(_la===PHPParser.Lgeneric) {
            this.state = 367;
            this.typeParameterListInBrackets();
        }

        this.state = 370;
        this.match(PHPParser.OpenRoundBracket);
        this.state = 371;
        this.formalParameterList();
        this.state = 372;
        this.match(PHPParser.CloseRoundBracket);
        this.state = 373;
        this.blockStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

ClassDeclarationContext.prototype.OpenCurlyBracket = function() {
    return this.getToken(PHPParser.OpenCurlyBracket, 0);
};

ClassDeclarationContext.prototype.classEntryType = function() {
    return this.getTypedRuleContext(ClassEntryTypeContext,0);
};

ClassDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassDeclarationContext.prototype.Interface = function() {
    return this.getToken(PHPParser.Interface, 0);
};

ClassDeclarationContext.prototype.Private = function() {
    return this.getToken(PHPParser.Private, 0);
};

ClassDeclarationContext.prototype.modifier = function() {
    return this.getTypedRuleContext(ModifierContext,0);
};

ClassDeclarationContext.prototype.Partial = function() {
    return this.getToken(PHPParser.Partial, 0);
};

ClassDeclarationContext.prototype.classStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassStatementContext);
    } else {
        return this.getTypedRuleContext(ClassStatementContext,i);
    }
};

ClassDeclarationContext.prototype.typeParameterListInBrackets = function() {
    return this.getTypedRuleContext(TypeParameterListInBracketsContext,0);
};

ClassDeclarationContext.prototype.Extends = function() {
    return this.getToken(PHPParser.Extends, 0);
};

ClassDeclarationContext.prototype.qualifiedStaticTypeRef = function() {
    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
};

ClassDeclarationContext.prototype.Implements = function() {
    return this.getToken(PHPParser.Implements, 0);
};

ClassDeclarationContext.prototype.interfaceList = function() {
    return this.getTypedRuleContext(InterfaceListContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitClassDeclaration(this);
	}
};




PHPParser.ClassDeclarationContext = ClassDeclarationContext;

PHPParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PHPParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 375;
        this.attributes();
        this.state = 377;
        _la = this._input.LA(1);
        if(_la===PHPParser.Private) {
            this.state = 376;
            this.match(PHPParser.Private);
        }

        this.state = 380;
        _la = this._input.LA(1);
        if(_la===PHPParser.Abstract || _la===PHPParser.Final) {
            this.state = 379;
            this.modifier();
        }

        this.state = 383;
        _la = this._input.LA(1);
        if(_la===PHPParser.Partial) {
            this.state = 382;
            this.match(PHPParser.Partial);
        }

        this.state = 407;
        switch(this._input.LA(1)) {
        case PHPParser.Class:
        case PHPParser.Trait:
            this.state = 385;
            this.classEntryType();
            this.state = 386;
            this.identifier();
            this.state = 388;
            _la = this._input.LA(1);
            if(_la===PHPParser.Lgeneric) {
                this.state = 387;
                this.typeParameterListInBrackets();
            }

            this.state = 392;
            _la = this._input.LA(1);
            if(_la===PHPParser.Extends) {
                this.state = 390;
                this.match(PHPParser.Extends);
                this.state = 391;
                this.qualifiedStaticTypeRef();
            }

            this.state = 396;
            _la = this._input.LA(1);
            if(_la===PHPParser.Implements) {
                this.state = 394;
                this.match(PHPParser.Implements);
                this.state = 395;
                this.interfaceList();
            }

            break;
        case PHPParser.Interface:
            this.state = 398;
            this.match(PHPParser.Interface);
            this.state = 399;
            this.identifier();
            this.state = 401;
            _la = this._input.LA(1);
            if(_la===PHPParser.Lgeneric) {
                this.state = 400;
                this.typeParameterListInBrackets();
            }

            this.state = 405;
            _la = this._input.LA(1);
            if(_la===PHPParser.Extends) {
                this.state = 403;
                this.match(PHPParser.Extends);
                this.state = 404;
                this.interfaceList();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 409;
        this.match(PHPParser.OpenCurlyBracket);
        this.state = 413;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Abstract || _la===PHPParser.Const || _la===PHPParser.Final || _la===PHPParser.Function || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)))) !== 0) || _la===PHPParser.OpenSquareBracket) {
            this.state = 410;
            this.classStatement();
            this.state = 415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 416;
        this.match(PHPParser.CloseCurlyBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassEntryTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_classEntryType;
    return this;
}

ClassEntryTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassEntryTypeContext.prototype.constructor = ClassEntryTypeContext;

ClassEntryTypeContext.prototype.Class = function() {
    return this.getToken(PHPParser.Class, 0);
};

ClassEntryTypeContext.prototype.Trait = function() {
    return this.getToken(PHPParser.Trait, 0);
};

ClassEntryTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterClassEntryType(this);
	}
};

ClassEntryTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitClassEntryType(this);
	}
};




PHPParser.ClassEntryTypeContext = ClassEntryTypeContext;

PHPParser.prototype.classEntryType = function() {

    var localctx = new ClassEntryTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PHPParser.RULE_classEntryType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 418;
        _la = this._input.LA(1);
        if(!(_la===PHPParser.Class || _la===PHPParser.Trait)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_interfaceList;
    return this;
}

InterfaceListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceListContext.prototype.constructor = InterfaceListContext;

InterfaceListContext.prototype.qualifiedStaticTypeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedStaticTypeRefContext);
    } else {
        return this.getTypedRuleContext(QualifiedStaticTypeRefContext,i);
    }
};

InterfaceListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterInterfaceList(this);
	}
};

InterfaceListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitInterfaceList(this);
	}
};




PHPParser.InterfaceListContext = InterfaceListContext;

PHPParser.prototype.interfaceList = function() {

    var localctx = new InterfaceListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PHPParser.RULE_interfaceList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 420;
        this.qualifiedStaticTypeRef();
        this.state = 425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 421;
            this.match(PHPParser.Comma);
            this.state = 422;
            this.qualifiedStaticTypeRef();
            this.state = 427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterListInBracketsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_typeParameterListInBrackets;
    return this;
}

TypeParameterListInBracketsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterListInBracketsContext.prototype.constructor = TypeParameterListInBracketsContext;

TypeParameterListInBracketsContext.prototype.typeParameterList = function() {
    return this.getTypedRuleContext(TypeParameterListContext,0);
};

TypeParameterListInBracketsContext.prototype.typeParameterWithDefaultsList = function() {
    return this.getTypedRuleContext(TypeParameterWithDefaultsListContext,0);
};

TypeParameterListInBracketsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTypeParameterListInBrackets(this);
	}
};

TypeParameterListInBracketsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTypeParameterListInBrackets(this);
	}
};




PHPParser.TypeParameterListInBracketsContext = TypeParameterListInBracketsContext;

PHPParser.prototype.typeParameterListInBrackets = function() {

    var localctx = new TypeParameterListInBracketsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PHPParser.RULE_typeParameterListInBrackets);
    try {
        this.state = 442;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 428;
            this.match(PHPParser.Lgeneric);
            this.state = 429;
            this.typeParameterList();
            this.state = 430;
            this.match(PHPParser.Rgeneric);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 432;
            this.match(PHPParser.Lgeneric);
            this.state = 433;
            this.typeParameterWithDefaultsList();
            this.state = 434;
            this.match(PHPParser.Rgeneric);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 436;
            this.match(PHPParser.Lgeneric);
            this.state = 437;
            this.typeParameterList();
            this.state = 438;
            this.match(PHPParser.Comma);
            this.state = 439;
            this.typeParameterWithDefaultsList();
            this.state = 440;
            this.match(PHPParser.Rgeneric);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_typeParameterList;
    return this;
}

TypeParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterListContext.prototype.constructor = TypeParameterListContext;

TypeParameterListContext.prototype.typeParameterDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterDeclContext);
    } else {
        return this.getTypedRuleContext(TypeParameterDeclContext,i);
    }
};

TypeParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTypeParameterList(this);
	}
};

TypeParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTypeParameterList(this);
	}
};




PHPParser.TypeParameterListContext = TypeParameterListContext;

PHPParser.prototype.typeParameterList = function() {

    var localctx = new TypeParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PHPParser.RULE_typeParameterList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 444;
        this.typeParameterDecl();
        this.state = 449;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 445;
                this.match(PHPParser.Comma);
                this.state = 446;
                this.typeParameterDecl(); 
            }
            this.state = 451;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterWithDefaultsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_typeParameterWithDefaultsList;
    return this;
}

TypeParameterWithDefaultsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterWithDefaultsListContext.prototype.constructor = TypeParameterWithDefaultsListContext;

TypeParameterWithDefaultsListContext.prototype.typeParameterWithDefaultDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterWithDefaultDeclContext);
    } else {
        return this.getTypedRuleContext(TypeParameterWithDefaultDeclContext,i);
    }
};

TypeParameterWithDefaultsListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTypeParameterWithDefaultsList(this);
	}
};

TypeParameterWithDefaultsListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTypeParameterWithDefaultsList(this);
	}
};




PHPParser.TypeParameterWithDefaultsListContext = TypeParameterWithDefaultsListContext;

PHPParser.prototype.typeParameterWithDefaultsList = function() {

    var localctx = new TypeParameterWithDefaultsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PHPParser.RULE_typeParameterWithDefaultsList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 452;
        this.typeParameterWithDefaultDecl();
        this.state = 457;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 453;
            this.match(PHPParser.Comma);
            this.state = 454;
            this.typeParameterWithDefaultDecl();
            this.state = 459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_typeParameterDecl;
    return this;
}

TypeParameterDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterDeclContext.prototype.constructor = TypeParameterDeclContext;

TypeParameterDeclContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

TypeParameterDeclContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeParameterDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTypeParameterDecl(this);
	}
};

TypeParameterDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTypeParameterDecl(this);
	}
};




PHPParser.TypeParameterDeclContext = TypeParameterDeclContext;

PHPParser.prototype.typeParameterDecl = function() {

    var localctx = new TypeParameterDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PHPParser.RULE_typeParameterDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 460;
        this.attributes();
        this.state = 461;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterWithDefaultDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_typeParameterWithDefaultDecl;
    return this;
}

TypeParameterWithDefaultDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterWithDefaultDeclContext.prototype.constructor = TypeParameterWithDefaultDeclContext;

TypeParameterWithDefaultDeclContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

TypeParameterWithDefaultDeclContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeParameterWithDefaultDeclContext.prototype.Eq = function() {
    return this.getToken(PHPParser.Eq, 0);
};

TypeParameterWithDefaultDeclContext.prototype.qualifiedStaticTypeRef = function() {
    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
};

TypeParameterWithDefaultDeclContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

TypeParameterWithDefaultDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTypeParameterWithDefaultDecl(this);
	}
};

TypeParameterWithDefaultDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTypeParameterWithDefaultDecl(this);
	}
};




PHPParser.TypeParameterWithDefaultDeclContext = TypeParameterWithDefaultDeclContext;

PHPParser.prototype.typeParameterWithDefaultDecl = function() {

    var localctx = new TypeParameterWithDefaultDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, PHPParser.RULE_typeParameterWithDefaultDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 463;
        this.attributes();
        this.state = 464;
        this.identifier();
        this.state = 465;
        this.match(PHPParser.Eq);
        this.state = 468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.state = 466;
            this.qualifiedStaticTypeRef();
            break;

        case 2:
            this.state = 467;
            this.primitiveType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericDynamicArgsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_genericDynamicArgs;
    return this;
}

GenericDynamicArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericDynamicArgsContext.prototype.constructor = GenericDynamicArgsContext;

GenericDynamicArgsContext.prototype.typeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeRefContext);
    } else {
        return this.getTypedRuleContext(TypeRefContext,i);
    }
};

GenericDynamicArgsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterGenericDynamicArgs(this);
	}
};

GenericDynamicArgsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitGenericDynamicArgs(this);
	}
};




PHPParser.GenericDynamicArgsContext = GenericDynamicArgsContext;

PHPParser.prototype.genericDynamicArgs = function() {

    var localctx = new GenericDynamicArgsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PHPParser.RULE_genericDynamicArgs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 470;
        this.match(PHPParser.Lgeneric);
        this.state = 471;
        this.typeRef();
        this.state = 476;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 472;
            this.match(PHPParser.Comma);
            this.state = 473;
            this.typeRef();
            this.state = 478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 479;
        this.match(PHPParser.Rgeneric);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_attributes;
    return this;
}

AttributesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributesContext.prototype.constructor = AttributesContext;

AttributesContext.prototype.attributesGroup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributesGroupContext);
    } else {
        return this.getTypedRuleContext(AttributesGroupContext,i);
    }
};

AttributesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAttributes(this);
	}
};

AttributesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAttributes(this);
	}
};




PHPParser.AttributesContext = AttributesContext;

PHPParser.prototype.attributes = function() {

    var localctx = new AttributesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PHPParser.RULE_attributes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.OpenSquareBracket) {
            this.state = 481;
            this.attributesGroup();
            this.state = 486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributesGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_attributesGroup;
    return this;
}

AttributesGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributesGroupContext.prototype.constructor = AttributesGroupContext;

AttributesGroupContext.prototype.attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeContext);
    } else {
        return this.getTypedRuleContext(AttributeContext,i);
    }
};

AttributesGroupContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AttributesGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAttributesGroup(this);
	}
};

AttributesGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAttributesGroup(this);
	}
};




PHPParser.AttributesGroupContext = AttributesGroupContext;

PHPParser.prototype.attributesGroup = function() {

    var localctx = new AttributesGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PHPParser.RULE_attributesGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this.match(PHPParser.OpenSquareBracket);
        this.state = 491;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 488;
            this.identifier();
            this.state = 489;
            this.match(PHPParser.Colon);

        }
        this.state = 493;
        this.attribute();
        this.state = 498;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 494;
            this.match(PHPParser.Comma);
            this.state = 495;
            this.attribute();
            this.state = 500;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 501;
        this.match(PHPParser.CloseSquareBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_attribute;
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.qualifiedNamespaceName = function() {
    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
};

AttributeContext.prototype.attributeArgList = function() {
    return this.getTypedRuleContext(AttributeArgListContext,0);
};

AttributeContext.prototype.attributeNamedArgList = function() {
    return this.getTypedRuleContext(AttributeNamedArgListContext,0);
};

AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAttribute(this);
	}
};

AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAttribute(this);
	}
};




PHPParser.AttributeContext = AttributeContext;

PHPParser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PHPParser.RULE_attribute);
    try {
        this.state = 521;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 503;
            this.qualifiedNamespaceName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 504;
            this.qualifiedNamespaceName();
            this.state = 505;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 506;
            this.attributeArgList();
            this.state = 507;
            this.match(PHPParser.CloseRoundBracket);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 509;
            this.qualifiedNamespaceName();
            this.state = 510;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 511;
            this.attributeNamedArgList();
            this.state = 512;
            this.match(PHPParser.CloseRoundBracket);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 514;
            this.qualifiedNamespaceName();
            this.state = 515;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 516;
            this.attributeArgList();
            this.state = 517;
            this.match(PHPParser.Comma);
            this.state = 518;
            this.attributeNamedArgList();
            this.state = 519;
            this.match(PHPParser.CloseRoundBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributeArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_attributeArgList;
    return this;
}

AttributeArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeArgListContext.prototype.constructor = AttributeArgListContext;

AttributeArgListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AttributeArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAttributeArgList(this);
	}
};

AttributeArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAttributeArgList(this);
	}
};




PHPParser.AttributeArgListContext = AttributeArgListContext;

PHPParser.prototype.attributeArgList = function() {

    var localctx = new AttributeArgListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PHPParser.RULE_attributeArgList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.expression(0);
        this.state = 528;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 524;
                this.match(PHPParser.Comma);
                this.state = 525;
                this.expression(0); 
            }
            this.state = 530;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributeNamedArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_attributeNamedArgList;
    return this;
}

AttributeNamedArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeNamedArgListContext.prototype.constructor = AttributeNamedArgListContext;

AttributeNamedArgListContext.prototype.attributeNamedArg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeNamedArgContext);
    } else {
        return this.getTypedRuleContext(AttributeNamedArgContext,i);
    }
};

AttributeNamedArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAttributeNamedArgList(this);
	}
};

AttributeNamedArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAttributeNamedArgList(this);
	}
};




PHPParser.AttributeNamedArgListContext = AttributeNamedArgListContext;

PHPParser.prototype.attributeNamedArgList = function() {

    var localctx = new AttributeNamedArgListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PHPParser.RULE_attributeNamedArgList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 531;
        this.attributeNamedArg();
        this.state = 536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 532;
            this.match(PHPParser.Comma);
            this.state = 533;
            this.attributeNamedArg();
            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributeNamedArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_attributeNamedArg;
    return this;
}

AttributeNamedArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeNamedArgContext.prototype.constructor = AttributeNamedArgContext;

AttributeNamedArgContext.prototype.VarName = function() {
    return this.getToken(PHPParser.VarName, 0);
};

AttributeNamedArgContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AttributeNamedArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAttributeNamedArg(this);
	}
};

AttributeNamedArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAttributeNamedArg(this);
	}
};




PHPParser.AttributeNamedArgContext = AttributeNamedArgContext;

PHPParser.prototype.attributeNamedArg = function() {

    var localctx = new AttributeNamedArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, PHPParser.RULE_attributeNamedArg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        this.match(PHPParser.VarName);
        this.state = 540;
        this.match(PHPParser.DoubleArrow);
        this.state = 541;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerStatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_innerStatementList;
    return this;
}

InnerStatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerStatementListContext.prototype.constructor = InnerStatementListContext;

InnerStatementListContext.prototype.innerStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InnerStatementContext);
    } else {
        return this.getTypedRuleContext(InnerStatementContext,i);
    }
};

InnerStatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterInnerStatementList(this);
	}
};

InnerStatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitInnerStatementList(this);
	}
};




PHPParser.InnerStatementListContext = InnerStatementListContext;

PHPParser.prototype.innerStatementList = function() {

    var localctx = new InnerStatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PHPParser.RULE_innerStatementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 543;
                this.innerStatement(); 
            }
            this.state = 548;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_innerStatement;
    return this;
}

InnerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerStatementContext.prototype.constructor = InnerStatementContext;

InnerStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

InnerStatementContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

InnerStatementContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

InnerStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterInnerStatement(this);
	}
};

InnerStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitInnerStatement(this);
	}
};




PHPParser.InnerStatementContext = InnerStatementContext;

PHPParser.prototype.innerStatement = function() {

    var localctx = new InnerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PHPParser.RULE_innerStatement);
    try {
        this.state = 552;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 549;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 550;
            this.functionDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 551;
            this.classDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.nonEmptyStatement = function() {
    return this.getTypedRuleContext(NonEmptyStatementContext,0);
};

StatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitStatement(this);
	}
};




PHPParser.StatementContext = StatementContext;

PHPParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PHPParser.RULE_statement);
    try {
        this.state = 556;
        switch(this._input.LA(1)) {
        case PHPParser.HtmlText:
        case PHPParser.HtmlScriptOpen:
        case PHPParser.HtmlStyleOpen:
        case PHPParser.HtmlDtd:
        case PHPParser.HtmlOpen:
        case PHPParser.HtmlClose:
        case PHPParser.HtmlSlashClose:
        case PHPParser.HtmlSlash:
        case PHPParser.HtmlEquals:
        case PHPParser.HtmlStartQuoteString:
        case PHPParser.HtmlStartDoubleQuoteString:
        case PHPParser.HtmlHex:
        case PHPParser.HtmlDecimal:
        case PHPParser.HtmlName:
        case PHPParser.HtmlEndQuoteString:
        case PHPParser.HtmlQuoteString:
        case PHPParser.HtmlEndDoubleQuoteString:
        case PHPParser.HtmlDoubleQuoteString:
        case PHPParser.ScriptText:
        case PHPParser.ScriptClose:
        case PHPParser.StyleBody:
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.Inc:
        case PHPParser.Dec:
        case PHPParser.NamespaceSeparator:
        case PHPParser.Bang:
        case PHPParser.Plus:
        case PHPParser.Minus:
        case PHPParser.Tilde:
        case PHPParser.SuppressWarnings:
        case PHPParser.Dollar:
        case PHPParser.OpenRoundBracket:
        case PHPParser.OpenSquareBracket:
        case PHPParser.OpenCurlyBracket:
        case PHPParser.VarName:
        case PHPParser.Label:
        case PHPParser.Octal:
        case PHPParser.Decimal:
        case PHPParser.Real:
        case PHPParser.Hex:
        case PHPParser.Binary:
        case PHPParser.BackQuoteString:
        case PHPParser.SingleQuoteString:
        case PHPParser.DoubleQuote:
        case PHPParser.StartNowDoc:
        case PHPParser.StartHereDoc:
            this.enterOuterAlt(localctx, 1);
            this.state = 554;
            this.nonEmptyStatement();
            break;
        case PHPParser.SemiColon:
            this.enterOuterAlt(localctx, 2);
            this.state = 555;
            this.emptyStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;


EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitEmptyStatement(this);
	}
};




PHPParser.EmptyStatementContext = EmptyStatementContext;

PHPParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PHPParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 558;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonEmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_nonEmptyStatement;
    return this;
}

NonEmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonEmptyStatementContext.prototype.constructor = NonEmptyStatementContext;

NonEmptyStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NonEmptyStatementContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

NonEmptyStatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

NonEmptyStatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

NonEmptyStatementContext.prototype.doWhileStatement = function() {
    return this.getTypedRuleContext(DoWhileStatementContext,0);
};

NonEmptyStatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

NonEmptyStatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

NonEmptyStatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

NonEmptyStatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

NonEmptyStatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

NonEmptyStatementContext.prototype.yieldExpression = function() {
    return this.getTypedRuleContext(YieldExpressionContext,0);
};

NonEmptyStatementContext.prototype.globalStatement = function() {
    return this.getTypedRuleContext(GlobalStatementContext,0);
};

NonEmptyStatementContext.prototype.staticVariableStatement = function() {
    return this.getTypedRuleContext(StaticVariableStatementContext,0);
};

NonEmptyStatementContext.prototype.echoStatement = function() {
    return this.getTypedRuleContext(EchoStatementContext,0);
};

NonEmptyStatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

NonEmptyStatementContext.prototype.unsetStatement = function() {
    return this.getTypedRuleContext(UnsetStatementContext,0);
};

NonEmptyStatementContext.prototype.foreachStatement = function() {
    return this.getTypedRuleContext(ForeachStatementContext,0);
};

NonEmptyStatementContext.prototype.tryCatchFinally = function() {
    return this.getTypedRuleContext(TryCatchFinallyContext,0);
};

NonEmptyStatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

NonEmptyStatementContext.prototype.gotoStatement = function() {
    return this.getTypedRuleContext(GotoStatementContext,0);
};

NonEmptyStatementContext.prototype.declareStatement = function() {
    return this.getTypedRuleContext(DeclareStatementContext,0);
};

NonEmptyStatementContext.prototype.inlineHtml = function() {
    return this.getTypedRuleContext(InlineHtmlContext,0);
};

NonEmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterNonEmptyStatement(this);
	}
};

NonEmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitNonEmptyStatement(this);
	}
};




PHPParser.NonEmptyStatementContext = NonEmptyStatementContext;

PHPParser.prototype.nonEmptyStatement = function() {

    var localctx = new NonEmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PHPParser.RULE_nonEmptyStatement);
    try {
        this.state = 586;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 560;
            this.identifier();
            this.state = 561;
            this.match(PHPParser.Colon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 563;
            this.blockStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 564;
            this.ifStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 565;
            this.whileStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 566;
            this.doWhileStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 567;
            this.forStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 568;
            this.switchStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 569;
            this.breakStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 570;
            this.continueStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 571;
            this.returnStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 572;
            this.yieldExpression();
            this.state = 573;
            this.match(PHPParser.SemiColon);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 575;
            this.globalStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 576;
            this.staticVariableStatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 577;
            this.echoStatement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 578;
            this.expressionStatement();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 579;
            this.unsetStatement();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 580;
            this.foreachStatement();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 581;
            this.tryCatchFinally();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 582;
            this.throwStatement();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 583;
            this.gotoStatement();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 584;
            this.declareStatement();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 585;
            this.inlineHtml();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.OpenCurlyBracket = function() {
    return this.getToken(PHPParser.OpenCurlyBracket, 0);
};

BlockStatementContext.prototype.innerStatementList = function() {
    return this.getTypedRuleContext(InnerStatementListContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitBlockStatement(this);
	}
};




PHPParser.BlockStatementContext = BlockStatementContext;

PHPParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PHPParser.RULE_blockStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588;
        this.match(PHPParser.OpenCurlyBracket);
        this.state = 589;
        this.innerStatementList();
        this.state = 590;
        this.match(PHPParser.CloseCurlyBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
    return this.getToken(PHPParser.If, 0);
};

IfStatementContext.prototype.parenthesis = function() {
    return this.getTypedRuleContext(ParenthesisContext,0);
};

IfStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IfStatementContext.prototype.elseIfStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElseIfStatementContext);
    } else {
        return this.getTypedRuleContext(ElseIfStatementContext,i);
    }
};

IfStatementContext.prototype.elseStatement = function() {
    return this.getTypedRuleContext(ElseStatementContext,0);
};

IfStatementContext.prototype.innerStatementList = function() {
    return this.getTypedRuleContext(InnerStatementListContext,0);
};

IfStatementContext.prototype.EndIf = function() {
    return this.getToken(PHPParser.EndIf, 0);
};

IfStatementContext.prototype.elseIfColonStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElseIfColonStatementContext);
    } else {
        return this.getTypedRuleContext(ElseIfColonStatementContext,i);
    }
};

IfStatementContext.prototype.elseColonStatement = function() {
    return this.getTypedRuleContext(ElseColonStatementContext,0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitIfStatement(this);
	}
};




PHPParser.IfStatementContext = IfStatementContext;

PHPParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PHPParser.RULE_ifStatement);
    var _la = 0; // Token type
    try {
        this.state = 620;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 592;
            this.match(PHPParser.If);
            this.state = 593;
            this.parenthesis();
            this.state = 594;
            this.statement();
            this.state = 598;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 595;
                    this.elseIfStatement(); 
                }
                this.state = 600;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
            }

            this.state = 602;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
            if(la_===1) {
                this.state = 601;
                this.elseStatement();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 604;
            this.match(PHPParser.If);
            this.state = 605;
            this.parenthesis();
            this.state = 606;
            this.match(PHPParser.Colon);
            this.state = 607;
            this.innerStatementList();
            this.state = 611;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PHPParser.ElseIf) {
                this.state = 608;
                this.elseIfColonStatement();
                this.state = 613;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 615;
            _la = this._input.LA(1);
            if(_la===PHPParser.Else) {
                this.state = 614;
                this.elseColonStatement();
            }

            this.state = 617;
            this.match(PHPParser.EndIf);
            this.state = 618;
            this.match(PHPParser.SemiColon);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElseIfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_elseIfStatement;
    return this;
}

ElseIfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElseIfStatementContext.prototype.constructor = ElseIfStatementContext;

ElseIfStatementContext.prototype.ElseIf = function() {
    return this.getToken(PHPParser.ElseIf, 0);
};

ElseIfStatementContext.prototype.parenthesis = function() {
    return this.getTypedRuleContext(ParenthesisContext,0);
};

ElseIfStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ElseIfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterElseIfStatement(this);
	}
};

ElseIfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitElseIfStatement(this);
	}
};




PHPParser.ElseIfStatementContext = ElseIfStatementContext;

PHPParser.prototype.elseIfStatement = function() {

    var localctx = new ElseIfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PHPParser.RULE_elseIfStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 622;
        this.match(PHPParser.ElseIf);
        this.state = 623;
        this.parenthesis();
        this.state = 624;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElseIfColonStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_elseIfColonStatement;
    return this;
}

ElseIfColonStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElseIfColonStatementContext.prototype.constructor = ElseIfColonStatementContext;

ElseIfColonStatementContext.prototype.ElseIf = function() {
    return this.getToken(PHPParser.ElseIf, 0);
};

ElseIfColonStatementContext.prototype.parenthesis = function() {
    return this.getTypedRuleContext(ParenthesisContext,0);
};

ElseIfColonStatementContext.prototype.innerStatementList = function() {
    return this.getTypedRuleContext(InnerStatementListContext,0);
};

ElseIfColonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterElseIfColonStatement(this);
	}
};

ElseIfColonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitElseIfColonStatement(this);
	}
};




PHPParser.ElseIfColonStatementContext = ElseIfColonStatementContext;

PHPParser.prototype.elseIfColonStatement = function() {

    var localctx = new ElseIfColonStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, PHPParser.RULE_elseIfColonStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 626;
        this.match(PHPParser.ElseIf);
        this.state = 627;
        this.parenthesis();
        this.state = 628;
        this.match(PHPParser.Colon);
        this.state = 629;
        this.innerStatementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_elseStatement;
    return this;
}

ElseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElseStatementContext.prototype.constructor = ElseStatementContext;

ElseStatementContext.prototype.Else = function() {
    return this.getToken(PHPParser.Else, 0);
};

ElseStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ElseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterElseStatement(this);
	}
};

ElseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitElseStatement(this);
	}
};




PHPParser.ElseStatementContext = ElseStatementContext;

PHPParser.prototype.elseStatement = function() {

    var localctx = new ElseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, PHPParser.RULE_elseStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this.match(PHPParser.Else);
        this.state = 632;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElseColonStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_elseColonStatement;
    return this;
}

ElseColonStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElseColonStatementContext.prototype.constructor = ElseColonStatementContext;

ElseColonStatementContext.prototype.Else = function() {
    return this.getToken(PHPParser.Else, 0);
};

ElseColonStatementContext.prototype.innerStatementList = function() {
    return this.getTypedRuleContext(InnerStatementListContext,0);
};

ElseColonStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterElseColonStatement(this);
	}
};

ElseColonStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitElseColonStatement(this);
	}
};




PHPParser.ElseColonStatementContext = ElseColonStatementContext;

PHPParser.prototype.elseColonStatement = function() {

    var localctx = new ElseColonStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, PHPParser.RULE_elseColonStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 634;
        this.match(PHPParser.Else);
        this.state = 635;
        this.match(PHPParser.Colon);
        this.state = 636;
        this.innerStatementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.While = function() {
    return this.getToken(PHPParser.While, 0);
};

WhileStatementContext.prototype.parenthesis = function() {
    return this.getTypedRuleContext(ParenthesisContext,0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.innerStatementList = function() {
    return this.getTypedRuleContext(InnerStatementListContext,0);
};

WhileStatementContext.prototype.EndWhile = function() {
    return this.getToken(PHPParser.EndWhile, 0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitWhileStatement(this);
	}
};




PHPParser.WhileStatementContext = WhileStatementContext;

PHPParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, PHPParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 638;
        this.match(PHPParser.While);
        this.state = 639;
        this.parenthesis();
        this.state = 646;
        switch(this._input.LA(1)) {
        case PHPParser.HtmlText:
        case PHPParser.HtmlScriptOpen:
        case PHPParser.HtmlStyleOpen:
        case PHPParser.HtmlDtd:
        case PHPParser.HtmlOpen:
        case PHPParser.HtmlClose:
        case PHPParser.HtmlSlashClose:
        case PHPParser.HtmlSlash:
        case PHPParser.HtmlEquals:
        case PHPParser.HtmlStartQuoteString:
        case PHPParser.HtmlStartDoubleQuoteString:
        case PHPParser.HtmlHex:
        case PHPParser.HtmlDecimal:
        case PHPParser.HtmlName:
        case PHPParser.HtmlEndQuoteString:
        case PHPParser.HtmlQuoteString:
        case PHPParser.HtmlEndDoubleQuoteString:
        case PHPParser.HtmlDoubleQuoteString:
        case PHPParser.ScriptText:
        case PHPParser.ScriptClose:
        case PHPParser.StyleBody:
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.Inc:
        case PHPParser.Dec:
        case PHPParser.NamespaceSeparator:
        case PHPParser.Bang:
        case PHPParser.Plus:
        case PHPParser.Minus:
        case PHPParser.Tilde:
        case PHPParser.SuppressWarnings:
        case PHPParser.Dollar:
        case PHPParser.OpenRoundBracket:
        case PHPParser.OpenSquareBracket:
        case PHPParser.OpenCurlyBracket:
        case PHPParser.SemiColon:
        case PHPParser.VarName:
        case PHPParser.Label:
        case PHPParser.Octal:
        case PHPParser.Decimal:
        case PHPParser.Real:
        case PHPParser.Hex:
        case PHPParser.Binary:
        case PHPParser.BackQuoteString:
        case PHPParser.SingleQuoteString:
        case PHPParser.DoubleQuote:
        case PHPParser.StartNowDoc:
        case PHPParser.StartHereDoc:
            this.state = 640;
            this.statement();
            break;
        case PHPParser.Colon:
            this.state = 641;
            this.match(PHPParser.Colon);
            this.state = 642;
            this.innerStatementList();
            this.state = 643;
            this.match(PHPParser.EndWhile);
            this.state = 644;
            this.match(PHPParser.SemiColon);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoWhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_doWhileStatement;
    return this;
}

DoWhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.Do = function() {
    return this.getToken(PHPParser.Do, 0);
};

DoWhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoWhileStatementContext.prototype.While = function() {
    return this.getToken(PHPParser.While, 0);
};

DoWhileStatementContext.prototype.parenthesis = function() {
    return this.getTypedRuleContext(ParenthesisContext,0);
};

DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitDoWhileStatement(this);
	}
};




PHPParser.DoWhileStatementContext = DoWhileStatementContext;

PHPParser.prototype.doWhileStatement = function() {

    var localctx = new DoWhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, PHPParser.RULE_doWhileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this.match(PHPParser.Do);
        this.state = 649;
        this.statement();
        this.state = 650;
        this.match(PHPParser.While);
        this.state = 651;
        this.parenthesis();
        this.state = 652;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.For = function() {
    return this.getToken(PHPParser.For, 0);
};

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.innerStatementList = function() {
    return this.getTypedRuleContext(InnerStatementListContext,0);
};

ForStatementContext.prototype.EndFor = function() {
    return this.getToken(PHPParser.EndFor, 0);
};

ForStatementContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

ForStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForStatementContext.prototype.forUpdate = function() {
    return this.getTypedRuleContext(ForUpdateContext,0);
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitForStatement(this);
	}
};




PHPParser.ForStatementContext = ForStatementContext;

PHPParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, PHPParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        this.match(PHPParser.For);
        this.state = 655;
        this.match(PHPParser.OpenRoundBracket);
        this.state = 657;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
            this.state = 656;
            this.forInit();
        }

        this.state = 659;
        this.match(PHPParser.SemiColon);
        this.state = 661;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
            this.state = 660;
            this.expressionList();
        }

        this.state = 663;
        this.match(PHPParser.SemiColon);
        this.state = 665;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
            this.state = 664;
            this.forUpdate();
        }

        this.state = 667;
        this.match(PHPParser.CloseRoundBracket);
        this.state = 674;
        switch(this._input.LA(1)) {
        case PHPParser.HtmlText:
        case PHPParser.HtmlScriptOpen:
        case PHPParser.HtmlStyleOpen:
        case PHPParser.HtmlDtd:
        case PHPParser.HtmlOpen:
        case PHPParser.HtmlClose:
        case PHPParser.HtmlSlashClose:
        case PHPParser.HtmlSlash:
        case PHPParser.HtmlEquals:
        case PHPParser.HtmlStartQuoteString:
        case PHPParser.HtmlStartDoubleQuoteString:
        case PHPParser.HtmlHex:
        case PHPParser.HtmlDecimal:
        case PHPParser.HtmlName:
        case PHPParser.HtmlEndQuoteString:
        case PHPParser.HtmlQuoteString:
        case PHPParser.HtmlEndDoubleQuoteString:
        case PHPParser.HtmlDoubleQuoteString:
        case PHPParser.ScriptText:
        case PHPParser.ScriptClose:
        case PHPParser.StyleBody:
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.Inc:
        case PHPParser.Dec:
        case PHPParser.NamespaceSeparator:
        case PHPParser.Bang:
        case PHPParser.Plus:
        case PHPParser.Minus:
        case PHPParser.Tilde:
        case PHPParser.SuppressWarnings:
        case PHPParser.Dollar:
        case PHPParser.OpenRoundBracket:
        case PHPParser.OpenSquareBracket:
        case PHPParser.OpenCurlyBracket:
        case PHPParser.SemiColon:
        case PHPParser.VarName:
        case PHPParser.Label:
        case PHPParser.Octal:
        case PHPParser.Decimal:
        case PHPParser.Real:
        case PHPParser.Hex:
        case PHPParser.Binary:
        case PHPParser.BackQuoteString:
        case PHPParser.SingleQuoteString:
        case PHPParser.DoubleQuote:
        case PHPParser.StartNowDoc:
        case PHPParser.StartHereDoc:
            this.state = 668;
            this.statement();
            break;
        case PHPParser.Colon:
            this.state = 669;
            this.match(PHPParser.Colon);
            this.state = 670;
            this.innerStatementList();
            this.state = 671;
            this.match(PHPParser.EndFor);
            this.state = 672;
            this.match(PHPParser.SemiColon);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterForInit(this);
	}
};

ForInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitForInit(this);
	}
};




PHPParser.ForInitContext = ForInitContext;

PHPParser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, PHPParser.RULE_forInit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 676;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_forUpdate;
    return this;
}

ForUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForUpdateContext.prototype.constructor = ForUpdateContext;

ForUpdateContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterForUpdate(this);
	}
};

ForUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitForUpdate(this);
	}
};




PHPParser.ForUpdateContext = ForUpdateContext;

PHPParser.prototype.forUpdate = function() {

    var localctx = new ForUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, PHPParser.RULE_forUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
    return this.getToken(PHPParser.Switch, 0);
};

SwitchStatementContext.prototype.parenthesis = function() {
    return this.getTypedRuleContext(ParenthesisContext,0);
};

SwitchStatementContext.prototype.OpenCurlyBracket = function() {
    return this.getToken(PHPParser.OpenCurlyBracket, 0);
};

SwitchStatementContext.prototype.EndSwitch = function() {
    return this.getToken(PHPParser.EndSwitch, 0);
};

SwitchStatementContext.prototype.switchBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SwitchBlockContext);
    } else {
        return this.getTypedRuleContext(SwitchBlockContext,i);
    }
};

SwitchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterSwitchStatement(this);
	}
};

SwitchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitSwitchStatement(this);
	}
};




PHPParser.SwitchStatementContext = SwitchStatementContext;

PHPParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, PHPParser.RULE_switchStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 680;
        this.match(PHPParser.Switch);
        this.state = 681;
        this.parenthesis();
        this.state = 705;
        switch(this._input.LA(1)) {
        case PHPParser.OpenCurlyBracket:
            this.state = 682;
            this.match(PHPParser.OpenCurlyBracket);
            this.state = 684;
            _la = this._input.LA(1);
            if(_la===PHPParser.SemiColon) {
                this.state = 683;
                this.match(PHPParser.SemiColon);
            }

            this.state = 689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PHPParser.Case || _la===PHPParser.Default) {
                this.state = 686;
                this.switchBlock();
                this.state = 691;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 692;
            this.match(PHPParser.CloseCurlyBracket);
            break;
        case PHPParser.Colon:
            this.state = 693;
            this.match(PHPParser.Colon);
            this.state = 695;
            _la = this._input.LA(1);
            if(_la===PHPParser.SemiColon) {
                this.state = 694;
                this.match(PHPParser.SemiColon);
            }

            this.state = 700;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PHPParser.Case || _la===PHPParser.Default) {
                this.state = 697;
                this.switchBlock();
                this.state = 702;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 703;
            this.match(PHPParser.EndSwitch);
            this.state = 704;
            this.match(PHPParser.SemiColon);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SwitchBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_switchBlock;
    return this;
}

SwitchBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchBlockContext.prototype.constructor = SwitchBlockContext;

SwitchBlockContext.prototype.innerStatementList = function() {
    return this.getTypedRuleContext(InnerStatementListContext,0);
};

SwitchBlockContext.prototype.Case = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PHPParser.Case);
    } else {
        return this.getToken(PHPParser.Case, i);
    }
};


SwitchBlockContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SwitchBlockContext.prototype.Default = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PHPParser.Default);
    } else {
        return this.getToken(PHPParser.Default, i);
    }
};


SwitchBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterSwitchBlock(this);
	}
};

SwitchBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitSwitchBlock(this);
	}
};




PHPParser.SwitchBlockContext = SwitchBlockContext;

PHPParser.prototype.switchBlock = function() {

    var localctx = new SwitchBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, PHPParser.RULE_switchBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 710;
        		switch(this._input.LA(1)) {
        		case PHPParser.Case:
        		    this.state = 707;
        		    this.match(PHPParser.Case);
        		    this.state = 708;
        		    this.expression(0);
        		    break;
        		case PHPParser.Default:
        		    this.state = 709;
        		    this.match(PHPParser.Default);
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		this.state = 712;
        		_la = this._input.LA(1);
        		if(!(_la===PHPParser.Colon || _la===PHPParser.SemiColon)) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 715; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,61, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 717;
        this.innerStatementList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(PHPParser.Break, 0);
};

BreakStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitBreakStatement(this);
	}
};




PHPParser.BreakStatementContext = BreakStatementContext;

PHPParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, PHPParser.RULE_breakStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this.match(PHPParser.Break);
        this.state = 721;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
            this.state = 720;
            this.expression(0);
        }

        this.state = 723;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(PHPParser.Continue, 0);
};

ContinueStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitContinueStatement(this);
	}
};




PHPParser.ContinueStatementContext = ContinueStatementContext;

PHPParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, PHPParser.RULE_continueStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 725;
        this.match(PHPParser.Continue);
        this.state = 727;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
            this.state = 726;
            this.expression(0);
        }

        this.state = 729;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(PHPParser.Return, 0);
};

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitReturnStatement(this);
	}
};




PHPParser.ReturnStatementContext = ReturnStatementContext;

PHPParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, PHPParser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 731;
        this.match(PHPParser.Return);
        this.state = 733;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
            this.state = 732;
            this.expression(0);
        }

        this.state = 735;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitExpressionStatement(this);
	}
};




PHPParser.ExpressionStatementContext = ExpressionStatementContext;

PHPParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, PHPParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 737;
        this.expression(0);
        this.state = 738;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnsetStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_unsetStatement;
    return this;
}

UnsetStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnsetStatementContext.prototype.constructor = UnsetStatementContext;

UnsetStatementContext.prototype.Unset = function() {
    return this.getToken(PHPParser.Unset, 0);
};

UnsetStatementContext.prototype.chainList = function() {
    return this.getTypedRuleContext(ChainListContext,0);
};

UnsetStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterUnsetStatement(this);
	}
};

UnsetStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitUnsetStatement(this);
	}
};




PHPParser.UnsetStatementContext = UnsetStatementContext;

PHPParser.prototype.unsetStatement = function() {

    var localctx = new UnsetStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, PHPParser.RULE_unsetStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 740;
        this.match(PHPParser.Unset);
        this.state = 741;
        this.match(PHPParser.OpenRoundBracket);
        this.state = 742;
        this.chainList();
        this.state = 743;
        this.match(PHPParser.CloseRoundBracket);
        this.state = 744;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForeachStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_foreachStatement;
    return this;
}

ForeachStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeachStatementContext.prototype.constructor = ForeachStatementContext;

ForeachStatementContext.prototype.Foreach = function() {
    return this.getToken(PHPParser.Foreach, 0);
};

ForeachStatementContext.prototype.chain = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChainContext);
    } else {
        return this.getTypedRuleContext(ChainContext,i);
    }
};

ForeachStatementContext.prototype.As = function() {
    return this.getToken(PHPParser.As, 0);
};

ForeachStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForeachStatementContext.prototype.List = function() {
    return this.getToken(PHPParser.List, 0);
};

ForeachStatementContext.prototype.assignmentList = function() {
    return this.getTypedRuleContext(AssignmentListContext,0);
};

ForeachStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForeachStatementContext.prototype.innerStatementList = function() {
    return this.getTypedRuleContext(InnerStatementListContext,0);
};

ForeachStatementContext.prototype.EndForeach = function() {
    return this.getToken(PHPParser.EndForeach, 0);
};

ForeachStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterForeachStatement(this);
	}
};

ForeachStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitForeachStatement(this);
	}
};




PHPParser.ForeachStatementContext = ForeachStatementContext;

PHPParser.prototype.foreachStatement = function() {

    var localctx = new ForeachStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, PHPParser.RULE_foreachStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 746;
        this.match(PHPParser.Foreach);
        this.state = 785;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.state = 747;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 748;
            this.chain();
            this.state = 749;
            this.match(PHPParser.As);
            this.state = 751;
            _la = this._input.LA(1);
            if(_la===PHPParser.Ampersand) {
                this.state = 750;
                this.match(PHPParser.Ampersand);
            }

            this.state = 753;
            this.chain();
            this.state = 759;
            _la = this._input.LA(1);
            if(_la===PHPParser.DoubleArrow) {
                this.state = 754;
                this.match(PHPParser.DoubleArrow);
                this.state = 756;
                _la = this._input.LA(1);
                if(_la===PHPParser.Ampersand) {
                    this.state = 755;
                    this.match(PHPParser.Ampersand);
                }

                this.state = 758;
                this.chain();
            }

            this.state = 761;
            this.match(PHPParser.CloseRoundBracket);
            break;

        case 2:
            this.state = 763;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 764;
            this.expression(0);
            this.state = 765;
            this.match(PHPParser.As);
            this.state = 766;
            this.chain();
            this.state = 772;
            _la = this._input.LA(1);
            if(_la===PHPParser.DoubleArrow) {
                this.state = 767;
                this.match(PHPParser.DoubleArrow);
                this.state = 769;
                _la = this._input.LA(1);
                if(_la===PHPParser.Ampersand) {
                    this.state = 768;
                    this.match(PHPParser.Ampersand);
                }

                this.state = 771;
                this.chain();
            }

            this.state = 774;
            this.match(PHPParser.CloseRoundBracket);
            break;

        case 3:
            this.state = 776;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 777;
            this.chain();
            this.state = 778;
            this.match(PHPParser.As);
            this.state = 779;
            this.match(PHPParser.List);
            this.state = 780;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 781;
            this.assignmentList();
            this.state = 782;
            this.match(PHPParser.CloseRoundBracket);
            this.state = 783;
            this.match(PHPParser.CloseRoundBracket);
            break;

        }
        this.state = 793;
        switch(this._input.LA(1)) {
        case PHPParser.HtmlText:
        case PHPParser.HtmlScriptOpen:
        case PHPParser.HtmlStyleOpen:
        case PHPParser.HtmlDtd:
        case PHPParser.HtmlOpen:
        case PHPParser.HtmlClose:
        case PHPParser.HtmlSlashClose:
        case PHPParser.HtmlSlash:
        case PHPParser.HtmlEquals:
        case PHPParser.HtmlStartQuoteString:
        case PHPParser.HtmlStartDoubleQuoteString:
        case PHPParser.HtmlHex:
        case PHPParser.HtmlDecimal:
        case PHPParser.HtmlName:
        case PHPParser.HtmlEndQuoteString:
        case PHPParser.HtmlQuoteString:
        case PHPParser.HtmlEndDoubleQuoteString:
        case PHPParser.HtmlDoubleQuoteString:
        case PHPParser.ScriptText:
        case PHPParser.ScriptClose:
        case PHPParser.StyleBody:
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.Inc:
        case PHPParser.Dec:
        case PHPParser.NamespaceSeparator:
        case PHPParser.Bang:
        case PHPParser.Plus:
        case PHPParser.Minus:
        case PHPParser.Tilde:
        case PHPParser.SuppressWarnings:
        case PHPParser.Dollar:
        case PHPParser.OpenRoundBracket:
        case PHPParser.OpenSquareBracket:
        case PHPParser.OpenCurlyBracket:
        case PHPParser.SemiColon:
        case PHPParser.VarName:
        case PHPParser.Label:
        case PHPParser.Octal:
        case PHPParser.Decimal:
        case PHPParser.Real:
        case PHPParser.Hex:
        case PHPParser.Binary:
        case PHPParser.BackQuoteString:
        case PHPParser.SingleQuoteString:
        case PHPParser.DoubleQuote:
        case PHPParser.StartNowDoc:
        case PHPParser.StartHereDoc:
            this.state = 787;
            this.statement();
            break;
        case PHPParser.Colon:
            this.state = 788;
            this.match(PHPParser.Colon);
            this.state = 789;
            this.innerStatementList();
            this.state = 790;
            this.match(PHPParser.EndForeach);
            this.state = 791;
            this.match(PHPParser.SemiColon);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryCatchFinallyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_tryCatchFinally;
    return this;
}

TryCatchFinallyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryCatchFinallyContext.prototype.constructor = TryCatchFinallyContext;

TryCatchFinallyContext.prototype.Try = function() {
    return this.getToken(PHPParser.Try, 0);
};

TryCatchFinallyContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

TryCatchFinallyContext.prototype.finallyStatement = function() {
    return this.getTypedRuleContext(FinallyStatementContext,0);
};

TryCatchFinallyContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

TryCatchFinallyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTryCatchFinally(this);
	}
};

TryCatchFinallyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTryCatchFinally(this);
	}
};




PHPParser.TryCatchFinallyContext = TryCatchFinallyContext;

PHPParser.prototype.tryCatchFinally = function() {

    var localctx = new TryCatchFinallyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, PHPParser.RULE_tryCatchFinally);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 795;
        this.match(PHPParser.Try);
        this.state = 796;
        this.blockStatement();
        this.state = 812;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        switch(la_) {
        case 1:
            this.state = 798; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 797;
            		this.catchClause();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 800; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,72, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 803;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
            if(la_===1) {
                this.state = 802;
                this.finallyStatement();

            }
            break;

        case 2:
            this.state = 808;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PHPParser.Catch) {
                this.state = 805;
                this.catchClause();
                this.state = 810;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 811;
            this.finallyStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.Catch = function() {
    return this.getToken(PHPParser.Catch, 0);
};

CatchClauseContext.prototype.qualifiedStaticTypeRef = function() {
    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
};

CatchClauseContext.prototype.VarName = function() {
    return this.getToken(PHPParser.VarName, 0);
};

CatchClauseContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

CatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterCatchClause(this);
	}
};

CatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitCatchClause(this);
	}
};




PHPParser.CatchClauseContext = CatchClauseContext;

PHPParser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, PHPParser.RULE_catchClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 814;
        this.match(PHPParser.Catch);
        this.state = 815;
        this.match(PHPParser.OpenRoundBracket);
        this.state = 816;
        this.qualifiedStaticTypeRef();
        this.state = 817;
        this.match(PHPParser.VarName);
        this.state = 818;
        this.match(PHPParser.CloseRoundBracket);
        this.state = 819;
        this.blockStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_finallyStatement;
    return this;
}

FinallyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyStatementContext.prototype.constructor = FinallyStatementContext;

FinallyStatementContext.prototype.Finally = function() {
    return this.getToken(PHPParser.Finally, 0);
};

FinallyStatementContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

FinallyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterFinallyStatement(this);
	}
};

FinallyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitFinallyStatement(this);
	}
};




PHPParser.FinallyStatementContext = FinallyStatementContext;

PHPParser.prototype.finallyStatement = function() {

    var localctx = new FinallyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, PHPParser.RULE_finallyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.match(PHPParser.Finally);
        this.state = 822;
        this.blockStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.Throw = function() {
    return this.getToken(PHPParser.Throw, 0);
};

ThrowStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitThrowStatement(this);
	}
};




PHPParser.ThrowStatementContext = ThrowStatementContext;

PHPParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, PHPParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.match(PHPParser.Throw);
        this.state = 825;
        this.expression(0);
        this.state = 826;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GotoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_gotoStatement;
    return this;
}

GotoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GotoStatementContext.prototype.constructor = GotoStatementContext;

GotoStatementContext.prototype.Goto = function() {
    return this.getToken(PHPParser.Goto, 0);
};

GotoStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

GotoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterGotoStatement(this);
	}
};

GotoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitGotoStatement(this);
	}
};




PHPParser.GotoStatementContext = GotoStatementContext;

PHPParser.prototype.gotoStatement = function() {

    var localctx = new GotoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, PHPParser.RULE_gotoStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        this.match(PHPParser.Goto);
        this.state = 829;
        this.identifier();
        this.state = 830;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclareStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_declareStatement;
    return this;
}

DeclareStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareStatementContext.prototype.constructor = DeclareStatementContext;

DeclareStatementContext.prototype.Declare = function() {
    return this.getToken(PHPParser.Declare, 0);
};

DeclareStatementContext.prototype.declareList = function() {
    return this.getTypedRuleContext(DeclareListContext,0);
};

DeclareStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DeclareStatementContext.prototype.innerStatementList = function() {
    return this.getTypedRuleContext(InnerStatementListContext,0);
};

DeclareStatementContext.prototype.EndDeclare = function() {
    return this.getToken(PHPParser.EndDeclare, 0);
};

DeclareStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterDeclareStatement(this);
	}
};

DeclareStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitDeclareStatement(this);
	}
};




PHPParser.DeclareStatementContext = DeclareStatementContext;

PHPParser.prototype.declareStatement = function() {

    var localctx = new DeclareStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, PHPParser.RULE_declareStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.match(PHPParser.Declare);
        this.state = 833;
        this.match(PHPParser.OpenRoundBracket);
        this.state = 834;
        this.declareList();
        this.state = 835;
        this.match(PHPParser.CloseRoundBracket);
        this.state = 842;
        switch(this._input.LA(1)) {
        case PHPParser.HtmlText:
        case PHPParser.HtmlScriptOpen:
        case PHPParser.HtmlStyleOpen:
        case PHPParser.HtmlDtd:
        case PHPParser.HtmlOpen:
        case PHPParser.HtmlClose:
        case PHPParser.HtmlSlashClose:
        case PHPParser.HtmlSlash:
        case PHPParser.HtmlEquals:
        case PHPParser.HtmlStartQuoteString:
        case PHPParser.HtmlStartDoubleQuoteString:
        case PHPParser.HtmlHex:
        case PHPParser.HtmlDecimal:
        case PHPParser.HtmlName:
        case PHPParser.HtmlEndQuoteString:
        case PHPParser.HtmlQuoteString:
        case PHPParser.HtmlEndDoubleQuoteString:
        case PHPParser.HtmlDoubleQuoteString:
        case PHPParser.ScriptText:
        case PHPParser.ScriptClose:
        case PHPParser.StyleBody:
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.Inc:
        case PHPParser.Dec:
        case PHPParser.NamespaceSeparator:
        case PHPParser.Bang:
        case PHPParser.Plus:
        case PHPParser.Minus:
        case PHPParser.Tilde:
        case PHPParser.SuppressWarnings:
        case PHPParser.Dollar:
        case PHPParser.OpenRoundBracket:
        case PHPParser.OpenSquareBracket:
        case PHPParser.OpenCurlyBracket:
        case PHPParser.SemiColon:
        case PHPParser.VarName:
        case PHPParser.Label:
        case PHPParser.Octal:
        case PHPParser.Decimal:
        case PHPParser.Real:
        case PHPParser.Hex:
        case PHPParser.Binary:
        case PHPParser.BackQuoteString:
        case PHPParser.SingleQuoteString:
        case PHPParser.DoubleQuote:
        case PHPParser.StartNowDoc:
        case PHPParser.StartHereDoc:
            this.state = 836;
            this.statement();
            break;
        case PHPParser.Colon:
            this.state = 837;
            this.match(PHPParser.Colon);
            this.state = 838;
            this.innerStatementList();
            this.state = 839;
            this.match(PHPParser.EndDeclare);
            this.state = 840;
            this.match(PHPParser.SemiColon);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineHtmlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_inlineHtml;
    return this;
}

InlineHtmlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineHtmlContext.prototype.constructor = InlineHtmlContext;

InlineHtmlContext.prototype.htmlElements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HtmlElementsContext);
    } else {
        return this.getTypedRuleContext(HtmlElementsContext,i);
    }
};

InlineHtmlContext.prototype.scriptTextPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ScriptTextPartContext);
    } else {
        return this.getTypedRuleContext(ScriptTextPartContext,i);
    }
};

InlineHtmlContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterInlineHtml(this);
	}
};

InlineHtmlContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitInlineHtml(this);
	}
};




PHPParser.InlineHtmlContext = InlineHtmlContext;

PHPParser.prototype.inlineHtml = function() {

    var localctx = new InlineHtmlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, PHPParser.RULE_inlineHtml);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 846; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 846;
        		switch(this._input.LA(1)) {
        		case PHPParser.HtmlText:
        		case PHPParser.HtmlScriptOpen:
        		case PHPParser.HtmlStyleOpen:
        		case PHPParser.HtmlDtd:
        		case PHPParser.HtmlOpen:
        		case PHPParser.HtmlClose:
        		case PHPParser.HtmlSlashClose:
        		case PHPParser.HtmlSlash:
        		case PHPParser.HtmlEquals:
        		case PHPParser.HtmlStartQuoteString:
        		case PHPParser.HtmlStartDoubleQuoteString:
        		case PHPParser.HtmlHex:
        		case PHPParser.HtmlDecimal:
        		case PHPParser.HtmlName:
        		case PHPParser.HtmlEndQuoteString:
        		case PHPParser.HtmlQuoteString:
        		case PHPParser.HtmlEndDoubleQuoteString:
        		case PHPParser.HtmlDoubleQuoteString:
        		case PHPParser.ScriptClose:
        		case PHPParser.StyleBody:
        		    this.state = 844;
        		    this.htmlElements();
        		    break;
        		case PHPParser.ScriptText:
        		    this.state = 845;
        		    this.scriptTextPart();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 848; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,78, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclareListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_declareList;
    return this;
}

DeclareListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclareListContext.prototype.constructor = DeclareListContext;

DeclareListContext.prototype.identifierInititalizer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierInititalizerContext);
    } else {
        return this.getTypedRuleContext(IdentifierInititalizerContext,i);
    }
};

DeclareListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterDeclareList(this);
	}
};

DeclareListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitDeclareList(this);
	}
};




PHPParser.DeclareListContext = DeclareListContext;

PHPParser.prototype.declareList = function() {

    var localctx = new DeclareListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, PHPParser.RULE_declareList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 850;
        this.identifierInititalizer();
        this.state = 855;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 851;
            this.match(PHPParser.Comma);
            this.state = 852;
            this.identifierInititalizer();
            this.state = 857;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitFormalParameterList(this);
	}
};




PHPParser.FormalParameterListContext = FormalParameterListContext;

PHPParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, PHPParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 859;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Ellipsis - 179)) | (1 << (PHPParser.Ampersand - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0)) {
            this.state = 858;
            this.formalParameter();
        }

        this.state = 865;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 861;
            this.match(PHPParser.Comma);
            this.state = 862;
            this.formalParameter();
            this.state = 867;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

FormalParameterContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

FormalParameterContext.prototype.typeHint = function() {
    return this.getTypedRuleContext(TypeHintContext,0);
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitFormalParameter(this);
	}
};




PHPParser.FormalParameterContext = FormalParameterContext;

PHPParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, PHPParser.RULE_formalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 868;
        this.attributes();
        this.state = 870;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || _la===PHPParser.NamespaceSeparator || _la===PHPParser.Label) {
            this.state = 869;
            this.typeHint();
        }

        this.state = 873;
        _la = this._input.LA(1);
        if(_la===PHPParser.Ampersand) {
            this.state = 872;
            this.match(PHPParser.Ampersand);
        }

        this.state = 876;
        _la = this._input.LA(1);
        if(_la===PHPParser.Ellipsis) {
            this.state = 875;
            this.match(PHPParser.Ellipsis);
        }

        this.state = 878;
        this.variableInitializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeHintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_typeHint;
    return this;
}

TypeHintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeHintContext.prototype.constructor = TypeHintContext;

TypeHintContext.prototype.qualifiedStaticTypeRef = function() {
    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
};

TypeHintContext.prototype.Callable = function() {
    return this.getToken(PHPParser.Callable, 0);
};

TypeHintContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

TypeHintContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTypeHint(this);
	}
};

TypeHintContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTypeHint(this);
	}
};




PHPParser.TypeHintContext = TypeHintContext;

PHPParser.prototype.typeHint = function() {

    var localctx = new TypeHintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, PHPParser.RULE_typeHint);
    try {
        this.state = 883;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 880;
            this.qualifiedStaticTypeRef();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 881;
            this.match(PHPParser.Callable);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 882;
            this.primitiveType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GlobalStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_globalStatement;
    return this;
}

GlobalStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalStatementContext.prototype.constructor = GlobalStatementContext;

GlobalStatementContext.prototype.Global = function() {
    return this.getToken(PHPParser.Global, 0);
};

GlobalStatementContext.prototype.globalVar = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GlobalVarContext);
    } else {
        return this.getTypedRuleContext(GlobalVarContext,i);
    }
};

GlobalStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterGlobalStatement(this);
	}
};

GlobalStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitGlobalStatement(this);
	}
};




PHPParser.GlobalStatementContext = GlobalStatementContext;

PHPParser.prototype.globalStatement = function() {

    var localctx = new GlobalStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, PHPParser.RULE_globalStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 885;
        this.match(PHPParser.Global);
        this.state = 886;
        this.globalVar();
        this.state = 891;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 887;
            this.match(PHPParser.Comma);
            this.state = 888;
            this.globalVar();
            this.state = 893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 894;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GlobalVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_globalVar;
    return this;
}

GlobalVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalVarContext.prototype.constructor = GlobalVarContext;

GlobalVarContext.prototype.VarName = function() {
    return this.getToken(PHPParser.VarName, 0);
};

GlobalVarContext.prototype.Dollar = function() {
    return this.getToken(PHPParser.Dollar, 0);
};

GlobalVarContext.prototype.chain = function() {
    return this.getTypedRuleContext(ChainContext,0);
};

GlobalVarContext.prototype.OpenCurlyBracket = function() {
    return this.getToken(PHPParser.OpenCurlyBracket, 0);
};

GlobalVarContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GlobalVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterGlobalVar(this);
	}
};

GlobalVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitGlobalVar(this);
	}
};




PHPParser.GlobalVarContext = GlobalVarContext;

PHPParser.prototype.globalVar = function() {

    var localctx = new GlobalVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, PHPParser.RULE_globalVar);
    try {
        this.state = 904;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 896;
            this.match(PHPParser.VarName);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 897;
            this.match(PHPParser.Dollar);
            this.state = 898;
            this.chain();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 899;
            this.match(PHPParser.Dollar);
            this.state = 900;
            this.match(PHPParser.OpenCurlyBracket);
            this.state = 901;
            this.expression(0);
            this.state = 902;
            this.match(PHPParser.CloseCurlyBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EchoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_echoStatement;
    return this;
}

EchoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EchoStatementContext.prototype.constructor = EchoStatementContext;

EchoStatementContext.prototype.Echo = function() {
    return this.getToken(PHPParser.Echo, 0);
};

EchoStatementContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

EchoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterEchoStatement(this);
	}
};

EchoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitEchoStatement(this);
	}
};




PHPParser.EchoStatementContext = EchoStatementContext;

PHPParser.prototype.echoStatement = function() {

    var localctx = new EchoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, PHPParser.RULE_echoStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 906;
        this.match(PHPParser.Echo);
        this.state = 907;
        this.expressionList();
        this.state = 908;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StaticVariableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_staticVariableStatement;
    return this;
}

StaticVariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StaticVariableStatementContext.prototype.constructor = StaticVariableStatementContext;

StaticVariableStatementContext.prototype.Static = function() {
    return this.getToken(PHPParser.Static, 0);
};

StaticVariableStatementContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

StaticVariableStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterStaticVariableStatement(this);
	}
};

StaticVariableStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitStaticVariableStatement(this);
	}
};




PHPParser.StaticVariableStatementContext = StaticVariableStatementContext;

PHPParser.prototype.staticVariableStatement = function() {

    var localctx = new StaticVariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, PHPParser.RULE_staticVariableStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 910;
        this.match(PHPParser.Static);
        this.state = 911;
        this.variableInitializer();
        this.state = 916;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 912;
            this.match(PHPParser.Comma);
            this.state = 913;
            this.variableInitializer();
            this.state = 918;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 919;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_classStatement;
    return this;
}

ClassStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassStatementContext.prototype.constructor = ClassStatementContext;

ClassStatementContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

ClassStatementContext.prototype.propertyModifiers = function() {
    return this.getTypedRuleContext(PropertyModifiersContext,0);
};

ClassStatementContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

ClassStatementContext.prototype.Const = function() {
    return this.getToken(PHPParser.Const, 0);
};

ClassStatementContext.prototype.identifierInititalizer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierInititalizerContext);
    } else {
        return this.getTypedRuleContext(IdentifierInititalizerContext,i);
    }
};

ClassStatementContext.prototype.Function = function() {
    return this.getToken(PHPParser.Function, 0);
};

ClassStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassStatementContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

ClassStatementContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

ClassStatementContext.prototype.memberModifiers = function() {
    return this.getTypedRuleContext(MemberModifiersContext,0);
};

ClassStatementContext.prototype.typeParameterListInBrackets = function() {
    return this.getTypedRuleContext(TypeParameterListInBracketsContext,0);
};

ClassStatementContext.prototype.baseCtorCall = function() {
    return this.getTypedRuleContext(BaseCtorCallContext,0);
};

ClassStatementContext.prototype.Use = function() {
    return this.getToken(PHPParser.Use, 0);
};

ClassStatementContext.prototype.qualifiedNamespaceNameList = function() {
    return this.getTypedRuleContext(QualifiedNamespaceNameListContext,0);
};

ClassStatementContext.prototype.traitAdaptations = function() {
    return this.getTypedRuleContext(TraitAdaptationsContext,0);
};

ClassStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterClassStatement(this);
	}
};

ClassStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitClassStatement(this);
	}
};




PHPParser.ClassStatementContext = ClassStatementContext;

PHPParser.prototype.classStatement = function() {

    var localctx = new ClassStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, PHPParser.RULE_classStatement);
    var _la = 0; // Token type
    try {
        this.state = 969;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 921;
            this.attributes();
            this.state = 922;
            this.propertyModifiers();
            this.state = 923;
            this.variableInitializer();
            this.state = 928;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PHPParser.Comma) {
                this.state = 924;
                this.match(PHPParser.Comma);
                this.state = 925;
                this.variableInitializer();
                this.state = 930;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 931;
            this.match(PHPParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 933;
            this.attributes();
            this.state = 934;
            this.match(PHPParser.Const);
            this.state = 935;
            this.identifierInititalizer();
            this.state = 940;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PHPParser.Comma) {
                this.state = 936;
                this.match(PHPParser.Comma);
                this.state = 937;
                this.identifierInititalizer();
                this.state = 942;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 943;
            this.match(PHPParser.SemiColon);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 945;
            this.attributes();
            this.state = 947;
            _la = this._input.LA(1);
            if(_la===PHPParser.Abstract || _la===PHPParser.Final || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Static - 104)))) !== 0)) {
                this.state = 946;
                this.memberModifiers();
            }

            this.state = 949;
            this.match(PHPParser.Function);
            this.state = 951;
            _la = this._input.LA(1);
            if(_la===PHPParser.Ampersand) {
                this.state = 950;
                this.match(PHPParser.Ampersand);
            }

            this.state = 953;
            this.identifier();
            this.state = 955;
            _la = this._input.LA(1);
            if(_la===PHPParser.Lgeneric) {
                this.state = 954;
                this.typeParameterListInBrackets();
            }

            this.state = 957;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 958;
            this.formalParameterList();
            this.state = 959;
            this.match(PHPParser.CloseRoundBracket);
            this.state = 961;
            _la = this._input.LA(1);
            if(_la===PHPParser.Colon) {
                this.state = 960;
                this.baseCtorCall();
            }

            this.state = 963;
            this.methodBody();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 965;
            this.match(PHPParser.Use);
            this.state = 966;
            this.qualifiedNamespaceNameList();
            this.state = 967;
            this.traitAdaptations();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TraitAdaptationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_traitAdaptations;
    return this;
}

TraitAdaptationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TraitAdaptationsContext.prototype.constructor = TraitAdaptationsContext;

TraitAdaptationsContext.prototype.OpenCurlyBracket = function() {
    return this.getToken(PHPParser.OpenCurlyBracket, 0);
};

TraitAdaptationsContext.prototype.traitAdaptationStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TraitAdaptationStatementContext);
    } else {
        return this.getTypedRuleContext(TraitAdaptationStatementContext,i);
    }
};

TraitAdaptationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTraitAdaptations(this);
	}
};

TraitAdaptationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTraitAdaptations(this);
	}
};




PHPParser.TraitAdaptationsContext = TraitAdaptationsContext;

PHPParser.prototype.traitAdaptations = function() {

    var localctx = new TraitAdaptationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, PHPParser.RULE_traitAdaptations);
    var _la = 0; // Token type
    try {
        this.state = 980;
        switch(this._input.LA(1)) {
        case PHPParser.SemiColon:
            this.enterOuterAlt(localctx, 1);
            this.state = 971;
            this.match(PHPParser.SemiColon);
            break;
        case PHPParser.OpenCurlyBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 972;
            this.match(PHPParser.OpenCurlyBracket);
            this.state = 976;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || _la===PHPParser.NamespaceSeparator || _la===PHPParser.Label) {
                this.state = 973;
                this.traitAdaptationStatement();
                this.state = 978;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 979;
            this.match(PHPParser.CloseCurlyBracket);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TraitAdaptationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_traitAdaptationStatement;
    return this;
}

TraitAdaptationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TraitAdaptationStatementContext.prototype.constructor = TraitAdaptationStatementContext;

TraitAdaptationStatementContext.prototype.traitPrecedence = function() {
    return this.getTypedRuleContext(TraitPrecedenceContext,0);
};

TraitAdaptationStatementContext.prototype.traitAlias = function() {
    return this.getTypedRuleContext(TraitAliasContext,0);
};

TraitAdaptationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTraitAdaptationStatement(this);
	}
};

TraitAdaptationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTraitAdaptationStatement(this);
	}
};




PHPParser.TraitAdaptationStatementContext = TraitAdaptationStatementContext;

PHPParser.prototype.traitAdaptationStatement = function() {

    var localctx = new TraitAdaptationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, PHPParser.RULE_traitAdaptationStatement);
    try {
        this.state = 984;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 982;
            this.traitPrecedence();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 983;
            this.traitAlias();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TraitPrecedenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_traitPrecedence;
    return this;
}

TraitPrecedenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TraitPrecedenceContext.prototype.constructor = TraitPrecedenceContext;

TraitPrecedenceContext.prototype.qualifiedNamespaceName = function() {
    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
};

TraitPrecedenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TraitPrecedenceContext.prototype.InsteadOf = function() {
    return this.getToken(PHPParser.InsteadOf, 0);
};

TraitPrecedenceContext.prototype.qualifiedNamespaceNameList = function() {
    return this.getTypedRuleContext(QualifiedNamespaceNameListContext,0);
};

TraitPrecedenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTraitPrecedence(this);
	}
};

TraitPrecedenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTraitPrecedence(this);
	}
};




PHPParser.TraitPrecedenceContext = TraitPrecedenceContext;

PHPParser.prototype.traitPrecedence = function() {

    var localctx = new TraitPrecedenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, PHPParser.RULE_traitPrecedence);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.qualifiedNamespaceName();
        this.state = 987;
        this.match(PHPParser.DoubleColon);
        this.state = 988;
        this.identifier();
        this.state = 989;
        this.match(PHPParser.InsteadOf);
        this.state = 990;
        this.qualifiedNamespaceNameList();
        this.state = 991;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TraitAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_traitAlias;
    return this;
}

TraitAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TraitAliasContext.prototype.constructor = TraitAliasContext;

TraitAliasContext.prototype.traitMethodReference = function() {
    return this.getTypedRuleContext(TraitMethodReferenceContext,0);
};

TraitAliasContext.prototype.As = function() {
    return this.getToken(PHPParser.As, 0);
};

TraitAliasContext.prototype.memberModifier = function() {
    return this.getTypedRuleContext(MemberModifierContext,0);
};

TraitAliasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TraitAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTraitAlias(this);
	}
};

TraitAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTraitAlias(this);
	}
};




PHPParser.TraitAliasContext = TraitAliasContext;

PHPParser.prototype.traitAlias = function() {

    var localctx = new TraitAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, PHPParser.RULE_traitAlias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 993;
        this.traitMethodReference();
        this.state = 994;
        this.match(PHPParser.As);
        this.state = 1000;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        switch(la_) {
        case 1:
            this.state = 995;
            this.memberModifier();
            break;

        case 2:
            this.state = 997;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
            if(la_===1) {
                this.state = 996;
                this.memberModifier();

            }
            this.state = 999;
            this.identifier();
            break;

        }
        this.state = 1002;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TraitMethodReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_traitMethodReference;
    return this;
}

TraitMethodReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TraitMethodReferenceContext.prototype.constructor = TraitMethodReferenceContext;

TraitMethodReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TraitMethodReferenceContext.prototype.qualifiedNamespaceName = function() {
    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
};

TraitMethodReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTraitMethodReference(this);
	}
};

TraitMethodReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTraitMethodReference(this);
	}
};




PHPParser.TraitMethodReferenceContext = TraitMethodReferenceContext;

PHPParser.prototype.traitMethodReference = function() {

    var localctx = new TraitMethodReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, PHPParser.RULE_traitMethodReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1007;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        if(la_===1) {
            this.state = 1004;
            this.qualifiedNamespaceName();
            this.state = 1005;
            this.match(PHPParser.DoubleColon);

        }
        this.state = 1009;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseCtorCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_baseCtorCall;
    return this;
}

BaseCtorCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseCtorCallContext.prototype.constructor = BaseCtorCallContext;

BaseCtorCallContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BaseCtorCallContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

BaseCtorCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterBaseCtorCall(this);
	}
};

BaseCtorCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitBaseCtorCall(this);
	}
};




PHPParser.BaseCtorCallContext = BaseCtorCallContext;

PHPParser.prototype.baseCtorCall = function() {

    var localctx = new BaseCtorCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, PHPParser.RULE_baseCtorCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1011;
        this.match(PHPParser.Colon);
        this.state = 1012;
        this.identifier();
        this.state = 1013;
        this.arguments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

MethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterMethodBody(this);
	}
};

MethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitMethodBody(this);
	}
};




PHPParser.MethodBodyContext = MethodBodyContext;

PHPParser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, PHPParser.RULE_methodBody);
    try {
        this.state = 1017;
        switch(this._input.LA(1)) {
        case PHPParser.SemiColon:
            this.enterOuterAlt(localctx, 1);
            this.state = 1015;
            this.match(PHPParser.SemiColon);
            break;
        case PHPParser.OpenCurlyBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1016;
            this.blockStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_propertyModifiers;
    return this;
}

PropertyModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyModifiersContext.prototype.constructor = PropertyModifiersContext;

PropertyModifiersContext.prototype.memberModifiers = function() {
    return this.getTypedRuleContext(MemberModifiersContext,0);
};

PropertyModifiersContext.prototype.Var = function() {
    return this.getToken(PHPParser.Var, 0);
};

PropertyModifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterPropertyModifiers(this);
	}
};

PropertyModifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitPropertyModifiers(this);
	}
};




PHPParser.PropertyModifiersContext = PropertyModifiersContext;

PHPParser.prototype.propertyModifiers = function() {

    var localctx = new PropertyModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, PHPParser.RULE_propertyModifiers);
    try {
        this.state = 1021;
        switch(this._input.LA(1)) {
        case PHPParser.Abstract:
        case PHPParser.Final:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Static:
            this.enterOuterAlt(localctx, 1);
            this.state = 1019;
            this.memberModifiers();
            break;
        case PHPParser.Var:
            this.enterOuterAlt(localctx, 2);
            this.state = 1020;
            this.match(PHPParser.Var);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_memberModifiers;
    return this;
}

MemberModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberModifiersContext.prototype.constructor = MemberModifiersContext;

MemberModifiersContext.prototype.memberModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MemberModifierContext);
    } else {
        return this.getTypedRuleContext(MemberModifierContext,i);
    }
};

MemberModifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterMemberModifiers(this);
	}
};

MemberModifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitMemberModifiers(this);
	}
};




PHPParser.MemberModifiersContext = MemberModifiersContext;

PHPParser.prototype.memberModifiers = function() {

    var localctx = new MemberModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, PHPParser.RULE_memberModifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1024; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1023;
            this.memberModifier();
            this.state = 1026; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PHPParser.Abstract || _la===PHPParser.Final || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Static - 104)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_variableInitializer;
    return this;
}

VariableInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerContext.prototype.constructor = VariableInitializerContext;

VariableInitializerContext.prototype.VarName = function() {
    return this.getToken(PHPParser.VarName, 0);
};

VariableInitializerContext.prototype.Eq = function() {
    return this.getToken(PHPParser.Eq, 0);
};

VariableInitializerContext.prototype.constantInititalizer = function() {
    return this.getTypedRuleContext(ConstantInititalizerContext,0);
};

VariableInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitVariableInitializer(this);
	}
};




PHPParser.VariableInitializerContext = VariableInitializerContext;

PHPParser.prototype.variableInitializer = function() {

    var localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, PHPParser.RULE_variableInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1028;
        this.match(PHPParser.VarName);
        this.state = 1031;
        _la = this._input.LA(1);
        if(_la===PHPParser.Eq) {
            this.state = 1029;
            this.match(PHPParser.Eq);
            this.state = 1030;
            this.constantInititalizer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierInititalizerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_identifierInititalizer;
    return this;
}

IdentifierInititalizerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierInititalizerContext.prototype.constructor = IdentifierInititalizerContext;

IdentifierInititalizerContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierInititalizerContext.prototype.Eq = function() {
    return this.getToken(PHPParser.Eq, 0);
};

IdentifierInititalizerContext.prototype.constantInititalizer = function() {
    return this.getTypedRuleContext(ConstantInititalizerContext,0);
};

IdentifierInititalizerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterIdentifierInititalizer(this);
	}
};

IdentifierInititalizerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitIdentifierInititalizer(this);
	}
};




PHPParser.IdentifierInititalizerContext = IdentifierInititalizerContext;

PHPParser.prototype.identifierInititalizer = function() {

    var localctx = new IdentifierInititalizerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, PHPParser.RULE_identifierInititalizer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1033;
        this.identifier();
        this.state = 1034;
        this.match(PHPParser.Eq);
        this.state = 1035;
        this.constantInititalizer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GlobalConstantDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_globalConstantDeclaration;
    return this;
}

GlobalConstantDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalConstantDeclarationContext.prototype.constructor = GlobalConstantDeclarationContext;

GlobalConstantDeclarationContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

GlobalConstantDeclarationContext.prototype.Const = function() {
    return this.getToken(PHPParser.Const, 0);
};

GlobalConstantDeclarationContext.prototype.identifierInititalizer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierInititalizerContext);
    } else {
        return this.getTypedRuleContext(IdentifierInititalizerContext,i);
    }
};

GlobalConstantDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterGlobalConstantDeclaration(this);
	}
};

GlobalConstantDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitGlobalConstantDeclaration(this);
	}
};




PHPParser.GlobalConstantDeclarationContext = GlobalConstantDeclarationContext;

PHPParser.prototype.globalConstantDeclaration = function() {

    var localctx = new GlobalConstantDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, PHPParser.RULE_globalConstantDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1037;
        this.attributes();
        this.state = 1038;
        this.match(PHPParser.Const);
        this.state = 1039;
        this.identifierInititalizer();
        this.state = 1044;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 1040;
            this.match(PHPParser.Comma);
            this.state = 1041;
            this.identifierInititalizer();
            this.state = 1046;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1047;
        this.match(PHPParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitExpressionList(this);
	}
};




PHPParser.ExpressionListContext = ExpressionListContext;

PHPParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, PHPParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1049;
        this.expression(0);
        this.state = 1054;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 1050;
            this.match(PHPParser.Comma);
            this.state = 1051;
            this.expression(0);
            this.state = 1056;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParenthesisContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_parenthesis;
    return this;
}

ParenthesisContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParenthesisContext.prototype.constructor = ParenthesisContext;

ParenthesisContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParenthesisContext.prototype.yieldExpression = function() {
    return this.getTypedRuleContext(YieldExpressionContext,0);
};

ParenthesisContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterParenthesis(this);
	}
};

ParenthesisContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitParenthesis(this);
	}
};




PHPParser.ParenthesisContext = ParenthesisContext;

PHPParser.prototype.parenthesis = function() {

    var localctx = new ParenthesisContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, PHPParser.RULE_parenthesis);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1057;
        this.match(PHPParser.OpenRoundBracket);
        this.state = 1060;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1058;
            this.expression(0);
            break;

        case 2:
            this.state = 1059;
            this.yieldExpression();
            break;

        }
        this.state = 1062;
        this.match(PHPParser.CloseRoundBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ChainExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChainExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ChainExpressionContext.prototype.constructor = ChainExpressionContext;

PHPParser.ChainExpressionContext = ChainExpressionContext;

ChainExpressionContext.prototype.chain = function() {
    return this.getTypedRuleContext(ChainContext,0);
};
ChainExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterChainExpression(this);
	}
};

ChainExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitChainExpression(this);
	}
};


function UnaryOperatorExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryOperatorExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnaryOperatorExpressionContext.prototype.constructor = UnaryOperatorExpressionContext;

PHPParser.UnaryOperatorExpressionContext = UnaryOperatorExpressionContext;

UnaryOperatorExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
UnaryOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterUnaryOperatorExpression(this);
	}
};

UnaryOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitUnaryOperatorExpression(this);
	}
};


function SpecialWordExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SpecialWordExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SpecialWordExpressionContext.prototype.constructor = SpecialWordExpressionContext;

PHPParser.SpecialWordExpressionContext = SpecialWordExpressionContext;

SpecialWordExpressionContext.prototype.Yield = function() {
    return this.getToken(PHPParser.Yield, 0);
};

SpecialWordExpressionContext.prototype.List = function() {
    return this.getToken(PHPParser.List, 0);
};

SpecialWordExpressionContext.prototype.assignmentList = function() {
    return this.getTypedRuleContext(AssignmentListContext,0);
};

SpecialWordExpressionContext.prototype.Eq = function() {
    return this.getToken(PHPParser.Eq, 0);
};

SpecialWordExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SpecialWordExpressionContext.prototype.IsSet = function() {
    return this.getToken(PHPParser.IsSet, 0);
};

SpecialWordExpressionContext.prototype.chainList = function() {
    return this.getTypedRuleContext(ChainListContext,0);
};

SpecialWordExpressionContext.prototype.Empty = function() {
    return this.getToken(PHPParser.Empty, 0);
};

SpecialWordExpressionContext.prototype.chain = function() {
    return this.getTypedRuleContext(ChainContext,0);
};

SpecialWordExpressionContext.prototype.Eval = function() {
    return this.getToken(PHPParser.Eval, 0);
};

SpecialWordExpressionContext.prototype.Exit = function() {
    return this.getToken(PHPParser.Exit, 0);
};

SpecialWordExpressionContext.prototype.parenthesis = function() {
    return this.getTypedRuleContext(ParenthesisContext,0);
};

SpecialWordExpressionContext.prototype.Include = function() {
    return this.getToken(PHPParser.Include, 0);
};

SpecialWordExpressionContext.prototype.IncludeOnce = function() {
    return this.getToken(PHPParser.IncludeOnce, 0);
};

SpecialWordExpressionContext.prototype.Require = function() {
    return this.getToken(PHPParser.Require, 0);
};

SpecialWordExpressionContext.prototype.RequireOnce = function() {
    return this.getToken(PHPParser.RequireOnce, 0);
};
SpecialWordExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterSpecialWordExpression(this);
	}
};

SpecialWordExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitSpecialWordExpression(this);
	}
};


function ArrayCreationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayCreationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ArrayCreationExpressionContext.prototype.constructor = ArrayCreationExpressionContext;

PHPParser.ArrayCreationExpressionContext = ArrayCreationExpressionContext;

ArrayCreationExpressionContext.prototype.Array = function() {
    return this.getToken(PHPParser.Array, 0);
};

ArrayCreationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ArrayCreationExpressionContext.prototype.arrayItemList = function() {
    return this.getTypedRuleContext(ArrayItemListContext,0);
};
ArrayCreationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterArrayCreationExpression(this);
	}
};

ArrayCreationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitArrayCreationExpression(this);
	}
};


function NewExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewExpressionContext.prototype = Object.create(ExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

PHPParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.newExpr = function() {
    return this.getTypedRuleContext(NewExprContext,0);
};
NewExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterNewExpression(this);
	}
};

NewExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitNewExpression(this);
	}
};


function ParenthesisExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesisExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ParenthesisExpressionContext.prototype.constructor = ParenthesisExpressionContext;

PHPParser.ParenthesisExpressionContext = ParenthesisExpressionContext;

ParenthesisExpressionContext.prototype.parenthesis = function() {
    return this.getTypedRuleContext(ParenthesisContext,0);
};
ParenthesisExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterParenthesisExpression(this);
	}
};

ParenthesisExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitParenthesisExpression(this);
	}
};


function BackQuoteStringExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BackQuoteStringExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BackQuoteStringExpressionContext.prototype.constructor = BackQuoteStringExpressionContext;

PHPParser.BackQuoteStringExpressionContext = BackQuoteStringExpressionContext;

BackQuoteStringExpressionContext.prototype.BackQuoteString = function() {
    return this.getToken(PHPParser.BackQuoteString, 0);
};
BackQuoteStringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterBackQuoteStringExpression(this);
	}
};

BackQuoteStringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitBackQuoteStringExpression(this);
	}
};


function ConditionalExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

PHPParser.ConditionalExpressionContext = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ConditionalExpressionContext.prototype.QuestionMark = function() {
    return this.getToken(PHPParser.QuestionMark, 0);
};
ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitConditionalExpression(this);
	}
};


function ArithmeticExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ArithmeticExpressionContext.prototype.constructor = ArithmeticExpressionContext;

PHPParser.ArithmeticExpressionContext = ArithmeticExpressionContext;

ArithmeticExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArithmeticExpressionContext.prototype.Divide = function() {
    return this.getToken(PHPParser.Divide, 0);
};
ArithmeticExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterArithmeticExpression(this);
	}
};

ArithmeticExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitArithmeticExpression(this);
	}
};


function IndexerExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IndexerExpressionContext.prototype = Object.create(ExpressionContext.prototype);
IndexerExpressionContext.prototype.constructor = IndexerExpressionContext;

PHPParser.IndexerExpressionContext = IndexerExpressionContext;

IndexerExpressionContext.prototype.stringConstant = function() {
    return this.getTypedRuleContext(StringConstantContext,0);
};

IndexerExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
IndexerExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterIndexerExpression(this);
	}
};

IndexerExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitIndexerExpression(this);
	}
};


function ScalarExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ScalarExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ScalarExpressionContext.prototype.constructor = ScalarExpressionContext;

PHPParser.ScalarExpressionContext = ScalarExpressionContext;

ScalarExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ScalarExpressionContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

ScalarExpressionContext.prototype.Label = function() {
    return this.getToken(PHPParser.Label, 0);
};
ScalarExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterScalarExpression(this);
	}
};

ScalarExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitScalarExpression(this);
	}
};


function PrefixIncDecExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrefixIncDecExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PrefixIncDecExpressionContext.prototype.constructor = PrefixIncDecExpressionContext;

PHPParser.PrefixIncDecExpressionContext = PrefixIncDecExpressionContext;

PrefixIncDecExpressionContext.prototype.chain = function() {
    return this.getTypedRuleContext(ChainContext,0);
};
PrefixIncDecExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterPrefixIncDecExpression(this);
	}
};

PrefixIncDecExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitPrefixIncDecExpression(this);
	}
};


function ComparisonExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ComparisonExpressionContext.prototype.constructor = ComparisonExpressionContext;

PHPParser.ComparisonExpressionContext = ComparisonExpressionContext;

ComparisonExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ComparisonExpressionContext.prototype.Less = function() {
    return this.getToken(PHPParser.Less, 0);
};

ComparisonExpressionContext.prototype.Greater = function() {
    return this.getToken(PHPParser.Greater, 0);
};

ComparisonExpressionContext.prototype.IsNotEq = function() {
    return this.getToken(PHPParser.IsNotEq, 0);
};
ComparisonExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterComparisonExpression(this);
	}
};

ComparisonExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitComparisonExpression(this);
	}
};


function LogicalExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LogicalExpressionContext.prototype.constructor = LogicalExpressionContext;

PHPParser.LogicalExpressionContext = LogicalExpressionContext;

LogicalExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LogicalExpressionContext.prototype.LogicalAnd = function() {
    return this.getToken(PHPParser.LogicalAnd, 0);
};

LogicalExpressionContext.prototype.LogicalXor = function() {
    return this.getToken(PHPParser.LogicalXor, 0);
};

LogicalExpressionContext.prototype.LogicalOr = function() {
    return this.getToken(PHPParser.LogicalOr, 0);
};
LogicalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterLogicalExpression(this);
	}
};

LogicalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitLogicalExpression(this);
	}
};


function PrintExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrintExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PrintExpressionContext.prototype.constructor = PrintExpressionContext;

PHPParser.PrintExpressionContext = PrintExpressionContext;

PrintExpressionContext.prototype.Print = function() {
    return this.getToken(PHPParser.Print, 0);
};

PrintExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PrintExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterPrintExpression(this);
	}
};

PrintExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitPrintExpression(this);
	}
};


function AssignmentExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

PHPParser.AssignmentExpressionContext = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.chain = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChainContext);
    } else {
        return this.getTypedRuleContext(ChainContext,i);
    }
};

AssignmentExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

AssignmentExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssignmentExpressionContext.prototype.Eq = function() {
    return this.getToken(PHPParser.Eq, 0);
};

AssignmentExpressionContext.prototype.newExpr = function() {
    return this.getTypedRuleContext(NewExprContext,0);
};
AssignmentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAssignmentExpression(this);
	}
};

AssignmentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAssignmentExpression(this);
	}
};


function PostfixIncDecExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostfixIncDecExpressionContext.prototype = Object.create(ExpressionContext.prototype);
PostfixIncDecExpressionContext.prototype.constructor = PostfixIncDecExpressionContext;

PHPParser.PostfixIncDecExpressionContext = PostfixIncDecExpressionContext;

PostfixIncDecExpressionContext.prototype.chain = function() {
    return this.getTypedRuleContext(ChainContext,0);
};
PostfixIncDecExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterPostfixIncDecExpression(this);
	}
};

PostfixIncDecExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitPostfixIncDecExpression(this);
	}
};


function CastExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

PHPParser.CastExpressionContext = CastExpressionContext;

CastExpressionContext.prototype.castOperation = function() {
    return this.getTypedRuleContext(CastOperationContext,0);
};

CastExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitCastExpression(this);
	}
};


function InstanceOfExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceOfExpressionContext.prototype = Object.create(ExpressionContext.prototype);
InstanceOfExpressionContext.prototype.constructor = InstanceOfExpressionContext;

PHPParser.InstanceOfExpressionContext = InstanceOfExpressionContext;

InstanceOfExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InstanceOfExpressionContext.prototype.InstanceOf = function() {
    return this.getToken(PHPParser.InstanceOf, 0);
};

InstanceOfExpressionContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};
InstanceOfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterInstanceOfExpression(this);
	}
};

InstanceOfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitInstanceOfExpression(this);
	}
};


function LambdaFunctionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LambdaFunctionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
LambdaFunctionExpressionContext.prototype.constructor = LambdaFunctionExpressionContext;

PHPParser.LambdaFunctionExpressionContext = LambdaFunctionExpressionContext;

LambdaFunctionExpressionContext.prototype.Function = function() {
    return this.getToken(PHPParser.Function, 0);
};

LambdaFunctionExpressionContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

LambdaFunctionExpressionContext.prototype.blockStatement = function() {
    return this.getTypedRuleContext(BlockStatementContext,0);
};

LambdaFunctionExpressionContext.prototype.Static = function() {
    return this.getToken(PHPParser.Static, 0);
};

LambdaFunctionExpressionContext.prototype.lambdaFunctionUseVars = function() {
    return this.getTypedRuleContext(LambdaFunctionUseVarsContext,0);
};
LambdaFunctionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterLambdaFunctionExpression(this);
	}
};

LambdaFunctionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitLambdaFunctionExpression(this);
	}
};


function BitwiseExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitwiseExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BitwiseExpressionContext.prototype.constructor = BitwiseExpressionContext;

PHPParser.BitwiseExpressionContext = BitwiseExpressionContext;

BitwiseExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
BitwiseExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterBitwiseExpression(this);
	}
};

BitwiseExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitBitwiseExpression(this);
	}
};


function CloneExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CloneExpressionContext.prototype = Object.create(ExpressionContext.prototype);
CloneExpressionContext.prototype.constructor = CloneExpressionContext;

PHPParser.CloneExpressionContext = CloneExpressionContext;

CloneExpressionContext.prototype.Clone = function() {
    return this.getToken(PHPParser.Clone, 0);
};

CloneExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
CloneExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterCloneExpression(this);
	}
};

CloneExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitCloneExpression(this);
	}
};



PHPParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 166;
    this.enterRecursionRule(localctx, 166, PHPParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1173;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CloneExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1065;
            this.match(PHPParser.Clone);
            this.state = 1066;
            this.expression(43);
            break;

        case 2:
            localctx = new NewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1067;
            this.newExpr();
            break;

        case 3:
            localctx = new IndexerExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1068;
            this.stringConstant();
            this.state = 1069;
            this.match(PHPParser.OpenSquareBracket);
            this.state = 1070;
            this.expression(0);
            this.state = 1071;
            this.match(PHPParser.CloseSquareBracket);
            break;

        case 4:
            localctx = new CastExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1073;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 1074;
            this.castOperation();
            this.state = 1075;
            this.match(PHPParser.CloseRoundBracket);
            this.state = 1076;
            this.expression(40);
            break;

        case 5:
            localctx = new UnaryOperatorExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1078;
            _la = this._input.LA(1);
            if(!(_la===PHPParser.Tilde || _la===PHPParser.SuppressWarnings)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1079;
            this.expression(39);
            break;

        case 6:
            localctx = new UnaryOperatorExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1080;
            _la = this._input.LA(1);
            if(!(((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (PHPParser.Bang - 185)) | (1 << (PHPParser.Plus - 185)) | (1 << (PHPParser.Minus - 185)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1081;
            this.expression(38);
            break;

        case 7:
            localctx = new PrefixIncDecExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1082;
            _la = this._input.LA(1);
            if(!(_la===PHPParser.Inc || _la===PHPParser.Dec)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1083;
            this.chain();
            break;

        case 8:
            localctx = new PostfixIncDecExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1084;
            this.chain();
            this.state = 1085;
            _la = this._input.LA(1);
            if(!(_la===PHPParser.Inc || _la===PHPParser.Dec)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            break;

        case 9:
            localctx = new AssignmentExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1087;
            this.chain();
            this.state = 1088;
            this.assignmentOperator();
            this.state = 1089;
            this.expression(35);
            break;

        case 10:
            localctx = new AssignmentExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1091;
            this.chain();
            this.state = 1092;
            this.match(PHPParser.Eq);
            this.state = 1093;
            this.match(PHPParser.Ampersand);
            this.state = 1096;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1094;
                this.chain();
                break;

            case 2:
                this.state = 1095;
                this.newExpr();
                break;

            }
            break;

        case 11:
            localctx = new PrintExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1098;
            this.match(PHPParser.Print);
            this.state = 1099;
            this.expression(33);
            break;

        case 12:
            localctx = new ChainExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1100;
            this.chain();
            break;

        case 13:
            localctx = new ScalarExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1101;
            this.constant();
            break;

        case 14:
            localctx = new ScalarExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1102;
            this.string();
            break;

        case 15:
            localctx = new ScalarExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1103;
            this.match(PHPParser.Label);
            break;

        case 16:
            localctx = new BackQuoteStringExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1104;
            this.match(PHPParser.BackQuoteString);
            break;

        case 17:
            localctx = new ParenthesisExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1105;
            this.parenthesis();
            break;

        case 18:
            localctx = new ArrayCreationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1117;
            switch(this._input.LA(1)) {
            case PHPParser.Array:
                this.state = 1106;
                this.match(PHPParser.Array);
                this.state = 1107;
                this.match(PHPParser.OpenRoundBracket);
                this.state = 1109;
                _la = this._input.LA(1);
                if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Ampersand - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
                    this.state = 1108;
                    this.arrayItemList();
                }

                this.state = 1111;
                this.match(PHPParser.CloseRoundBracket);
                break;
            case PHPParser.OpenSquareBracket:
                this.state = 1112;
                this.match(PHPParser.OpenSquareBracket);
                this.state = 1114;
                _la = this._input.LA(1);
                if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Ampersand - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
                    this.state = 1113;
                    this.arrayItemList();
                }

                this.state = 1116;
                this.match(PHPParser.CloseSquareBracket);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1123;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
            if(la_===1) {
                this.state = 1119;
                this.match(PHPParser.OpenSquareBracket);
                this.state = 1120;
                this.expression(0);
                this.state = 1121;
                this.match(PHPParser.CloseSquareBracket);

            }
            break;

        case 19:
            localctx = new SpecialWordExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1125;
            this.match(PHPParser.Yield);
            break;

        case 20:
            localctx = new SpecialWordExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1126;
            this.match(PHPParser.List);
            this.state = 1127;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 1128;
            this.assignmentList();
            this.state = 1129;
            this.match(PHPParser.CloseRoundBracket);
            this.state = 1130;
            this.match(PHPParser.Eq);
            this.state = 1131;
            this.expression(24);
            break;

        case 21:
            localctx = new SpecialWordExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1133;
            this.match(PHPParser.IsSet);
            this.state = 1134;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 1135;
            this.chainList();
            this.state = 1136;
            this.match(PHPParser.CloseRoundBracket);
            break;

        case 22:
            localctx = new SpecialWordExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1138;
            this.match(PHPParser.Empty);
            this.state = 1139;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 1140;
            this.chain();
            this.state = 1141;
            this.match(PHPParser.CloseRoundBracket);
            break;

        case 23:
            localctx = new SpecialWordExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1143;
            this.match(PHPParser.Eval);
            this.state = 1144;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 1145;
            this.expression(0);
            this.state = 1146;
            this.match(PHPParser.CloseRoundBracket);
            break;

        case 24:
            localctx = new SpecialWordExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1148;
            this.match(PHPParser.Exit);
            this.state = 1152;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
            if(la_===1) {
                this.state = 1149;
                this.match(PHPParser.OpenRoundBracket);
                this.state = 1150;
                this.match(PHPParser.CloseRoundBracket);

            } else if(la_===2) {
                this.state = 1151;
                this.parenthesis();

            }
            break;

        case 25:
            localctx = new SpecialWordExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1154;
            _la = this._input.LA(1);
            if(!(_la===PHPParser.Include || _la===PHPParser.IncludeOnce)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1155;
            this.expression(19);
            break;

        case 26:
            localctx = new SpecialWordExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1156;
            _la = this._input.LA(1);
            if(!(_la===PHPParser.Require || _la===PHPParser.RequireOnce)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1157;
            this.expression(18);
            break;

        case 27:
            localctx = new LambdaFunctionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1159;
            _la = this._input.LA(1);
            if(_la===PHPParser.Static) {
                this.state = 1158;
                this.match(PHPParser.Static);
            }

            this.state = 1161;
            this.match(PHPParser.Function);
            this.state = 1163;
            _la = this._input.LA(1);
            if(_la===PHPParser.Ampersand) {
                this.state = 1162;
                this.match(PHPParser.Ampersand);
            }

            this.state = 1165;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 1166;
            this.formalParameterList();
            this.state = 1167;
            this.match(PHPParser.CloseRoundBracket);
            this.state = 1169;
            _la = this._input.LA(1);
            if(_la===PHPParser.Use) {
                this.state = 1168;
                this.lambdaFunctionUseVars();
            }

            this.state = 1171;
            this.blockStatement();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1229;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1227;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1175;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1176;
                    this.match(PHPParser.Pow);
                    this.state = 1177;
                    this.expression(16);
                    break;

                case 2:
                    localctx = new ArithmeticExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1178;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1179;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PHPParser.Asterisk - 189)) | (1 << (PHPParser.Percent - 189)) | (1 << (PHPParser.Divide - 189)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1180;
                    this.expression(15);
                    break;

                case 3:
                    localctx = new ArithmeticExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1181;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1182;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 187)) & ~0x1f) == 0 && ((1 << (_la - 187)) & ((1 << (PHPParser.Plus - 187)) | (1 << (PHPParser.Minus - 187)) | (1 << (PHPParser.Dot - 187)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1183;
                    this.expression(14);
                    break;

                case 4:
                    localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1184;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1185;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===PHPParser.ShiftLeft || _la===PHPParser.ShiftRight)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1186;
                    this.expression(13);
                    break;

                case 5:
                    localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1187;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1188;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (PHPParser.IsSmallerOrEqual - 158)) | (1 << (PHPParser.IsGreaterOrEqual - 158)) | (1 << (PHPParser.Less - 158)) | (1 << (PHPParser.Greater - 158)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1189;
                    this.expression(12);
                    break;

                case 6:
                    localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1190;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1191;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 154)) & ~0x1f) == 0 && ((1 << (_la - 154)) & ((1 << (PHPParser.IsIdentical - 154)) | (1 << (PHPParser.IsNoidentical - 154)) | (1 << (PHPParser.IsEqual - 154)) | (1 << (PHPParser.IsNotEq - 154)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1192;
                    this.expression(11);
                    break;

                case 7:
                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1193;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1194;
                    localctx.op = this.match(PHPParser.Ampersand);
                    this.state = 1195;
                    this.expression(10);
                    break;

                case 8:
                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1196;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1197;
                    localctx.op = this.match(PHPParser.Caret);
                    this.state = 1198;
                    this.expression(9);
                    break;

                case 9:
                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1199;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1200;
                    localctx.op = this.match(PHPParser.Pipe);
                    this.state = 1201;
                    this.expression(8);
                    break;

                case 10:
                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1202;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1203;
                    localctx.op = this.match(PHPParser.BooleanAnd);
                    this.state = 1204;
                    this.expression(7);
                    break;

                case 11:
                    localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1205;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1206;
                    localctx.op = this.match(PHPParser.BooleanOr);
                    this.state = 1207;
                    this.expression(6);
                    break;

                case 12:
                    localctx = new ConditionalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1208;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1209;
                    localctx.op = this.match(PHPParser.QuestionMark);
                    this.state = 1211;
                    _la = this._input.LA(1);
                    if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
                        this.state = 1210;
                        this.expression(0);
                    }

                    this.state = 1213;
                    this.match(PHPParser.Colon);
                    this.state = 1214;
                    this.expression(5);
                    break;

                case 13:
                    localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1215;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1216;
                    localctx.op = this.match(PHPParser.LogicalAnd);
                    this.state = 1217;
                    this.expression(4);
                    break;

                case 14:
                    localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1218;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1219;
                    localctx.op = this.match(PHPParser.LogicalXor);
                    this.state = 1220;
                    this.expression(3);
                    break;

                case 15:
                    localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1221;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1222;
                    localctx.op = this.match(PHPParser.LogicalOr);
                    this.state = 1223;
                    this.expression(2);
                    break;

                case 16:
                    localctx = new InstanceOfExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, PHPParser.RULE_expression);
                    this.state = 1224;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1225;
                    this.match(PHPParser.InstanceOf);
                    this.state = 1226;
                    this.typeRef();
                    break;

                } 
            }
            this.state = 1231;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function NewExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_newExpr;
    return this;
}

NewExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewExprContext.prototype.constructor = NewExprContext;

NewExprContext.prototype.New = function() {
    return this.getToken(PHPParser.New, 0);
};

NewExprContext.prototype.typeRef = function() {
    return this.getTypedRuleContext(TypeRefContext,0);
};

NewExprContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

NewExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterNewExpr(this);
	}
};

NewExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitNewExpr(this);
	}
};




PHPParser.NewExprContext = NewExprContext;

PHPParser.prototype.newExpr = function() {

    var localctx = new NewExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, PHPParser.RULE_newExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this.match(PHPParser.New);
        this.state = 1233;
        this.typeRef();
        this.state = 1235;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
        if(la_===1) {
            this.state = 1234;
            this.arguments();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.Eq = function() {
    return this.getToken(PHPParser.Eq, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAssignmentOperator(this);
	}
};




PHPParser.AssignmentOperatorContext = AssignmentOperatorContext;

PHPParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, PHPParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1237;
        _la = this._input.LA(1);
        if(!(((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (PHPParser.PlusEqual - 160)) | (1 << (PHPParser.MinusEqual - 160)) | (1 << (PHPParser.MulEqual - 160)) | (1 << (PHPParser.PowEqual - 160)) | (1 << (PHPParser.DivEqual - 160)) | (1 << (PHPParser.Concaequal - 160)) | (1 << (PHPParser.ModEqual - 160)) | (1 << (PHPParser.ShiftLeftEqual - 160)) | (1 << (PHPParser.ShiftRightEqual - 160)) | (1 << (PHPParser.AndEqual - 160)) | (1 << (PHPParser.OrEqual - 160)) | (1 << (PHPParser.XorEqual - 160)))) !== 0) || _la===PHPParser.Eq)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function YieldExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_yieldExpression;
    return this;
}

YieldExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YieldExpressionContext.prototype.constructor = YieldExpressionContext;

YieldExpressionContext.prototype.Yield = function() {
    return this.getToken(PHPParser.Yield, 0);
};

YieldExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

YieldExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterYieldExpression(this);
	}
};

YieldExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitYieldExpression(this);
	}
};




PHPParser.YieldExpressionContext = YieldExpressionContext;

PHPParser.prototype.yieldExpression = function() {

    var localctx = new YieldExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, PHPParser.RULE_yieldExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1239;
        this.match(PHPParser.Yield);
        this.state = 1240;
        this.expression(0);
        this.state = 1243;
        _la = this._input.LA(1);
        if(_la===PHPParser.DoubleArrow) {
            this.state = 1241;
            this.match(PHPParser.DoubleArrow);
            this.state = 1242;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayItemListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_arrayItemList;
    return this;
}

ArrayItemListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayItemListContext.prototype.constructor = ArrayItemListContext;

ArrayItemListContext.prototype.arrayItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayItemContext);
    } else {
        return this.getTypedRuleContext(ArrayItemContext,i);
    }
};

ArrayItemListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterArrayItemList(this);
	}
};

ArrayItemListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitArrayItemList(this);
	}
};




PHPParser.ArrayItemListContext = ArrayItemListContext;

PHPParser.prototype.arrayItemList = function() {

    var localctx = new ArrayItemListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, PHPParser.RULE_arrayItemList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1245;
        this.arrayItem();
        this.state = 1250;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,124,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1246;
                this.match(PHPParser.Comma);
                this.state = 1247;
                this.arrayItem(); 
            }
            this.state = 1252;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,124,this._ctx);
        }

        this.state = 1254;
        _la = this._input.LA(1);
        if(_la===PHPParser.Comma) {
            this.state = 1253;
            this.match(PHPParser.Comma);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_arrayItem;
    return this;
}

ArrayItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayItemContext.prototype.constructor = ArrayItemContext;

ArrayItemContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayItemContext.prototype.chain = function() {
    return this.getTypedRuleContext(ChainContext,0);
};

ArrayItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterArrayItem(this);
	}
};

ArrayItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitArrayItem(this);
	}
};




PHPParser.ArrayItemContext = ArrayItemContext;

PHPParser.prototype.arrayItem = function() {

    var localctx = new ArrayItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, PHPParser.RULE_arrayItem);
    var _la = 0; // Token type
    try {
        this.state = 1268;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1256;
            this.expression(0);
            this.state = 1259;
            _la = this._input.LA(1);
            if(_la===PHPParser.DoubleArrow) {
                this.state = 1257;
                this.match(PHPParser.DoubleArrow);
                this.state = 1258;
                this.expression(0);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1264;
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
                this.state = 1261;
                this.expression(0);
                this.state = 1262;
                this.match(PHPParser.DoubleArrow);
            }

            this.state = 1266;
            this.match(PHPParser.Ampersand);
            this.state = 1267;
            this.chain();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdaFunctionUseVarsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_lambdaFunctionUseVars;
    return this;
}

LambdaFunctionUseVarsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaFunctionUseVarsContext.prototype.constructor = LambdaFunctionUseVarsContext;

LambdaFunctionUseVarsContext.prototype.Use = function() {
    return this.getToken(PHPParser.Use, 0);
};

LambdaFunctionUseVarsContext.prototype.lambdaFunctionUseVar = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LambdaFunctionUseVarContext);
    } else {
        return this.getTypedRuleContext(LambdaFunctionUseVarContext,i);
    }
};

LambdaFunctionUseVarsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterLambdaFunctionUseVars(this);
	}
};

LambdaFunctionUseVarsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitLambdaFunctionUseVars(this);
	}
};




PHPParser.LambdaFunctionUseVarsContext = LambdaFunctionUseVarsContext;

PHPParser.prototype.lambdaFunctionUseVars = function() {

    var localctx = new LambdaFunctionUseVarsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, PHPParser.RULE_lambdaFunctionUseVars);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1270;
        this.match(PHPParser.Use);
        this.state = 1271;
        this.match(PHPParser.OpenRoundBracket);
        this.state = 1272;
        this.lambdaFunctionUseVar();
        this.state = 1277;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 1273;
            this.match(PHPParser.Comma);
            this.state = 1274;
            this.lambdaFunctionUseVar();
            this.state = 1279;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1280;
        this.match(PHPParser.CloseRoundBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdaFunctionUseVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_lambdaFunctionUseVar;
    return this;
}

LambdaFunctionUseVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdaFunctionUseVarContext.prototype.constructor = LambdaFunctionUseVarContext;

LambdaFunctionUseVarContext.prototype.VarName = function() {
    return this.getToken(PHPParser.VarName, 0);
};

LambdaFunctionUseVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterLambdaFunctionUseVar(this);
	}
};

LambdaFunctionUseVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitLambdaFunctionUseVar(this);
	}
};




PHPParser.LambdaFunctionUseVarContext = LambdaFunctionUseVarContext;

PHPParser.prototype.lambdaFunctionUseVar = function() {

    var localctx = new LambdaFunctionUseVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, PHPParser.RULE_lambdaFunctionUseVar);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1283;
        _la = this._input.LA(1);
        if(_la===PHPParser.Ampersand) {
            this.state = 1282;
            this.match(PHPParser.Ampersand);
        }

        this.state = 1285;
        this.match(PHPParser.VarName);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedStaticTypeRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_qualifiedStaticTypeRef;
    return this;
}

QualifiedStaticTypeRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedStaticTypeRefContext.prototype.constructor = QualifiedStaticTypeRefContext;

QualifiedStaticTypeRefContext.prototype.qualifiedNamespaceName = function() {
    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
};

QualifiedStaticTypeRefContext.prototype.genericDynamicArgs = function() {
    return this.getTypedRuleContext(GenericDynamicArgsContext,0);
};

QualifiedStaticTypeRefContext.prototype.Static = function() {
    return this.getToken(PHPParser.Static, 0);
};

QualifiedStaticTypeRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterQualifiedStaticTypeRef(this);
	}
};

QualifiedStaticTypeRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitQualifiedStaticTypeRef(this);
	}
};




PHPParser.QualifiedStaticTypeRefContext = QualifiedStaticTypeRefContext;

PHPParser.prototype.qualifiedStaticTypeRef = function() {

    var localctx = new QualifiedStaticTypeRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, PHPParser.RULE_qualifiedStaticTypeRef);
    var _la = 0; // Token type
    try {
        this.state = 1292;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1287;
            this.qualifiedNamespaceName();
            this.state = 1289;
            _la = this._input.LA(1);
            if(_la===PHPParser.Lgeneric) {
                this.state = 1288;
                this.genericDynamicArgs();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1291;
            this.match(PHPParser.Static);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_typeRef;
    return this;
}

TypeRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeRefContext.prototype.constructor = TypeRefContext;

TypeRefContext.prototype.qualifiedNamespaceName = function() {
    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
};

TypeRefContext.prototype.indirectTypeRef = function() {
    return this.getTypedRuleContext(IndirectTypeRefContext,0);
};

TypeRefContext.prototype.genericDynamicArgs = function() {
    return this.getTypedRuleContext(GenericDynamicArgsContext,0);
};

TypeRefContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

TypeRefContext.prototype.Static = function() {
    return this.getToken(PHPParser.Static, 0);
};

TypeRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterTypeRef(this);
	}
};

TypeRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitTypeRef(this);
	}
};




PHPParser.TypeRefContext = TypeRefContext;

PHPParser.prototype.typeRef = function() {

    var localctx = new TypeRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, PHPParser.RULE_typeRef);
    try {
        this.state = 1303;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1296;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1294;
                this.qualifiedNamespaceName();
                break;

            case 2:
                this.state = 1295;
                this.indirectTypeRef();
                break;

            }
            this.state = 1299;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
            if(la_===1) {
                this.state = 1298;
                this.genericDynamicArgs();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1301;
            this.primitiveType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1302;
            this.match(PHPParser.Static);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndirectTypeRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_indirectTypeRef;
    return this;
}

IndirectTypeRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndirectTypeRefContext.prototype.constructor = IndirectTypeRefContext;

IndirectTypeRefContext.prototype.chainBase = function() {
    return this.getTypedRuleContext(ChainBaseContext,0);
};

IndirectTypeRefContext.prototype.keyedFieldName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyedFieldNameContext);
    } else {
        return this.getTypedRuleContext(KeyedFieldNameContext,i);
    }
};

IndirectTypeRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterIndirectTypeRef(this);
	}
};

IndirectTypeRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitIndirectTypeRef(this);
	}
};




PHPParser.IndirectTypeRefContext = IndirectTypeRefContext;

PHPParser.prototype.indirectTypeRef = function() {

    var localctx = new IndirectTypeRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, PHPParser.RULE_indirectTypeRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1305;
        this.chainBase();
        this.state = 1310;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1306;
                this.match(PHPParser.ObjectOperator);
                this.state = 1307;
                this.keyedFieldName(); 
            }
            this.state = 1312;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNamespaceNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_qualifiedNamespaceName;
    return this;
}

QualifiedNamespaceNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNamespaceNameContext.prototype.constructor = QualifiedNamespaceNameContext;

QualifiedNamespaceNameContext.prototype.namespaceNameList = function() {
    return this.getTypedRuleContext(NamespaceNameListContext,0);
};

QualifiedNamespaceNameContext.prototype.Namespace = function() {
    return this.getToken(PHPParser.Namespace, 0);
};

QualifiedNamespaceNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterQualifiedNamespaceName(this);
	}
};

QualifiedNamespaceNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitQualifiedNamespaceName(this);
	}
};




PHPParser.QualifiedNamespaceNameContext = QualifiedNamespaceNameContext;

PHPParser.prototype.qualifiedNamespaceName = function() {

    var localctx = new QualifiedNamespaceNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, PHPParser.RULE_qualifiedNamespaceName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1314;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        if(la_===1) {
            this.state = 1313;
            this.match(PHPParser.Namespace);

        }
        this.state = 1317;
        _la = this._input.LA(1);
        if(_la===PHPParser.NamespaceSeparator) {
            this.state = 1316;
            this.match(PHPParser.NamespaceSeparator);
        }

        this.state = 1319;
        this.namespaceNameList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_namespaceNameList;
    return this;
}

NamespaceNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceNameListContext.prototype.constructor = NamespaceNameListContext;

NamespaceNameListContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

NamespaceNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterNamespaceNameList(this);
	}
};

NamespaceNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitNamespaceNameList(this);
	}
};




PHPParser.NamespaceNameListContext = NamespaceNameListContext;

PHPParser.prototype.namespaceNameList = function() {

    var localctx = new NamespaceNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, PHPParser.RULE_namespaceNameList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1321;
        this.identifier();
        this.state = 1326;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1322;
                this.match(PHPParser.NamespaceSeparator);
                this.state = 1323;
                this.identifier(); 
            }
            this.state = 1328;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNamespaceNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_qualifiedNamespaceNameList;
    return this;
}

QualifiedNamespaceNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNamespaceNameListContext.prototype.constructor = QualifiedNamespaceNameListContext;

QualifiedNamespaceNameListContext.prototype.qualifiedNamespaceName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNamespaceNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNamespaceNameContext,i);
    }
};

QualifiedNamespaceNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterQualifiedNamespaceNameList(this);
	}
};

QualifiedNamespaceNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitQualifiedNamespaceNameList(this);
	}
};




PHPParser.QualifiedNamespaceNameListContext = QualifiedNamespaceNameListContext;

PHPParser.prototype.qualifiedNamespaceNameList = function() {

    var localctx = new QualifiedNamespaceNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, PHPParser.RULE_qualifiedNamespaceNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1329;
        this.qualifiedNamespaceName();
        this.state = 1334;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 1330;
            this.match(PHPParser.Comma);
            this.state = 1331;
            this.qualifiedNamespaceName();
            this.state = 1336;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.actualArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActualArgumentContext);
    } else {
        return this.getTypedRuleContext(ActualArgumentContext,i);
    }
};

ArgumentsContext.prototype.yieldExpression = function() {
    return this.getTypedRuleContext(YieldExpressionContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitArguments(this);
	}
};




PHPParser.ArgumentsContext = ArgumentsContext;

PHPParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, PHPParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1337;
        this.match(PHPParser.OpenRoundBracket);
        this.state = 1347;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
        if(la_===1) {
            this.state = 1338;
            this.actualArgument();
            this.state = 1343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PHPParser.Comma) {
                this.state = 1339;
                this.match(PHPParser.Comma);
                this.state = 1340;
                this.actualArgument();
                this.state = 1345;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        } else if(la_===2) {
            this.state = 1346;
            this.yieldExpression();

        }
        this.state = 1349;
        this.match(PHPParser.CloseRoundBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ActualArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_actualArgument;
    return this;
}

ActualArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActualArgumentContext.prototype.constructor = ActualArgumentContext;

ActualArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ActualArgumentContext.prototype.chain = function() {
    return this.getTypedRuleContext(ChainContext,0);
};

ActualArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterActualArgument(this);
	}
};

ActualArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitActualArgument(this);
	}
};




PHPParser.ActualArgumentContext = ActualArgumentContext;

PHPParser.prototype.actualArgument = function() {

    var localctx = new ActualArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, PHPParser.RULE_actualArgument);
    var _la = 0; // Token type
    try {
        this.state = 1357;
        switch(this._input.LA(1)) {
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.Inc:
        case PHPParser.Dec:
        case PHPParser.NamespaceSeparator:
        case PHPParser.Ellipsis:
        case PHPParser.Bang:
        case PHPParser.Plus:
        case PHPParser.Minus:
        case PHPParser.Tilde:
        case PHPParser.SuppressWarnings:
        case PHPParser.Dollar:
        case PHPParser.OpenRoundBracket:
        case PHPParser.OpenSquareBracket:
        case PHPParser.VarName:
        case PHPParser.Label:
        case PHPParser.Octal:
        case PHPParser.Decimal:
        case PHPParser.Real:
        case PHPParser.Hex:
        case PHPParser.Binary:
        case PHPParser.BackQuoteString:
        case PHPParser.SingleQuoteString:
        case PHPParser.DoubleQuote:
        case PHPParser.StartNowDoc:
        case PHPParser.StartHereDoc:
            this.enterOuterAlt(localctx, 1);
            this.state = 1352;
            _la = this._input.LA(1);
            if(_la===PHPParser.Ellipsis) {
                this.state = 1351;
                this.match(PHPParser.Ellipsis);
            }

            this.state = 1354;
            this.expression(0);
            break;
        case PHPParser.Ampersand:
            this.enterOuterAlt(localctx, 2);
            this.state = 1355;
            this.match(PHPParser.Ampersand);
            this.state = 1356;
            this.chain();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantInititalizerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_constantInititalizer;
    return this;
}

ConstantInititalizerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantInititalizerContext.prototype.constructor = ConstantInititalizerContext;

ConstantInititalizerContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ConstantInititalizerContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

ConstantInititalizerContext.prototype.Array = function() {
    return this.getToken(PHPParser.Array, 0);
};

ConstantInititalizerContext.prototype.constantArrayItemList = function() {
    return this.getTypedRuleContext(ConstantArrayItemListContext,0);
};

ConstantInititalizerContext.prototype.constantInititalizer = function() {
    return this.getTypedRuleContext(ConstantInititalizerContext,0);
};

ConstantInititalizerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterConstantInititalizer(this);
	}
};

ConstantInititalizerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitConstantInititalizer(this);
	}
};




PHPParser.ConstantInititalizerContext = ConstantInititalizerContext;

PHPParser.prototype.constantInititalizer = function() {

    var localctx = new ConstantInititalizerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, PHPParser.RULE_constantInititalizer);
    var _la = 0; // Token type
    try {
        this.state = 1380;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1359;
            this.constant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1360;
            this.string();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1361;
            this.match(PHPParser.Array);
            this.state = 1362;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 1367;
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
                this.state = 1363;
                this.constantArrayItemList();
                this.state = 1365;
                _la = this._input.LA(1);
                if(_la===PHPParser.Comma) {
                    this.state = 1364;
                    this.match(PHPParser.Comma);
                }

            }

            this.state = 1369;
            this.match(PHPParser.CloseRoundBracket);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1370;
            this.match(PHPParser.OpenSquareBracket);
            this.state = 1375;
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
                this.state = 1371;
                this.constantArrayItemList();
                this.state = 1373;
                _la = this._input.LA(1);
                if(_la===PHPParser.Comma) {
                    this.state = 1372;
                    this.match(PHPParser.Comma);
                }

            }

            this.state = 1377;
            this.match(PHPParser.CloseSquareBracket);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1378;
            _la = this._input.LA(1);
            if(!(_la===PHPParser.Plus || _la===PHPParser.Minus)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1379;
            this.constantInititalizer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantArrayItemListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_constantArrayItemList;
    return this;
}

ConstantArrayItemListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantArrayItemListContext.prototype.constructor = ConstantArrayItemListContext;

ConstantArrayItemListContext.prototype.constantArrayItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantArrayItemContext);
    } else {
        return this.getTypedRuleContext(ConstantArrayItemContext,i);
    }
};

ConstantArrayItemListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterConstantArrayItemList(this);
	}
};

ConstantArrayItemListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitConstantArrayItemList(this);
	}
};




PHPParser.ConstantArrayItemListContext = ConstantArrayItemListContext;

PHPParser.prototype.constantArrayItemList = function() {

    var localctx = new ConstantArrayItemListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, PHPParser.RULE_constantArrayItemList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1382;
        this.constantArrayItem();
        this.state = 1387;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1383;
                this.match(PHPParser.Comma);
                this.state = 1384;
                this.constantArrayItem(); 
            }
            this.state = 1389;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantArrayItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_constantArrayItem;
    return this;
}

ConstantArrayItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantArrayItemContext.prototype.constructor = ConstantArrayItemContext;

ConstantArrayItemContext.prototype.constantInititalizer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantInititalizerContext);
    } else {
        return this.getTypedRuleContext(ConstantInititalizerContext,i);
    }
};

ConstantArrayItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterConstantArrayItem(this);
	}
};

ConstantArrayItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitConstantArrayItem(this);
	}
};




PHPParser.ConstantArrayItemContext = ConstantArrayItemContext;

PHPParser.prototype.constantArrayItem = function() {

    var localctx = new ConstantArrayItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, PHPParser.RULE_constantArrayItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1390;
        this.constantInititalizer();
        this.state = 1393;
        _la = this._input.LA(1);
        if(_la===PHPParser.DoubleArrow) {
            this.state = 1391;
            this.match(PHPParser.DoubleArrow);
            this.state = 1392;
            this.constantInititalizer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.Null = function() {
    return this.getToken(PHPParser.Null, 0);
};

ConstantContext.prototype.literalConstant = function() {
    return this.getTypedRuleContext(LiteralConstantContext,0);
};

ConstantContext.prototype.magicConstant = function() {
    return this.getTypedRuleContext(MagicConstantContext,0);
};

ConstantContext.prototype.classConstant = function() {
    return this.getTypedRuleContext(ClassConstantContext,0);
};

ConstantContext.prototype.qualifiedNamespaceName = function() {
    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitConstant(this);
	}
};




PHPParser.ConstantContext = ConstantContext;

PHPParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, PHPParser.RULE_constant);
    try {
        this.state = 1400;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1395;
            this.match(PHPParser.Null);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1396;
            this.literalConstant();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1397;
            this.magicConstant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1398;
            this.classConstant();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1399;
            this.qualifiedNamespaceName();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_literalConstant;
    return this;
}

LiteralConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralConstantContext.prototype.constructor = LiteralConstantContext;

LiteralConstantContext.prototype.Real = function() {
    return this.getToken(PHPParser.Real, 0);
};

LiteralConstantContext.prototype.BooleanConstant = function() {
    return this.getToken(PHPParser.BooleanConstant, 0);
};

LiteralConstantContext.prototype.numericConstant = function() {
    return this.getTypedRuleContext(NumericConstantContext,0);
};

LiteralConstantContext.prototype.stringConstant = function() {
    return this.getTypedRuleContext(StringConstantContext,0);
};

LiteralConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterLiteralConstant(this);
	}
};

LiteralConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitLiteralConstant(this);
	}
};




PHPParser.LiteralConstantContext = LiteralConstantContext;

PHPParser.prototype.literalConstant = function() {

    var localctx = new LiteralConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, PHPParser.RULE_literalConstant);
    try {
        this.state = 1406;
        switch(this._input.LA(1)) {
        case PHPParser.Real:
            this.enterOuterAlt(localctx, 1);
            this.state = 1402;
            this.match(PHPParser.Real);
            break;
        case PHPParser.BooleanConstant:
            this.enterOuterAlt(localctx, 2);
            this.state = 1403;
            this.match(PHPParser.BooleanConstant);
            break;
        case PHPParser.Octal:
        case PHPParser.Decimal:
        case PHPParser.Hex:
        case PHPParser.Binary:
            this.enterOuterAlt(localctx, 3);
            this.state = 1404;
            this.numericConstant();
            break;
        case PHPParser.Label:
            this.enterOuterAlt(localctx, 4);
            this.state = 1405;
            this.stringConstant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_numericConstant;
    return this;
}

NumericConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericConstantContext.prototype.constructor = NumericConstantContext;

NumericConstantContext.prototype.Octal = function() {
    return this.getToken(PHPParser.Octal, 0);
};

NumericConstantContext.prototype.Decimal = function() {
    return this.getToken(PHPParser.Decimal, 0);
};

NumericConstantContext.prototype.Hex = function() {
    return this.getToken(PHPParser.Hex, 0);
};

NumericConstantContext.prototype.Binary = function() {
    return this.getToken(PHPParser.Binary, 0);
};

NumericConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterNumericConstant(this);
	}
};

NumericConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitNumericConstant(this);
	}
};




PHPParser.NumericConstantContext = NumericConstantContext;

PHPParser.prototype.numericConstant = function() {

    var localctx = new NumericConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, PHPParser.RULE_numericConstant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1408;
        _la = this._input.LA(1);
        if(!(((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_classConstant;
    return this;
}

ClassConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassConstantContext.prototype.constructor = ClassConstantContext;

ClassConstantContext.prototype.Class = function() {
    return this.getToken(PHPParser.Class, 0);
};

ClassConstantContext.prototype.Parent_ = function() {
    return this.getToken(PHPParser.Parent_, 0);
};

ClassConstantContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassConstantContext.prototype.Constructor = function() {
    return this.getToken(PHPParser.Constructor, 0);
};

ClassConstantContext.prototype.Get = function() {
    return this.getToken(PHPParser.Get, 0);
};

ClassConstantContext.prototype.Set = function() {
    return this.getToken(PHPParser.Set, 0);
};

ClassConstantContext.prototype.qualifiedStaticTypeRef = function() {
    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
};

ClassConstantContext.prototype.keyedVariable = function() {
    return this.getTypedRuleContext(KeyedVariableContext,0);
};

ClassConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterClassConstant(this);
	}
};

ClassConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitClassConstant(this);
	}
};




PHPParser.ClassConstantContext = ClassConstantContext;

PHPParser.prototype.classConstant = function() {

    var localctx = new ClassConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, PHPParser.RULE_classConstant);
    var _la = 0; // Token type
    try {
        this.state = 1425;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1410;
            _la = this._input.LA(1);
            if(!(_la===PHPParser.Class || _la===PHPParser.Parent_)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1411;
            this.match(PHPParser.DoubleColon);
            this.state = 1416;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1412;
                this.identifier();
                break;

            case 2:
                this.state = 1413;
                this.match(PHPParser.Constructor);
                break;

            case 3:
                this.state = 1414;
                this.match(PHPParser.Get);
                break;

            case 4:
                this.state = 1415;
                this.match(PHPParser.Set);
                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1420;
            switch(this._input.LA(1)) {
            case PHPParser.Abstract:
            case PHPParser.Array:
            case PHPParser.As:
            case PHPParser.BinaryCast:
            case PHPParser.BoolType:
            case PHPParser.BooleanConstant:
            case PHPParser.Break:
            case PHPParser.Callable:
            case PHPParser.Case:
            case PHPParser.Catch:
            case PHPParser.Class:
            case PHPParser.Clone:
            case PHPParser.Const:
            case PHPParser.Continue:
            case PHPParser.Declare:
            case PHPParser.Default:
            case PHPParser.Do:
            case PHPParser.DoubleCast:
            case PHPParser.DoubleType:
            case PHPParser.Echo:
            case PHPParser.Else:
            case PHPParser.ElseIf:
            case PHPParser.Empty:
            case PHPParser.EndDeclare:
            case PHPParser.EndFor:
            case PHPParser.EndForeach:
            case PHPParser.EndIf:
            case PHPParser.EndSwitch:
            case PHPParser.EndWhile:
            case PHPParser.Eval:
            case PHPParser.Exit:
            case PHPParser.Extends:
            case PHPParser.Final:
            case PHPParser.Finally:
            case PHPParser.FloatCast:
            case PHPParser.For:
            case PHPParser.Foreach:
            case PHPParser.Function:
            case PHPParser.Global:
            case PHPParser.Goto:
            case PHPParser.If:
            case PHPParser.Implements:
            case PHPParser.Import:
            case PHPParser.Include:
            case PHPParser.IncludeOnce:
            case PHPParser.InstanceOf:
            case PHPParser.InsteadOf:
            case PHPParser.Int8Cast:
            case PHPParser.Int16Cast:
            case PHPParser.Int64Type:
            case PHPParser.IntType:
            case PHPParser.Interface:
            case PHPParser.IsSet:
            case PHPParser.List:
            case PHPParser.LogicalAnd:
            case PHPParser.LogicalOr:
            case PHPParser.LogicalXor:
            case PHPParser.Namespace:
            case PHPParser.New:
            case PHPParser.Null:
            case PHPParser.ObjectType:
            case PHPParser.Parent_:
            case PHPParser.Partial:
            case PHPParser.Print:
            case PHPParser.Private:
            case PHPParser.Protected:
            case PHPParser.Public:
            case PHPParser.Require:
            case PHPParser.RequireOnce:
            case PHPParser.Resource:
            case PHPParser.Return:
            case PHPParser.Static:
            case PHPParser.StringType:
            case PHPParser.Switch:
            case PHPParser.Throw:
            case PHPParser.Trait:
            case PHPParser.Try:
            case PHPParser.Typeof:
            case PHPParser.UintCast:
            case PHPParser.UnicodeCast:
            case PHPParser.Unset:
            case PHPParser.Use:
            case PHPParser.Var:
            case PHPParser.While:
            case PHPParser.Yield:
            case PHPParser.Get:
            case PHPParser.Set:
            case PHPParser.Call:
            case PHPParser.CallStatic:
            case PHPParser.Constructor:
            case PHPParser.Destruct:
            case PHPParser.Wakeup:
            case PHPParser.Sleep:
            case PHPParser.Autoload:
            case PHPParser.IsSet__:
            case PHPParser.Unset__:
            case PHPParser.ToString__:
            case PHPParser.Invoke:
            case PHPParser.SetState:
            case PHPParser.Clone__:
            case PHPParser.DebugInfo:
            case PHPParser.Namespace__:
            case PHPParser.Class__:
            case PHPParser.Traic__:
            case PHPParser.Function__:
            case PHPParser.Method__:
            case PHPParser.Line__:
            case PHPParser.File__:
            case PHPParser.Dir__:
            case PHPParser.NamespaceSeparator:
            case PHPParser.Label:
                this.state = 1418;
                this.qualifiedStaticTypeRef();
                break;
            case PHPParser.Dollar:
            case PHPParser.VarName:
                this.state = 1419;
                this.keyedVariable();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1422;
            this.match(PHPParser.DoubleColon);
            this.state = 1423;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_stringConstant;
    return this;
}

StringConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringConstantContext.prototype.constructor = StringConstantContext;

StringConstantContext.prototype.Label = function() {
    return this.getToken(PHPParser.Label, 0);
};

StringConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterStringConstant(this);
	}
};

StringConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitStringConstant(this);
	}
};




PHPParser.StringConstantContext = StringConstantContext;

PHPParser.prototype.stringConstant = function() {

    var localctx = new StringConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, PHPParser.RULE_stringConstant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1427;
        this.match(PHPParser.Label);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.StartHereDoc = function() {
    return this.getToken(PHPParser.StartHereDoc, 0);
};

StringContext.prototype.HereDocText = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PHPParser.HereDocText);
    } else {
        return this.getToken(PHPParser.HereDocText, i);
    }
};


StringContext.prototype.StartNowDoc = function() {
    return this.getToken(PHPParser.StartNowDoc, 0);
};

StringContext.prototype.SingleQuoteString = function() {
    return this.getToken(PHPParser.SingleQuoteString, 0);
};

StringContext.prototype.DoubleQuote = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PHPParser.DoubleQuote);
    } else {
        return this.getToken(PHPParser.DoubleQuote, i);
    }
};


StringContext.prototype.interpolatedStringPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterpolatedStringPartContext);
    } else {
        return this.getTypedRuleContext(InterpolatedStringPartContext,i);
    }
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitString(this);
	}
};




PHPParser.StringContext = StringContext;

PHPParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, PHPParser.RULE_string);
    var _la = 0; // Token type
    try {
        this.state = 1450;
        switch(this._input.LA(1)) {
        case PHPParser.StartHereDoc:
            this.enterOuterAlt(localctx, 1);
            this.state = 1429;
            this.match(PHPParser.StartHereDoc);
            this.state = 1431; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1430;
            		this.match(PHPParser.HereDocText);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1433; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,157, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        case PHPParser.StartNowDoc:
            this.enterOuterAlt(localctx, 2);
            this.state = 1435;
            this.match(PHPParser.StartNowDoc);
            this.state = 1437; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1436;
            		this.match(PHPParser.HereDocText);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1439; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,158, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        case PHPParser.SingleQuoteString:
            this.enterOuterAlt(localctx, 3);
            this.state = 1441;
            this.match(PHPParser.SingleQuoteString);
            break;
        case PHPParser.DoubleQuote:
            this.enterOuterAlt(localctx, 4);
            this.state = 1442;
            this.match(PHPParser.DoubleQuote);
            this.state = 1446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || _la===PHPParser.StringPart) {
                this.state = 1443;
                this.interpolatedStringPart();
                this.state = 1448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1449;
            this.match(PHPParser.DoubleQuote);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterpolatedStringPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_interpolatedStringPart;
    return this;
}

InterpolatedStringPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterpolatedStringPartContext.prototype.constructor = InterpolatedStringPartContext;

InterpolatedStringPartContext.prototype.StringPart = function() {
    return this.getToken(PHPParser.StringPart, 0);
};

InterpolatedStringPartContext.prototype.chain = function() {
    return this.getTypedRuleContext(ChainContext,0);
};

InterpolatedStringPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterInterpolatedStringPart(this);
	}
};

InterpolatedStringPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitInterpolatedStringPart(this);
	}
};




PHPParser.InterpolatedStringPartContext = InterpolatedStringPartContext;

PHPParser.prototype.interpolatedStringPart = function() {

    var localctx = new InterpolatedStringPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, PHPParser.RULE_interpolatedStringPart);
    try {
        this.state = 1454;
        switch(this._input.LA(1)) {
        case PHPParser.StringPart:
            this.enterOuterAlt(localctx, 1);
            this.state = 1452;
            this.match(PHPParser.StringPart);
            break;
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.NamespaceSeparator:
        case PHPParser.Dollar:
        case PHPParser.OpenRoundBracket:
        case PHPParser.VarName:
        case PHPParser.Label:
            this.enterOuterAlt(localctx, 2);
            this.state = 1453;
            this.chain();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChainListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_chainList;
    return this;
}

ChainListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChainListContext.prototype.constructor = ChainListContext;

ChainListContext.prototype.chain = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChainContext);
    } else {
        return this.getTypedRuleContext(ChainContext,i);
    }
};

ChainListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterChainList(this);
	}
};

ChainListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitChainList(this);
	}
};




PHPParser.ChainListContext = ChainListContext;

PHPParser.prototype.chainList = function() {

    var localctx = new ChainListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, PHPParser.RULE_chainList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1456;
        this.chain();
        this.state = 1461;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 1457;
            this.match(PHPParser.Comma);
            this.state = 1458;
            this.chain();
            this.state = 1463;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_chain;
    return this;
}

ChainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChainContext.prototype.constructor = ChainContext;

ChainContext.prototype.chainBase = function() {
    return this.getTypedRuleContext(ChainBaseContext,0);
};

ChainContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

ChainContext.prototype.newExpr = function() {
    return this.getTypedRuleContext(NewExprContext,0);
};

ChainContext.prototype.memberAccess = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MemberAccessContext);
    } else {
        return this.getTypedRuleContext(MemberAccessContext,i);
    }
};

ChainContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterChain(this);
	}
};

ChainContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitChain(this);
	}
};




PHPParser.ChainContext = ChainContext;

PHPParser.prototype.chain = function() {

    var localctx = new ChainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, PHPParser.RULE_chain);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1470;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1464;
            this.chainBase();
            break;

        case 2:
            this.state = 1465;
            this.functionCall();
            break;

        case 3:
            this.state = 1466;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 1467;
            this.newExpr();
            this.state = 1468;
            this.match(PHPParser.CloseRoundBracket);
            break;

        }
        this.state = 1475;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,164,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1472;
                this.memberAccess(); 
            }
            this.state = 1477;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,164,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberAccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_memberAccess;
    return this;
}

MemberAccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberAccessContext.prototype.constructor = MemberAccessContext;

MemberAccessContext.prototype.keyedFieldName = function() {
    return this.getTypedRuleContext(KeyedFieldNameContext,0);
};

MemberAccessContext.prototype.actualArguments = function() {
    return this.getTypedRuleContext(ActualArgumentsContext,0);
};

MemberAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterMemberAccess(this);
	}
};

MemberAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitMemberAccess(this);
	}
};




PHPParser.MemberAccessContext = MemberAccessContext;

PHPParser.prototype.memberAccess = function() {

    var localctx = new MemberAccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, PHPParser.RULE_memberAccess);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1478;
        this.match(PHPParser.ObjectOperator);
        this.state = 1479;
        this.keyedFieldName();
        this.state = 1481;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        if(la_===1) {
            this.state = 1480;
            this.actualArguments();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FunctionCallContext.prototype.functionCallName = function() {
    return this.getTypedRuleContext(FunctionCallNameContext,0);
};

FunctionCallContext.prototype.actualArguments = function() {
    return this.getTypedRuleContext(ActualArgumentsContext,0);
};

FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitFunctionCall(this);
	}
};




PHPParser.FunctionCallContext = FunctionCallContext;

PHPParser.prototype.functionCall = function() {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, PHPParser.RULE_functionCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1483;
        this.functionCallName();
        this.state = 1484;
        this.actualArguments();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_functionCallName;
    return this;
}

FunctionCallNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallNameContext.prototype.constructor = FunctionCallNameContext;

FunctionCallNameContext.prototype.qualifiedNamespaceName = function() {
    return this.getTypedRuleContext(QualifiedNamespaceNameContext,0);
};

FunctionCallNameContext.prototype.classConstant = function() {
    return this.getTypedRuleContext(ClassConstantContext,0);
};

FunctionCallNameContext.prototype.chainBase = function() {
    return this.getTypedRuleContext(ChainBaseContext,0);
};

FunctionCallNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterFunctionCallName(this);
	}
};

FunctionCallNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitFunctionCallName(this);
	}
};




PHPParser.FunctionCallNameContext = FunctionCallNameContext;

PHPParser.prototype.functionCallName = function() {

    var localctx = new FunctionCallNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, PHPParser.RULE_functionCallName);
    try {
        this.state = 1489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1486;
            this.qualifiedNamespaceName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1487;
            this.classConstant();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1488;
            this.chainBase();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ActualArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_actualArguments;
    return this;
}

ActualArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActualArgumentsContext.prototype.constructor = ActualArgumentsContext;

ActualArgumentsContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ActualArgumentsContext.prototype.genericDynamicArgs = function() {
    return this.getTypedRuleContext(GenericDynamicArgsContext,0);
};

ActualArgumentsContext.prototype.squareCurlyExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SquareCurlyExpressionContext);
    } else {
        return this.getTypedRuleContext(SquareCurlyExpressionContext,i);
    }
};

ActualArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterActualArguments(this);
	}
};

ActualArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitActualArguments(this);
	}
};




PHPParser.ActualArgumentsContext = ActualArgumentsContext;

PHPParser.prototype.actualArguments = function() {

    var localctx = new ActualArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, PHPParser.RULE_actualArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1492;
        _la = this._input.LA(1);
        if(_la===PHPParser.Lgeneric) {
            this.state = 1491;
            this.genericDynamicArgs();
        }

        this.state = 1494;
        this.arguments();
        this.state = 1498;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,168,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1495;
                this.squareCurlyExpression(); 
            }
            this.state = 1500;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,168,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChainBaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_chainBase;
    return this;
}

ChainBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChainBaseContext.prototype.constructor = ChainBaseContext;

ChainBaseContext.prototype.keyedVariable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyedVariableContext);
    } else {
        return this.getTypedRuleContext(KeyedVariableContext,i);
    }
};

ChainBaseContext.prototype.qualifiedStaticTypeRef = function() {
    return this.getTypedRuleContext(QualifiedStaticTypeRefContext,0);
};

ChainBaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterChainBase(this);
	}
};

ChainBaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitChainBase(this);
	}
};




PHPParser.ChainBaseContext = ChainBaseContext;

PHPParser.prototype.chainBase = function() {

    var localctx = new ChainBaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, PHPParser.RULE_chainBase);
    try {
        this.state = 1510;
        switch(this._input.LA(1)) {
        case PHPParser.Dollar:
        case PHPParser.VarName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1501;
            this.keyedVariable();
            this.state = 1504;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
            if(la_===1) {
                this.state = 1502;
                this.match(PHPParser.DoubleColon);
                this.state = 1503;
                this.keyedVariable();

            }
            break;
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.NamespaceSeparator:
        case PHPParser.Label:
            this.enterOuterAlt(localctx, 2);
            this.state = 1506;
            this.qualifiedStaticTypeRef();
            this.state = 1507;
            this.match(PHPParser.DoubleColon);
            this.state = 1508;
            this.keyedVariable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyedFieldNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_keyedFieldName;
    return this;
}

KeyedFieldNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyedFieldNameContext.prototype.constructor = KeyedFieldNameContext;

KeyedFieldNameContext.prototype.keyedSimpleFieldName = function() {
    return this.getTypedRuleContext(KeyedSimpleFieldNameContext,0);
};

KeyedFieldNameContext.prototype.keyedVariable = function() {
    return this.getTypedRuleContext(KeyedVariableContext,0);
};

KeyedFieldNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterKeyedFieldName(this);
	}
};

KeyedFieldNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitKeyedFieldName(this);
	}
};




PHPParser.KeyedFieldNameContext = KeyedFieldNameContext;

PHPParser.prototype.keyedFieldName = function() {

    var localctx = new KeyedFieldNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, PHPParser.RULE_keyedFieldName);
    try {
        this.state = 1514;
        switch(this._input.LA(1)) {
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.OpenCurlyBracket:
        case PHPParser.Label:
            this.enterOuterAlt(localctx, 1);
            this.state = 1512;
            this.keyedSimpleFieldName();
            break;
        case PHPParser.Dollar:
        case PHPParser.VarName:
            this.enterOuterAlt(localctx, 2);
            this.state = 1513;
            this.keyedVariable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyedSimpleFieldNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_keyedSimpleFieldName;
    return this;
}

KeyedSimpleFieldNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyedSimpleFieldNameContext.prototype.constructor = KeyedSimpleFieldNameContext;

KeyedSimpleFieldNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

KeyedSimpleFieldNameContext.prototype.OpenCurlyBracket = function() {
    return this.getToken(PHPParser.OpenCurlyBracket, 0);
};

KeyedSimpleFieldNameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

KeyedSimpleFieldNameContext.prototype.squareCurlyExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SquareCurlyExpressionContext);
    } else {
        return this.getTypedRuleContext(SquareCurlyExpressionContext,i);
    }
};

KeyedSimpleFieldNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterKeyedSimpleFieldName(this);
	}
};

KeyedSimpleFieldNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitKeyedSimpleFieldName(this);
	}
};




PHPParser.KeyedSimpleFieldNameContext = KeyedSimpleFieldNameContext;

PHPParser.prototype.keyedSimpleFieldName = function() {

    var localctx = new KeyedSimpleFieldNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, PHPParser.RULE_keyedSimpleFieldName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1521;
        switch(this._input.LA(1)) {
        case PHPParser.Abstract:
        case PHPParser.Array:
        case PHPParser.As:
        case PHPParser.BinaryCast:
        case PHPParser.BoolType:
        case PHPParser.BooleanConstant:
        case PHPParser.Break:
        case PHPParser.Callable:
        case PHPParser.Case:
        case PHPParser.Catch:
        case PHPParser.Class:
        case PHPParser.Clone:
        case PHPParser.Const:
        case PHPParser.Continue:
        case PHPParser.Declare:
        case PHPParser.Default:
        case PHPParser.Do:
        case PHPParser.DoubleCast:
        case PHPParser.DoubleType:
        case PHPParser.Echo:
        case PHPParser.Else:
        case PHPParser.ElseIf:
        case PHPParser.Empty:
        case PHPParser.EndDeclare:
        case PHPParser.EndFor:
        case PHPParser.EndForeach:
        case PHPParser.EndIf:
        case PHPParser.EndSwitch:
        case PHPParser.EndWhile:
        case PHPParser.Eval:
        case PHPParser.Exit:
        case PHPParser.Extends:
        case PHPParser.Final:
        case PHPParser.Finally:
        case PHPParser.FloatCast:
        case PHPParser.For:
        case PHPParser.Foreach:
        case PHPParser.Function:
        case PHPParser.Global:
        case PHPParser.Goto:
        case PHPParser.If:
        case PHPParser.Implements:
        case PHPParser.Import:
        case PHPParser.Include:
        case PHPParser.IncludeOnce:
        case PHPParser.InstanceOf:
        case PHPParser.InsteadOf:
        case PHPParser.Int8Cast:
        case PHPParser.Int16Cast:
        case PHPParser.Int64Type:
        case PHPParser.IntType:
        case PHPParser.Interface:
        case PHPParser.IsSet:
        case PHPParser.List:
        case PHPParser.LogicalAnd:
        case PHPParser.LogicalOr:
        case PHPParser.LogicalXor:
        case PHPParser.Namespace:
        case PHPParser.New:
        case PHPParser.Null:
        case PHPParser.ObjectType:
        case PHPParser.Parent_:
        case PHPParser.Partial:
        case PHPParser.Print:
        case PHPParser.Private:
        case PHPParser.Protected:
        case PHPParser.Public:
        case PHPParser.Require:
        case PHPParser.RequireOnce:
        case PHPParser.Resource:
        case PHPParser.Return:
        case PHPParser.Static:
        case PHPParser.StringType:
        case PHPParser.Switch:
        case PHPParser.Throw:
        case PHPParser.Trait:
        case PHPParser.Try:
        case PHPParser.Typeof:
        case PHPParser.UintCast:
        case PHPParser.UnicodeCast:
        case PHPParser.Unset:
        case PHPParser.Use:
        case PHPParser.Var:
        case PHPParser.While:
        case PHPParser.Yield:
        case PHPParser.Get:
        case PHPParser.Set:
        case PHPParser.Call:
        case PHPParser.CallStatic:
        case PHPParser.Constructor:
        case PHPParser.Destruct:
        case PHPParser.Wakeup:
        case PHPParser.Sleep:
        case PHPParser.Autoload:
        case PHPParser.IsSet__:
        case PHPParser.Unset__:
        case PHPParser.ToString__:
        case PHPParser.Invoke:
        case PHPParser.SetState:
        case PHPParser.Clone__:
        case PHPParser.DebugInfo:
        case PHPParser.Namespace__:
        case PHPParser.Class__:
        case PHPParser.Traic__:
        case PHPParser.Function__:
        case PHPParser.Method__:
        case PHPParser.Line__:
        case PHPParser.File__:
        case PHPParser.Dir__:
        case PHPParser.Label:
            this.state = 1516;
            this.identifier();
            break;
        case PHPParser.OpenCurlyBracket:
            this.state = 1517;
            this.match(PHPParser.OpenCurlyBracket);
            this.state = 1518;
            this.expression(0);
            this.state = 1519;
            this.match(PHPParser.CloseCurlyBracket);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1526;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,173,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1523;
                this.squareCurlyExpression(); 
            }
            this.state = 1528;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,173,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyedVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_keyedVariable;
    return this;
}

KeyedVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyedVariableContext.prototype.constructor = KeyedVariableContext;

KeyedVariableContext.prototype.VarName = function() {
    return this.getToken(PHPParser.VarName, 0);
};

KeyedVariableContext.prototype.Dollar = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PHPParser.Dollar);
    } else {
        return this.getToken(PHPParser.Dollar, i);
    }
};


KeyedVariableContext.prototype.OpenCurlyBracket = function() {
    return this.getToken(PHPParser.OpenCurlyBracket, 0);
};

KeyedVariableContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

KeyedVariableContext.prototype.squareCurlyExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SquareCurlyExpressionContext);
    } else {
        return this.getTypedRuleContext(SquareCurlyExpressionContext,i);
    }
};

KeyedVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterKeyedVariable(this);
	}
};

KeyedVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitKeyedVariable(this);
	}
};




PHPParser.KeyedVariableContext = KeyedVariableContext;

PHPParser.prototype.keyedVariable = function() {

    var localctx = new KeyedVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, PHPParser.RULE_keyedVariable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1532;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1529;
                this.match(PHPParser.Dollar); 
            }
            this.state = 1534;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
        }

        this.state = 1541;
        switch(this._input.LA(1)) {
        case PHPParser.VarName:
            this.state = 1535;
            this.match(PHPParser.VarName);
            break;
        case PHPParser.Dollar:
            this.state = 1536;
            this.match(PHPParser.Dollar);
            this.state = 1537;
            this.match(PHPParser.OpenCurlyBracket);
            this.state = 1538;
            this.expression(0);
            this.state = 1539;
            this.match(PHPParser.CloseCurlyBracket);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1546;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1543;
                this.squareCurlyExpression(); 
            }
            this.state = 1548;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SquareCurlyExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_squareCurlyExpression;
    return this;
}

SquareCurlyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SquareCurlyExpressionContext.prototype.constructor = SquareCurlyExpressionContext;

SquareCurlyExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SquareCurlyExpressionContext.prototype.OpenCurlyBracket = function() {
    return this.getToken(PHPParser.OpenCurlyBracket, 0);
};

SquareCurlyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterSquareCurlyExpression(this);
	}
};

SquareCurlyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitSquareCurlyExpression(this);
	}
};




PHPParser.SquareCurlyExpressionContext = SquareCurlyExpressionContext;

PHPParser.prototype.squareCurlyExpression = function() {

    var localctx = new SquareCurlyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, PHPParser.RULE_squareCurlyExpression);
    var _la = 0; // Token type
    try {
        this.state = 1558;
        switch(this._input.LA(1)) {
        case PHPParser.OpenSquareBracket:
            this.enterOuterAlt(localctx, 1);
            this.state = 1549;
            this.match(PHPParser.OpenSquareBracket);
            this.state = 1551;
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)) | (1 << (PHPParser.Inc - 136)) | (1 << (PHPParser.Dec - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Bang - 179)) | (1 << (PHPParser.Plus - 179)) | (1 << (PHPParser.Minus - 179)) | (1 << (PHPParser.Tilde - 179)) | (1 << (PHPParser.SuppressWarnings - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.OpenSquareBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0) || ((((_la - 211)) & ~0x1f) == 0 && ((1 << (_la - 211)) & ((1 << (PHPParser.Octal - 211)) | (1 << (PHPParser.Decimal - 211)) | (1 << (PHPParser.Real - 211)) | (1 << (PHPParser.Hex - 211)) | (1 << (PHPParser.Binary - 211)) | (1 << (PHPParser.BackQuoteString - 211)) | (1 << (PHPParser.SingleQuoteString - 211)) | (1 << (PHPParser.DoubleQuote - 211)) | (1 << (PHPParser.StartNowDoc - 211)) | (1 << (PHPParser.StartHereDoc - 211)))) !== 0)) {
                this.state = 1550;
                this.expression(0);
            }

            this.state = 1553;
            this.match(PHPParser.CloseSquareBracket);
            break;
        case PHPParser.OpenCurlyBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 1554;
            this.match(PHPParser.OpenCurlyBracket);
            this.state = 1555;
            this.expression(0);
            this.state = 1556;
            this.match(PHPParser.CloseCurlyBracket);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_assignmentList;
    return this;
}

AssignmentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentListContext.prototype.constructor = AssignmentListContext;

AssignmentListContext.prototype.assignmentListElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentListElementContext);
    } else {
        return this.getTypedRuleContext(AssignmentListElementContext,i);
    }
};

AssignmentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAssignmentList(this);
	}
};

AssignmentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAssignmentList(this);
	}
};




PHPParser.AssignmentListContext = AssignmentListContext;

PHPParser.prototype.assignmentList = function() {

    var localctx = new AssignmentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, PHPParser.RULE_assignmentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1561;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0)) {
            this.state = 1560;
            this.assignmentListElement();
        }

        this.state = 1569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PHPParser.Comma) {
            this.state = 1563;
            this.match(PHPParser.Comma);
            this.state = 1565;
            _la = this._input.LA(1);
            if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || ((((_la - 179)) & ~0x1f) == 0 && ((1 << (_la - 179)) & ((1 << (PHPParser.NamespaceSeparator - 179)) | (1 << (PHPParser.Dollar - 179)) | (1 << (PHPParser.OpenRoundBracket - 179)) | (1 << (PHPParser.VarName - 179)) | (1 << (PHPParser.Label - 179)))) !== 0)) {
                this.state = 1564;
                this.assignmentListElement();
            }

            this.state = 1571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentListElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_assignmentListElement;
    return this;
}

AssignmentListElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentListElementContext.prototype.constructor = AssignmentListElementContext;

AssignmentListElementContext.prototype.chain = function() {
    return this.getTypedRuleContext(ChainContext,0);
};

AssignmentListElementContext.prototype.List = function() {
    return this.getToken(PHPParser.List, 0);
};

AssignmentListElementContext.prototype.assignmentList = function() {
    return this.getTypedRuleContext(AssignmentListContext,0);
};

AssignmentListElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterAssignmentListElement(this);
	}
};

AssignmentListElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitAssignmentListElement(this);
	}
};




PHPParser.AssignmentListElementContext = AssignmentListElementContext;

PHPParser.prototype.assignmentListElement = function() {

    var localctx = new AssignmentListElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, PHPParser.RULE_assignmentListElement);
    try {
        this.state = 1578;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1572;
            this.chain();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1573;
            this.match(PHPParser.List);
            this.state = 1574;
            this.match(PHPParser.OpenRoundBracket);
            this.state = 1575;
            this.assignmentList();
            this.state = 1576;
            this.match(PHPParser.CloseRoundBracket);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_modifier;
    return this;
}

ModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierContext.prototype.constructor = ModifierContext;

ModifierContext.prototype.Abstract = function() {
    return this.getToken(PHPParser.Abstract, 0);
};

ModifierContext.prototype.Final = function() {
    return this.getToken(PHPParser.Final, 0);
};

ModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterModifier(this);
	}
};

ModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitModifier(this);
	}
};




PHPParser.ModifierContext = ModifierContext;

PHPParser.prototype.modifier = function() {

    var localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, PHPParser.RULE_modifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1580;
        _la = this._input.LA(1);
        if(!(_la===PHPParser.Abstract || _la===PHPParser.Final)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Label = function() {
    return this.getToken(PHPParser.Label, 0);
};

IdentifierContext.prototype.Abstract = function() {
    return this.getToken(PHPParser.Abstract, 0);
};

IdentifierContext.prototype.Array = function() {
    return this.getToken(PHPParser.Array, 0);
};

IdentifierContext.prototype.As = function() {
    return this.getToken(PHPParser.As, 0);
};

IdentifierContext.prototype.BinaryCast = function() {
    return this.getToken(PHPParser.BinaryCast, 0);
};

IdentifierContext.prototype.BoolType = function() {
    return this.getToken(PHPParser.BoolType, 0);
};

IdentifierContext.prototype.BooleanConstant = function() {
    return this.getToken(PHPParser.BooleanConstant, 0);
};

IdentifierContext.prototype.Break = function() {
    return this.getToken(PHPParser.Break, 0);
};

IdentifierContext.prototype.Callable = function() {
    return this.getToken(PHPParser.Callable, 0);
};

IdentifierContext.prototype.Case = function() {
    return this.getToken(PHPParser.Case, 0);
};

IdentifierContext.prototype.Catch = function() {
    return this.getToken(PHPParser.Catch, 0);
};

IdentifierContext.prototype.Class = function() {
    return this.getToken(PHPParser.Class, 0);
};

IdentifierContext.prototype.Clone = function() {
    return this.getToken(PHPParser.Clone, 0);
};

IdentifierContext.prototype.Const = function() {
    return this.getToken(PHPParser.Const, 0);
};

IdentifierContext.prototype.Continue = function() {
    return this.getToken(PHPParser.Continue, 0);
};

IdentifierContext.prototype.Declare = function() {
    return this.getToken(PHPParser.Declare, 0);
};

IdentifierContext.prototype.Default = function() {
    return this.getToken(PHPParser.Default, 0);
};

IdentifierContext.prototype.Do = function() {
    return this.getToken(PHPParser.Do, 0);
};

IdentifierContext.prototype.DoubleCast = function() {
    return this.getToken(PHPParser.DoubleCast, 0);
};

IdentifierContext.prototype.DoubleType = function() {
    return this.getToken(PHPParser.DoubleType, 0);
};

IdentifierContext.prototype.Echo = function() {
    return this.getToken(PHPParser.Echo, 0);
};

IdentifierContext.prototype.Else = function() {
    return this.getToken(PHPParser.Else, 0);
};

IdentifierContext.prototype.ElseIf = function() {
    return this.getToken(PHPParser.ElseIf, 0);
};

IdentifierContext.prototype.Empty = function() {
    return this.getToken(PHPParser.Empty, 0);
};

IdentifierContext.prototype.EndDeclare = function() {
    return this.getToken(PHPParser.EndDeclare, 0);
};

IdentifierContext.prototype.EndFor = function() {
    return this.getToken(PHPParser.EndFor, 0);
};

IdentifierContext.prototype.EndForeach = function() {
    return this.getToken(PHPParser.EndForeach, 0);
};

IdentifierContext.prototype.EndIf = function() {
    return this.getToken(PHPParser.EndIf, 0);
};

IdentifierContext.prototype.EndSwitch = function() {
    return this.getToken(PHPParser.EndSwitch, 0);
};

IdentifierContext.prototype.EndWhile = function() {
    return this.getToken(PHPParser.EndWhile, 0);
};

IdentifierContext.prototype.Eval = function() {
    return this.getToken(PHPParser.Eval, 0);
};

IdentifierContext.prototype.Exit = function() {
    return this.getToken(PHPParser.Exit, 0);
};

IdentifierContext.prototype.Extends = function() {
    return this.getToken(PHPParser.Extends, 0);
};

IdentifierContext.prototype.Final = function() {
    return this.getToken(PHPParser.Final, 0);
};

IdentifierContext.prototype.Finally = function() {
    return this.getToken(PHPParser.Finally, 0);
};

IdentifierContext.prototype.FloatCast = function() {
    return this.getToken(PHPParser.FloatCast, 0);
};

IdentifierContext.prototype.For = function() {
    return this.getToken(PHPParser.For, 0);
};

IdentifierContext.prototype.Foreach = function() {
    return this.getToken(PHPParser.Foreach, 0);
};

IdentifierContext.prototype.Function = function() {
    return this.getToken(PHPParser.Function, 0);
};

IdentifierContext.prototype.Global = function() {
    return this.getToken(PHPParser.Global, 0);
};

IdentifierContext.prototype.Goto = function() {
    return this.getToken(PHPParser.Goto, 0);
};

IdentifierContext.prototype.If = function() {
    return this.getToken(PHPParser.If, 0);
};

IdentifierContext.prototype.Implements = function() {
    return this.getToken(PHPParser.Implements, 0);
};

IdentifierContext.prototype.Import = function() {
    return this.getToken(PHPParser.Import, 0);
};

IdentifierContext.prototype.Include = function() {
    return this.getToken(PHPParser.Include, 0);
};

IdentifierContext.prototype.IncludeOnce = function() {
    return this.getToken(PHPParser.IncludeOnce, 0);
};

IdentifierContext.prototype.InstanceOf = function() {
    return this.getToken(PHPParser.InstanceOf, 0);
};

IdentifierContext.prototype.InsteadOf = function() {
    return this.getToken(PHPParser.InsteadOf, 0);
};

IdentifierContext.prototype.Int16Cast = function() {
    return this.getToken(PHPParser.Int16Cast, 0);
};

IdentifierContext.prototype.Int64Type = function() {
    return this.getToken(PHPParser.Int64Type, 0);
};

IdentifierContext.prototype.Int8Cast = function() {
    return this.getToken(PHPParser.Int8Cast, 0);
};

IdentifierContext.prototype.Interface = function() {
    return this.getToken(PHPParser.Interface, 0);
};

IdentifierContext.prototype.IntType = function() {
    return this.getToken(PHPParser.IntType, 0);
};

IdentifierContext.prototype.IsSet = function() {
    return this.getToken(PHPParser.IsSet, 0);
};

IdentifierContext.prototype.List = function() {
    return this.getToken(PHPParser.List, 0);
};

IdentifierContext.prototype.LogicalAnd = function() {
    return this.getToken(PHPParser.LogicalAnd, 0);
};

IdentifierContext.prototype.LogicalOr = function() {
    return this.getToken(PHPParser.LogicalOr, 0);
};

IdentifierContext.prototype.LogicalXor = function() {
    return this.getToken(PHPParser.LogicalXor, 0);
};

IdentifierContext.prototype.Namespace = function() {
    return this.getToken(PHPParser.Namespace, 0);
};

IdentifierContext.prototype.New = function() {
    return this.getToken(PHPParser.New, 0);
};

IdentifierContext.prototype.Null = function() {
    return this.getToken(PHPParser.Null, 0);
};

IdentifierContext.prototype.ObjectType = function() {
    return this.getToken(PHPParser.ObjectType, 0);
};

IdentifierContext.prototype.Parent_ = function() {
    return this.getToken(PHPParser.Parent_, 0);
};

IdentifierContext.prototype.Partial = function() {
    return this.getToken(PHPParser.Partial, 0);
};

IdentifierContext.prototype.Print = function() {
    return this.getToken(PHPParser.Print, 0);
};

IdentifierContext.prototype.Private = function() {
    return this.getToken(PHPParser.Private, 0);
};

IdentifierContext.prototype.Protected = function() {
    return this.getToken(PHPParser.Protected, 0);
};

IdentifierContext.prototype.Public = function() {
    return this.getToken(PHPParser.Public, 0);
};

IdentifierContext.prototype.Require = function() {
    return this.getToken(PHPParser.Require, 0);
};

IdentifierContext.prototype.RequireOnce = function() {
    return this.getToken(PHPParser.RequireOnce, 0);
};

IdentifierContext.prototype.Resource = function() {
    return this.getToken(PHPParser.Resource, 0);
};

IdentifierContext.prototype.Return = function() {
    return this.getToken(PHPParser.Return, 0);
};

IdentifierContext.prototype.Static = function() {
    return this.getToken(PHPParser.Static, 0);
};

IdentifierContext.prototype.StringType = function() {
    return this.getToken(PHPParser.StringType, 0);
};

IdentifierContext.prototype.Switch = function() {
    return this.getToken(PHPParser.Switch, 0);
};

IdentifierContext.prototype.Throw = function() {
    return this.getToken(PHPParser.Throw, 0);
};

IdentifierContext.prototype.Trait = function() {
    return this.getToken(PHPParser.Trait, 0);
};

IdentifierContext.prototype.Try = function() {
    return this.getToken(PHPParser.Try, 0);
};

IdentifierContext.prototype.Typeof = function() {
    return this.getToken(PHPParser.Typeof, 0);
};

IdentifierContext.prototype.UintCast = function() {
    return this.getToken(PHPParser.UintCast, 0);
};

IdentifierContext.prototype.UnicodeCast = function() {
    return this.getToken(PHPParser.UnicodeCast, 0);
};

IdentifierContext.prototype.Unset = function() {
    return this.getToken(PHPParser.Unset, 0);
};

IdentifierContext.prototype.Use = function() {
    return this.getToken(PHPParser.Use, 0);
};

IdentifierContext.prototype.Var = function() {
    return this.getToken(PHPParser.Var, 0);
};

IdentifierContext.prototype.While = function() {
    return this.getToken(PHPParser.While, 0);
};

IdentifierContext.prototype.Yield = function() {
    return this.getToken(PHPParser.Yield, 0);
};

IdentifierContext.prototype.Get = function() {
    return this.getToken(PHPParser.Get, 0);
};

IdentifierContext.prototype.Set = function() {
    return this.getToken(PHPParser.Set, 0);
};

IdentifierContext.prototype.Call = function() {
    return this.getToken(PHPParser.Call, 0);
};

IdentifierContext.prototype.CallStatic = function() {
    return this.getToken(PHPParser.CallStatic, 0);
};

IdentifierContext.prototype.Constructor = function() {
    return this.getToken(PHPParser.Constructor, 0);
};

IdentifierContext.prototype.Destruct = function() {
    return this.getToken(PHPParser.Destruct, 0);
};

IdentifierContext.prototype.Wakeup = function() {
    return this.getToken(PHPParser.Wakeup, 0);
};

IdentifierContext.prototype.Sleep = function() {
    return this.getToken(PHPParser.Sleep, 0);
};

IdentifierContext.prototype.Autoload = function() {
    return this.getToken(PHPParser.Autoload, 0);
};

IdentifierContext.prototype.IsSet__ = function() {
    return this.getToken(PHPParser.IsSet__, 0);
};

IdentifierContext.prototype.Unset__ = function() {
    return this.getToken(PHPParser.Unset__, 0);
};

IdentifierContext.prototype.ToString__ = function() {
    return this.getToken(PHPParser.ToString__, 0);
};

IdentifierContext.prototype.Invoke = function() {
    return this.getToken(PHPParser.Invoke, 0);
};

IdentifierContext.prototype.SetState = function() {
    return this.getToken(PHPParser.SetState, 0);
};

IdentifierContext.prototype.Clone__ = function() {
    return this.getToken(PHPParser.Clone__, 0);
};

IdentifierContext.prototype.DebugInfo = function() {
    return this.getToken(PHPParser.DebugInfo, 0);
};

IdentifierContext.prototype.Namespace__ = function() {
    return this.getToken(PHPParser.Namespace__, 0);
};

IdentifierContext.prototype.Class__ = function() {
    return this.getToken(PHPParser.Class__, 0);
};

IdentifierContext.prototype.Traic__ = function() {
    return this.getToken(PHPParser.Traic__, 0);
};

IdentifierContext.prototype.Function__ = function() {
    return this.getToken(PHPParser.Function__, 0);
};

IdentifierContext.prototype.Method__ = function() {
    return this.getToken(PHPParser.Method__, 0);
};

IdentifierContext.prototype.Line__ = function() {
    return this.getToken(PHPParser.Line__, 0);
};

IdentifierContext.prototype.File__ = function() {
    return this.getToken(PHPParser.File__, 0);
};

IdentifierContext.prototype.Dir__ = function() {
    return this.getToken(PHPParser.Dir__, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitIdentifier(this);
	}
};




PHPParser.IdentifierContext = IdentifierContext;

PHPParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, PHPParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1582;
        _la = this._input.LA(1);
        if(!(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PHPParser.Abstract - 40)) | (1 << (PHPParser.Array - 40)) | (1 << (PHPParser.As - 40)) | (1 << (PHPParser.BinaryCast - 40)) | (1 << (PHPParser.BoolType - 40)) | (1 << (PHPParser.BooleanConstant - 40)) | (1 << (PHPParser.Break - 40)) | (1 << (PHPParser.Callable - 40)) | (1 << (PHPParser.Case - 40)) | (1 << (PHPParser.Catch - 40)) | (1 << (PHPParser.Class - 40)) | (1 << (PHPParser.Clone - 40)) | (1 << (PHPParser.Const - 40)) | (1 << (PHPParser.Continue - 40)) | (1 << (PHPParser.Declare - 40)) | (1 << (PHPParser.Default - 40)) | (1 << (PHPParser.Do - 40)) | (1 << (PHPParser.DoubleCast - 40)) | (1 << (PHPParser.DoubleType - 40)) | (1 << (PHPParser.Echo - 40)) | (1 << (PHPParser.Else - 40)) | (1 << (PHPParser.ElseIf - 40)) | (1 << (PHPParser.Empty - 40)) | (1 << (PHPParser.EndDeclare - 40)) | (1 << (PHPParser.EndFor - 40)) | (1 << (PHPParser.EndForeach - 40)) | (1 << (PHPParser.EndIf - 40)) | (1 << (PHPParser.EndSwitch - 40)) | (1 << (PHPParser.EndWhile - 40)) | (1 << (PHPParser.Eval - 40)) | (1 << (PHPParser.Exit - 40)) | (1 << (PHPParser.Extends - 40)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (PHPParser.Final - 72)) | (1 << (PHPParser.Finally - 72)) | (1 << (PHPParser.FloatCast - 72)) | (1 << (PHPParser.For - 72)) | (1 << (PHPParser.Foreach - 72)) | (1 << (PHPParser.Function - 72)) | (1 << (PHPParser.Global - 72)) | (1 << (PHPParser.Goto - 72)) | (1 << (PHPParser.If - 72)) | (1 << (PHPParser.Implements - 72)) | (1 << (PHPParser.Import - 72)) | (1 << (PHPParser.Include - 72)) | (1 << (PHPParser.IncludeOnce - 72)) | (1 << (PHPParser.InstanceOf - 72)) | (1 << (PHPParser.InsteadOf - 72)) | (1 << (PHPParser.Int8Cast - 72)) | (1 << (PHPParser.Int16Cast - 72)) | (1 << (PHPParser.Int64Type - 72)) | (1 << (PHPParser.IntType - 72)) | (1 << (PHPParser.Interface - 72)) | (1 << (PHPParser.IsSet - 72)) | (1 << (PHPParser.List - 72)) | (1 << (PHPParser.LogicalAnd - 72)) | (1 << (PHPParser.LogicalOr - 72)) | (1 << (PHPParser.LogicalXor - 72)) | (1 << (PHPParser.Namespace - 72)) | (1 << (PHPParser.New - 72)) | (1 << (PHPParser.Null - 72)) | (1 << (PHPParser.ObjectType - 72)) | (1 << (PHPParser.Parent_ - 72)) | (1 << (PHPParser.Partial - 72)) | (1 << (PHPParser.Print - 72)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Require - 104)) | (1 << (PHPParser.RequireOnce - 104)) | (1 << (PHPParser.Resource - 104)) | (1 << (PHPParser.Return - 104)) | (1 << (PHPParser.Static - 104)) | (1 << (PHPParser.StringType - 104)) | (1 << (PHPParser.Switch - 104)) | (1 << (PHPParser.Throw - 104)) | (1 << (PHPParser.Trait - 104)) | (1 << (PHPParser.Try - 104)) | (1 << (PHPParser.Typeof - 104)) | (1 << (PHPParser.UintCast - 104)) | (1 << (PHPParser.UnicodeCast - 104)) | (1 << (PHPParser.Unset - 104)) | (1 << (PHPParser.Use - 104)) | (1 << (PHPParser.Var - 104)) | (1 << (PHPParser.While - 104)) | (1 << (PHPParser.Yield - 104)) | (1 << (PHPParser.Get - 104)) | (1 << (PHPParser.Set - 104)) | (1 << (PHPParser.Call - 104)) | (1 << (PHPParser.CallStatic - 104)) | (1 << (PHPParser.Constructor - 104)) | (1 << (PHPParser.Destruct - 104)) | (1 << (PHPParser.Wakeup - 104)) | (1 << (PHPParser.Sleep - 104)) | (1 << (PHPParser.Autoload - 104)) | (1 << (PHPParser.IsSet__ - 104)) | (1 << (PHPParser.Unset__ - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (PHPParser.ToString__ - 136)) | (1 << (PHPParser.Invoke - 136)) | (1 << (PHPParser.SetState - 136)) | (1 << (PHPParser.Clone__ - 136)) | (1 << (PHPParser.DebugInfo - 136)) | (1 << (PHPParser.Namespace__ - 136)) | (1 << (PHPParser.Class__ - 136)) | (1 << (PHPParser.Traic__ - 136)) | (1 << (PHPParser.Function__ - 136)) | (1 << (PHPParser.Method__ - 136)) | (1 << (PHPParser.Line__ - 136)) | (1 << (PHPParser.File__ - 136)) | (1 << (PHPParser.Dir__ - 136)))) !== 0) || _la===PHPParser.Label)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_memberModifier;
    return this;
}

MemberModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberModifierContext.prototype.constructor = MemberModifierContext;

MemberModifierContext.prototype.Public = function() {
    return this.getToken(PHPParser.Public, 0);
};

MemberModifierContext.prototype.Protected = function() {
    return this.getToken(PHPParser.Protected, 0);
};

MemberModifierContext.prototype.Private = function() {
    return this.getToken(PHPParser.Private, 0);
};

MemberModifierContext.prototype.Static = function() {
    return this.getToken(PHPParser.Static, 0);
};

MemberModifierContext.prototype.Abstract = function() {
    return this.getToken(PHPParser.Abstract, 0);
};

MemberModifierContext.prototype.Final = function() {
    return this.getToken(PHPParser.Final, 0);
};

MemberModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterMemberModifier(this);
	}
};

MemberModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitMemberModifier(this);
	}
};




PHPParser.MemberModifierContext = MemberModifierContext;

PHPParser.prototype.memberModifier = function() {

    var localctx = new MemberModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, PHPParser.RULE_memberModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1584;
        _la = this._input.LA(1);
        if(!(_la===PHPParser.Abstract || _la===PHPParser.Final || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (PHPParser.Private - 104)) | (1 << (PHPParser.Protected - 104)) | (1 << (PHPParser.Public - 104)) | (1 << (PHPParser.Static - 104)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MagicConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_magicConstant;
    return this;
}

MagicConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MagicConstantContext.prototype.constructor = MagicConstantContext;

MagicConstantContext.prototype.Namespace__ = function() {
    return this.getToken(PHPParser.Namespace__, 0);
};

MagicConstantContext.prototype.Class__ = function() {
    return this.getToken(PHPParser.Class__, 0);
};

MagicConstantContext.prototype.Traic__ = function() {
    return this.getToken(PHPParser.Traic__, 0);
};

MagicConstantContext.prototype.Function__ = function() {
    return this.getToken(PHPParser.Function__, 0);
};

MagicConstantContext.prototype.Method__ = function() {
    return this.getToken(PHPParser.Method__, 0);
};

MagicConstantContext.prototype.Line__ = function() {
    return this.getToken(PHPParser.Line__, 0);
};

MagicConstantContext.prototype.File__ = function() {
    return this.getToken(PHPParser.File__, 0);
};

MagicConstantContext.prototype.Dir__ = function() {
    return this.getToken(PHPParser.Dir__, 0);
};

MagicConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterMagicConstant(this);
	}
};

MagicConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitMagicConstant(this);
	}
};




PHPParser.MagicConstantContext = MagicConstantContext;

PHPParser.prototype.magicConstant = function() {

    var localctx = new MagicConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, PHPParser.RULE_magicConstant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1586;
        _la = this._input.LA(1);
        if(!(((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (PHPParser.Namespace__ - 141)) | (1 << (PHPParser.Class__ - 141)) | (1 << (PHPParser.Traic__ - 141)) | (1 << (PHPParser.Function__ - 141)) | (1 << (PHPParser.Method__ - 141)) | (1 << (PHPParser.Line__ - 141)) | (1 << (PHPParser.File__ - 141)) | (1 << (PHPParser.Dir__ - 141)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MagicMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_magicMethod;
    return this;
}

MagicMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MagicMethodContext.prototype.constructor = MagicMethodContext;

MagicMethodContext.prototype.Get = function() {
    return this.getToken(PHPParser.Get, 0);
};

MagicMethodContext.prototype.Set = function() {
    return this.getToken(PHPParser.Set, 0);
};

MagicMethodContext.prototype.Call = function() {
    return this.getToken(PHPParser.Call, 0);
};

MagicMethodContext.prototype.CallStatic = function() {
    return this.getToken(PHPParser.CallStatic, 0);
};

MagicMethodContext.prototype.Constructor = function() {
    return this.getToken(PHPParser.Constructor, 0);
};

MagicMethodContext.prototype.Destruct = function() {
    return this.getToken(PHPParser.Destruct, 0);
};

MagicMethodContext.prototype.Wakeup = function() {
    return this.getToken(PHPParser.Wakeup, 0);
};

MagicMethodContext.prototype.Sleep = function() {
    return this.getToken(PHPParser.Sleep, 0);
};

MagicMethodContext.prototype.Autoload = function() {
    return this.getToken(PHPParser.Autoload, 0);
};

MagicMethodContext.prototype.IsSet__ = function() {
    return this.getToken(PHPParser.IsSet__, 0);
};

MagicMethodContext.prototype.Unset__ = function() {
    return this.getToken(PHPParser.Unset__, 0);
};

MagicMethodContext.prototype.ToString__ = function() {
    return this.getToken(PHPParser.ToString__, 0);
};

MagicMethodContext.prototype.Invoke = function() {
    return this.getToken(PHPParser.Invoke, 0);
};

MagicMethodContext.prototype.SetState = function() {
    return this.getToken(PHPParser.SetState, 0);
};

MagicMethodContext.prototype.Clone__ = function() {
    return this.getToken(PHPParser.Clone__, 0);
};

MagicMethodContext.prototype.DebugInfo = function() {
    return this.getToken(PHPParser.DebugInfo, 0);
};

MagicMethodContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterMagicMethod(this);
	}
};

MagicMethodContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitMagicMethod(this);
	}
};




PHPParser.MagicMethodContext = MagicMethodContext;

PHPParser.prototype.magicMethod = function() {

    var localctx = new MagicMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, PHPParser.RULE_magicMethod);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1588;
        _la = this._input.LA(1);
        if(!(((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (PHPParser.Get - 125)) | (1 << (PHPParser.Set - 125)) | (1 << (PHPParser.Call - 125)) | (1 << (PHPParser.CallStatic - 125)) | (1 << (PHPParser.Constructor - 125)) | (1 << (PHPParser.Destruct - 125)) | (1 << (PHPParser.Wakeup - 125)) | (1 << (PHPParser.Sleep - 125)) | (1 << (PHPParser.Autoload - 125)) | (1 << (PHPParser.IsSet__ - 125)) | (1 << (PHPParser.Unset__ - 125)) | (1 << (PHPParser.ToString__ - 125)) | (1 << (PHPParser.Invoke - 125)) | (1 << (PHPParser.SetState - 125)) | (1 << (PHPParser.Clone__ - 125)) | (1 << (PHPParser.DebugInfo - 125)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_primitiveType;
    return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;

PrimitiveTypeContext.prototype.BoolType = function() {
    return this.getToken(PHPParser.BoolType, 0);
};

PrimitiveTypeContext.prototype.IntType = function() {
    return this.getToken(PHPParser.IntType, 0);
};

PrimitiveTypeContext.prototype.Int64Type = function() {
    return this.getToken(PHPParser.Int64Type, 0);
};

PrimitiveTypeContext.prototype.DoubleType = function() {
    return this.getToken(PHPParser.DoubleType, 0);
};

PrimitiveTypeContext.prototype.StringType = function() {
    return this.getToken(PHPParser.StringType, 0);
};

PrimitiveTypeContext.prototype.Resource = function() {
    return this.getToken(PHPParser.Resource, 0);
};

PrimitiveTypeContext.prototype.ObjectType = function() {
    return this.getToken(PHPParser.ObjectType, 0);
};

PrimitiveTypeContext.prototype.Array = function() {
    return this.getToken(PHPParser.Array, 0);
};

PrimitiveTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitPrimitiveType(this);
	}
};




PHPParser.PrimitiveTypeContext = PrimitiveTypeContext;

PHPParser.prototype.primitiveType = function() {

    var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, PHPParser.RULE_primitiveType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1590;
        _la = this._input.LA(1);
        if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (PHPParser.Array - 41)) | (1 << (PHPParser.BoolType - 41)) | (1 << (PHPParser.DoubleType - 41)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (PHPParser.Int64Type - 89)) | (1 << (PHPParser.IntType - 89)) | (1 << (PHPParser.ObjectType - 89)) | (1 << (PHPParser.Resource - 89)) | (1 << (PHPParser.StringType - 89)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CastOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PHPParser.RULE_castOperation;
    return this;
}

CastOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastOperationContext.prototype.constructor = CastOperationContext;

CastOperationContext.prototype.BoolType = function() {
    return this.getToken(PHPParser.BoolType, 0);
};

CastOperationContext.prototype.Int8Cast = function() {
    return this.getToken(PHPParser.Int8Cast, 0);
};

CastOperationContext.prototype.Int16Cast = function() {
    return this.getToken(PHPParser.Int16Cast, 0);
};

CastOperationContext.prototype.IntType = function() {
    return this.getToken(PHPParser.IntType, 0);
};

CastOperationContext.prototype.Int64Type = function() {
    return this.getToken(PHPParser.Int64Type, 0);
};

CastOperationContext.prototype.UintCast = function() {
    return this.getToken(PHPParser.UintCast, 0);
};

CastOperationContext.prototype.DoubleCast = function() {
    return this.getToken(PHPParser.DoubleCast, 0);
};

CastOperationContext.prototype.DoubleType = function() {
    return this.getToken(PHPParser.DoubleType, 0);
};

CastOperationContext.prototype.FloatCast = function() {
    return this.getToken(PHPParser.FloatCast, 0);
};

CastOperationContext.prototype.StringType = function() {
    return this.getToken(PHPParser.StringType, 0);
};

CastOperationContext.prototype.BinaryCast = function() {
    return this.getToken(PHPParser.BinaryCast, 0);
};

CastOperationContext.prototype.UnicodeCast = function() {
    return this.getToken(PHPParser.UnicodeCast, 0);
};

CastOperationContext.prototype.Array = function() {
    return this.getToken(PHPParser.Array, 0);
};

CastOperationContext.prototype.ObjectType = function() {
    return this.getToken(PHPParser.ObjectType, 0);
};

CastOperationContext.prototype.Resource = function() {
    return this.getToken(PHPParser.Resource, 0);
};

CastOperationContext.prototype.Unset = function() {
    return this.getToken(PHPParser.Unset, 0);
};

CastOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.enterCastOperation(this);
	}
};

CastOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PHPParserListener ) {
        listener.exitCastOperation(this);
	}
};




PHPParser.CastOperationContext = CastOperationContext;

PHPParser.prototype.castOperation = function() {

    var localctx = new CastOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, PHPParser.RULE_castOperation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1592;
        _la = this._input.LA(1);
        if(!(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (PHPParser.Array - 41)) | (1 << (PHPParser.BinaryCast - 41)) | (1 << (PHPParser.BoolType - 41)) | (1 << (PHPParser.DoubleCast - 41)) | (1 << (PHPParser.DoubleType - 41)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (PHPParser.FloatCast - 74)) | (1 << (PHPParser.Int8Cast - 74)) | (1 << (PHPParser.Int16Cast - 74)) | (1 << (PHPParser.Int64Type - 74)) | (1 << (PHPParser.IntType - 74)) | (1 << (PHPParser.ObjectType - 74)))) !== 0) || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (PHPParser.Resource - 109)) | (1 << (PHPParser.StringType - 109)) | (1 << (PHPParser.UintCast - 109)) | (1 << (PHPParser.UnicodeCast - 109)) | (1 << (PHPParser.Unset - 109)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


PHPParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 83:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

PHPParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 16);
		case 1:
			return this.precpred(this._ctx, 14);
		case 2:
			return this.precpred(this._ctx, 13);
		case 3:
			return this.precpred(this._ctx, 12);
		case 4:
			return this.precpred(this._ctx, 11);
		case 5:
			return this.precpred(this._ctx, 10);
		case 6:
			return this.precpred(this._ctx, 9);
		case 7:
			return this.precpred(this._ctx, 8);
		case 8:
			return this.precpred(this._ctx, 7);
		case 9:
			return this.precpred(this._ctx, 6);
		case 10:
			return this.precpred(this._ctx, 5);
		case 11:
			return this.precpred(this._ctx, 4);
		case 12:
			return this.precpred(this._ctx, 3);
		case 13:
			return this.precpred(this._ctx, 2);
		case 14:
			return this.precpred(this._ctx, 1);
		case 15:
			return this.precpred(this._ctx, 15);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.PHPParser = PHPParser;
